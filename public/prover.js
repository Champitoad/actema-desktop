// Generated by js_of_ocaml 4.0.0
(function(Object)
   {typeof globalThis
    !==
    "object"
    &&
    (this
      ?get()
      :(Object.defineProperty
         (Object.prototype,"_T_",{configurable:true,get:get}),
        _T_));
    function get()
     {var global=this || self;
      global.globalThis = global;
      delete Object.prototype._T_}}
  (Object));
(function(globalThis)
   {"use strict";
    var
     jsoo_exports=
      typeof module === "object" && module.exports || globalThis;
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_array_fill(array,ofs,len,v)
     {for(var i=0;i < len;i++)array[ofs + i + 1] = v;return 0}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_bytes_to_array(s)
     {if(globalThis.Uint8Array)
       var a=new (globalThis.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_jsbytes_of_string(s)
     {s.t & 6 && caml_convert_string_to_bytes(s);return s.c}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (globalThis.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (globalThis.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=globalThis,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (globalThis.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (globalThis.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_int64_lo32(v){return v.lo32()}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {if(! caml_global_data.Failure)
       caml_global_data.Failure = [248,caml_string_of_jsbytes("Failure"),- 3];
      caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    var caml_ephe_key_offset=3;
    function caml_weak_set(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
    function caml_ephe_unset_key(x,i){return caml_weak_set(x,i,0)}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_final_register(){return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[5] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function fs_node_supported()
     {return typeof globalThis.process
             !==
             "undefined"
             &&
             typeof globalThis.process.versions
             !==
             "undefined"
             &&
             typeof globalThis.process.versions.node
             !==
             "undefined"}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return fs_node_supported()
              &&
              globalThis.process
              &&
              globalThis.process.platform
              ?globalThis.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
     var caml_current_dir=globalThis.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {caml_raise_sys_error(name + ": No such file or directory")}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof globalThis.Uint8Array))
       a = new (globalThis.Uint8Array)(a);
      var buffer=globalThis.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof globalThis.Uint8Array))
       a = new (globalThis.Uint8Array)(a);
      var buffer=globalThis.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (globalThis.Uint8Array)(1),buffer=globalThis.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root"),
     jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res && fs_node_supported())
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function jsoo_create_file(name,content)
     {var
       name=caml_string_of_jsbytes(name),
       content=caml_string_of_jsbytes(content);
      return caml_create_file(name,content)}
    function caml_fs_init()
     {var tmp=globalThis.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        jsoo_create_file(tmp[i].name,tmp[i].content);
      globalThis.jsoo_create_file = jsoo_create_file;
      globalThis.caml_fs_tmp = [];
      return 0}
    function caml_get_exception_raw_backtrace(){return [0]}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === undefined)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_ml_bytes_content(s)
     {switch(s.t & 6)
       {default:caml_convert_string_to_bytes(s);case 0:return s.c;
        case 4:return s.c
        }}
    function caml_hash_mix_bytes(h,v)
     {var content=caml_ml_bytes_content(v);
      return typeof content === "string"
              ?caml_hash_mix_jsbytes(h,content)
              :caml_hash_mix_bytes_arr(h,content)}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_add(x,y){return x.add(y)}
    function caml_int64_and(x,y){return x.and(y)}
    function caml_int64_div(x,y){return x.div(y)}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function caml_int64_to_int32(x){return x.toInt()}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_int64_mod(x,y){return x.mod(y)}
    function caml_int64_mul(x,y){return x.mul(y)}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return new
              MlInt64
              (x & 0xffffff,
               Math.floor(x * caml_int64_offset) & 0xffffff,
               Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff)}
    function caml_int64_ult(x,y){return x.ucompare(y) < 0}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=
        new MlInt64(0xffffff,0xfffffff,0xffff).udivmod(base64).quotient,
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(base == 10 && caml_int64_ult(new MlInt64(0,0,0x8000),res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function caml_int64_shift_right(x,s){return x.shift_right(s)}
    function caml_int64_sub(x,y){return x.sub(y)}
    function caml_int64_to_float(x){return x.toFloat()}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_from_array(a){return a.slice(1)}
    function caml_js_get_console()
     {var
       c=globalThis.console?globalThis.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_js_object(a)
     {var o={};
      for(var i=1;i < a.length;i++)
       {var p=a[i];o[caml_jsstring_of_string(p[1])] = p[2]}
      return o}
    function caml_js_to_array(a)
     {var len=a.length,b=new Array(len + 1);
      b[0] = 0;
      for(var i=0;i < len;i++)b[i + 1] = a[i];
      return b}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    var
     caml_md5_bytes=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[],content=caml_ml_bytes_content(s);
           if(typeof content === "string")
            {var b=content;
             for(var i=0;i < len;i += 4)
              {var j=i + ofs;
               buf[i >> 2]
               =
               b.charCodeAt(j)
               |
               b.charCodeAt(j + 1)
               <<
               8
               |
               b.charCodeAt(j + 2)
               <<
               16
               |
               b.charCodeAt(j + 3)
               <<
               24}
             for(;i < len;i++)
              buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3)}
           else
            {var a=content;
             for(var i=0;i < len;i += 4)
              {var j=i + ofs;
               buf[i >> 2]
               =
               a[j]
               |
               a[j + 1]
               <<
               8
               |
               a[j + 2]
               <<
               16
               |
               a[j + 3]
               <<
               24}
             for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)}
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    function caml_sys_close(fd){delete caml_global_data.fds[fd];return 0}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_flush(chanid);
      chan.opened = false;
      chan.file.close();
      caml_sys_close(chan.fd);
      return 0}
    function caml_ml_debug_info_status(){return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_ml_may_refill_input(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill == null)return;
      if(chan.file.length() != chan.offset)return;
      caml_ml_refill_input(chan)}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      if(chan.offset >= chan.file.length())caml_raise_end_of_file();
      var res=chan.file.read_one(chan.offset);
      chan.offset++;
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=globalThis;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=globalThis;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var refill=null;
      if(fd == 0 && fs_node_supported())
       {var fs=require("fs");
        refill
        =
        function(){return caml_string_of_jsstring(fs.readFileSync(0,"utf8"))}}
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_string_of_bytes(s){return s}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_make_forward(b,v){b[0] = 250;b[1] = v;return 0}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && globalThis.toplevelReloc)
       n = globalThis.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    var
     caml_argv=
      function()
        {var g=globalThis,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;main = argv[1];args = argv.slice(2)}
         var p=caml_string_of_jsstring(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_string_of_jsstring(args[i]));
         return args2}
       ();
    function caml_sys_argv(a){return caml_argv}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_exit(code)
     {var g=globalThis;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    var
     os_type=
      globalThis.process
       &&
       globalThis.process.platform
       &&
       globalThis.process.platform
       ==
       "win32"
       ?"Cygwin"
       :"Unix";
    function caml_sys_get_config()
     {return [0,caml_string_of_jsbytes(os_type),32,0]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=globalThis,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
       return caml_string_of_jsstring(globalThis.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {if(globalThis.crypto)
       if(typeof globalThis.crypto.getRandomValues === "function")
        {var a=new (globalThis.Uint32Array)(1);
         globalThis.crypto.getRandomValues(a);
         return [0,a[0]]}
       else
        if(globalThis.crypto.randomBytes === "function")
         {var
           buff=globalThis.crypto.randomBytes(4),
           a=new (globalThis.Uint32Array)(buff);
          return [0,a[0]]}
      var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_weak_blit(a1,i1,a2,i2,len)
     {caml_array_blit
       (a1,caml_ephe_key_offset + i1 - 1,a2,caml_ephe_key_offset + i2 - 1,len);
      return 0}
    function caml_weak_check(x,i)
     {return x[caml_ephe_key_offset + i]
              !==
              undefined
              &&
              x[caml_ephe_key_offset + i]
              !==
              0
              ?1
              :0}
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    function caml_weak_get(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_key");
      return x[caml_ephe_key_offset + i] === undefined
              ?0
              :x[caml_ephe_key_offset + i]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_weak_get_copy(x,i)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.get_copy");
      var y=caml_weak_get(x,i);
      if(y === 0)return y;
      var z=y[1];
      if(z instanceof Array)return [0,caml_obj_dup(z)];
      return y}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (globalThis.RangeError
        &&
        e instanceof globalThis.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (globalThis.InternalError
        &&
        e instanceof globalThis.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof globalThis.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    function MlNat(x)
     {this.data = new (globalThis.Int32Array)(x);
      this.length = this.data.length + 2}
    MlNat.prototype.caml_custom = "_nat";
    function create_nat(size)
     {var arr=new MlNat(size);
      for(var i=0;i < size;i++)arr.data[i] = - 1;
      return arr}
    function incr_nat(nat,ofs,len,carry_in)
     {var carry=carry_in;
      for(var i=0;i < len;i++)
       {var x=(nat.data[ofs + i] >>> 0) + carry;
        nat.data[ofs + i] = x | 0;
        if(x == x >>> 0){carry = 0;break}else carry = 1}
      return carry}
    function serialize_nat(writer,nat,sz)
     {var len=nat.data.length;
      writer.write(32,len);
      for(var i=0;i < len;i++)writer.write(32,nat.data[i]);
      sz[0] = len * 4;
      sz[1] = len * 8}
    function deserialize_nat(reader,sz)
     {var len=reader.read32s(),nat=new MlNat(len);
      for(var i=0;i < len;i++)nat.data[i] = reader.read32s();
      sz[0] = len * 4;
      return nat}
    function num_digits_nat(nat,ofs,len)
     {for(var i=len - 1;i >= 0;i--)if(nat.data[ofs + i] != 0)return i + 1;
      return 1}
    function caml_hash_nat(x)
     {var len=num_digits_nat(x,0,x.data.length),h=0;
      for(var i=0;i < len;i++)h = caml_hash_mix_int(h,x.data[i]);
      return h}
    function initialize_nat()
     {caml_custom_ops["_nat"]
      =
      {deserialize:deserialize_nat,serialize:serialize_nat,hash:caml_hash_nat}}
    function set_digit_nat(nat,ofs,digit){nat.data[ofs] = digit;return 0}
    function set_to_zero_nat(nat,ofs,len)
     {for(var i=0;i < len;i++)nat.data[ofs + i] = 0;return 0}
    function unix_inet_addr_of_string(){return 0}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         handler(err,false);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)at_exit(0);
          globalThis.console.error("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    function caml_setup_uncaught_exception_handler()
     {var g=globalThis;
      if(g.process && g.process.on)
       g.process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);g.process.exit(2)});
      else
       if(g.addEventListener)
        g.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     zero$0=caml_int64_create_lo_mi_hi(0,0,0),
     one$0=caml_int64_create_lo_mi_hi(1,0,0),
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     shared=
      [0,
       caml_string_of_jsbytes("clone"),
       caml_string_of_jsbytes("next"),
       caml_string_of_jsbytes("count")],
     _hZ_=
      [0,
       caml_string_of_jsbytes("put"),
       caml_string_of_jsbytes("flush"),
       caml_string_of_jsbytes("close_out")],
     _h1_=[0,caml_string_of_jsbytes("get"),caml_string_of_jsbytes("close_in")],
     shared$0=
      [0,caml_string_of_jsbytes("close_in"),caml_string_of_jsbytes("input")],
     at_negative_index_msg=
      caml_string_of_jsbytes("List: Negative index not allowed"),
     at_after_end_msg=caml_string_of_jsbytes("List: Index past end of list"),
     cany=[0,[0,0,255],0],
     eps_expr=[0,0,0],
     partial$0=[12,62,0],
     dummy$3=[0,caml_string_of_jsbytes(""),[0,-1,-1],[0,-1,-1],-1,-1],
     nat=[0,[0,caml_string_of_jsbytes("nat"),0]],
     zero$3=[1,caml_string_of_jsbytes("Z"),0],
     v$0=[1,1],
     v=[1,0],
     default_reduction=
      [0,
       8,
       caml_string_of_jsbytes
        ("\0>\0\0\0<\x0e\0=\r\0\0-\0\0;\0\x0f\x01\0?\0@\x12\0\0\0\0\0\0\0\0\0\0\0\0\x0045\x003\0\x0027\0\0\0\0\0\0\x13\0\0\x009\0\0\x15\x10\0\0\0\0\0\0\x17\0\0\0\x1b\0\x11\0\x02\0A\0B\0\0\0\0\0\0\0\0) \x07\0\n\0\0\b\0\0\0\x03\"\0\0$'\0\0/\0\0\0\0C\0\0+\0D\0\0%\x04\0E\0F\x05\0G")],
     error=
      [0,
       30,
       caml_string_of_jsbytes
        ("\x80\b \0\0\0\0\0\0\x82\0\x03'pH\x04\b \0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0@\0\x02\0\x02\b\0\0\0\0\0\0\x80\0\0\x10\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\x02\x80(\xf0\0\0\0\0\0\0\0\0 \n<\0\x80(\xf0\0I\xdc2\x01\x02\b\0\x04\0\0\0\x12S\f\x80\0\x02\0\0\0\0\x02\x02\b \0\0\0\x80\0\0\0\b\0\x82\b\0\x06\b \0\0\0\0\0\0\0\0\x05\x10\0\0\0\0\0\0A\0\0\0 \x82\0\0\0\0\0\0\0\0\0\b \x80\x01\xcc\b\x1aG0 i\x10@\0\x80\0\0\x02\x02\0\xa3\xc0\0\0\0\0\0\0 \0\0\0\x02\x02\0\xa3\xc0\0\0\0\0\0\0\x02\0\0\0\x80\0\0\0\0\0\0\0\0\x04\x94\xc1 \x80(\xf0\0IL\x12\b\x02\x8f\0\x04\x94\xc1 \x80(\xf0\0\0\0\0\b\x02\x8f\0\x04\x94\xc1 \x12S\x04\x80\0\0\0\x01\x050\0\0\0\0\0\0S\0\0\0\0\0\0\x050@\0\0\0\x03\"\0\x80\0\0\0\0\0\0\b\0\b\x80\x000\b \x80\x01\x8c\0\x02\x02 \0\x1e\n\x88  c\x02\0\x90 \x82\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\x02\b\xa0\0c\x02\0\x90\0\0\0\0\0 \0\x02\b \0c\0\0\x80\0\0\0\0\0\0\0\b\x80\0\0\x82(\xf0\0\0\0\0\0\0\0\0\0\x94\xc0 \x80(\xf0\0\0\0\0\0 \0\0 \n<\0\0S\x04\0\0\0\x10\0\0\0\0\b\x80\0!\0\0\x80\0\0\0\0 \0\b\0\0\0\0\0\0\0\0@\0\x82\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0 \x82\b\0\0\0\0\0\0\0\0\x01\x04\0\x10\0\0\0\0")],
     action=
      [0,
       [0,
        16,
        caml_string_of_jsbytes
         ("\0\x06\0\0\0\x05\0\t\0\xe8\0\0\0\0\0\0\0\0\0\0\0\x1a\0\x05\0\0\0\b\0H\0\0\0d\0\0\0\0\0F\0\0\0\x8a\0\0\0\0\0\x8a\0\x8a\0\x18\0\xe8\0x\0f\0\x84\0r\0\x94\0\x96\0\x90\0\x94\0\x94\0\0\0\0\x01\x1e\0\0\0J\0\x94\0\0\0\0\0\x94\x008\0J\x01\x18\0\x94\0\x8a\0\0\0\x84\0\xa0\0\x8a\0\0\0\xc0\0\x05\0\0\0\0\0\xac\0\x8a\0\xc8\0\x8a\0\xe4\0\x8a\0\0\0\x8a\x01\0\x01\x1c\0\0\x01\x88\0\0\0v\0\0\x01\x96\0\0\0\xd4\0\0\0\xcc\x01\f\0\x94\x01\xac\0,\0\x94\x01\\\0\x94\0\0\0\0\0\0\0\x05\0\0\x01j\x01`\0\0\0\xe2\0\x94\x01\xba\0\0\0\0\0\x05\x016\0\0\0\0\x01d\0\x8a\0\0\0\xf8\0\x8a\x01\xb8\0\xe0\0\0\x01D\0\xd4\0\0\x01\xa4\0\0\x01\x02\0\x05\0\0\0\0\x01\x16\0\0\x01j\0\0\0\0\0\xb8\0\0")],
       [0,
        16,
        caml_string_of_jsbytes
         ('\0\xe5\0\xe5\x01\x96\0\x07\0\xe5\0"\0\x95\0\xe5\0\x12\0\xe5\0\n\x006\0\xe5\0\xe5\0:\0\n\0\x0e\0M\0\xad\0\xe5\0M\0\x0e\0\xe5\0M\0n\0M\0\x15\x006\0M\0M\0\x15\0\xaa\0\xd5\0\xd5\0\xe5\0M\0\xd5\0\xd5\0M\0.\0\xaa\0\xdd\0\xdd\0>\0\xd5\0\xdd\0\xb6\x01R\0\x15\x01j\x01r\0\xd5\0\xd5\0\xdd\0\xd5\0F\0U\0\xd5\0S\0U\0\xdd\0\xdd\0U\0\xdd\0U\0v\0\xdd\0U\0U\0[\0\xf6\0^\0\xfe\0\xf1\0U\x01\x0e\x01\x06\0U\0y\0\x96\0\x86\0b\0y\0f\0~\0\x82\0\x92\0j\0z\0\xce\0\xd2\0q\0\x9a\0\x8a\0q\0\xaa\0\x8e\0\xf6\0\xca\0\xfe\0y\0\xb6\x01\x0e\x01\x06\0\xda\0e\x01;\x01>\0e\0q\0\x81\0\xf6\0q\0\xfe\0\x81\x01\xff\x01\x0e\x01\x06\0\xe6\0]\x01B\0\x16\0]\0e\x01N\0]\0e\0]\0\n\x01\x82\0]\x01\x06\x01\xb2\0a\0\x0e\x01\xbf\0a\0]\0)\0\xf6\0]\0\xfe\0)\0\xaa\x01\x0e\x01\x06\0\xc5\0m\0\xa2\0\xb6\0m\0a\0\xc5\0\xf6\0a\0\xfe\x01\xda\0^\x01\x0e\x01\x06\0)\x01F\x01\xeb\0\x89\0\xc1\0m\0\xa5\0b\0m\0f\0\xa5\0\0\0\0\0j\0z\0\xce\0\xd2\0\xaa\0\x9d\0\xaa\0!\x01\xf3\0\x9d\0\xb6\0!\0\xb6\0\xb5\0\x86\x01\xc6\0\xf6\0\x9d\0\xfe\0\x9d\0\x92\x01\x0e\x01\x06\0\0\0y\0\0\0\x9a\0\x9d\x01"\0!\x01Z\x01\xa6\x01Z\0\0\0=\0\0\0=\x01\xd3\0\0\0=\0=\0\xf6\0\0\0\xfe\0\xaa\0-\x01\x0e\x01\x06\0\0\0-\0\xb6\0\xaa\0\xbd\x013\0\0\x01\xd6\0\xbd\0\xb6\0\xf6\0\0\0\xfe\0\0\0\0\x01\x0e\x01\x06\0\0\0\0\0-\0\0\0\0\0u\0\0\0\0\0\0\0\xbd')]],
     lhs=
      [0,
       8,
       caml_string_of_jsbytes
        ("\x04\x03\x02\x01\0\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1d\x1c\x1c\x1b\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x19\x18\x18\x17\x17\x16\x16\x15\x14\x14\x13\x13\x12\x12\x11\x11\x10\x10\x0f\x0e\r\f\f\f\f\f\f\x0b\n\n\n\n\t\t\b\b\x07\x07\x06\x06\x05\x05")],
     goto$0=
      [0,
       [0,
        8,
        caml_string_of_jsbytes
         ("2\0D\0:\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\r\0\0PZ\0F\0\0\n\0\x02\0\0\xb8\xbe\0\0\0\0\0\xc2\0\0\xc8\0\0\0\0t\0Z\0~\0\0\xd0\0\0\0\x82\0\x86\0\x8a\0\x8e\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\xae\0\t\0\0\0\x18\0\x1c\0\0\0\xda\0\0\0Z\x15\0\0\0*\0\0\x98\0\0\0\0\f\0,\0\0\xb6\0\0\0\0\x05\0\0\0\0")],
       [0,
        8,
        caml_string_of_jsbytes
         ("89K~89gc,V,\x7fh,1X<id2<L\x07eso,^y_q89Y\x13\x07qk`\x07\n\\\x07z\x07\x07\b<i\r89\x1d\n\x1489\n\x0b6\n\x0b\x11\n\x0blHJ89\0<G8989898989\0<F89\0<=<?<A<C<E,V\x07<n,0Y(*,-Z,/8;,S\0\nx,b")]],
     lr0_incoming=
      [0,
       8,
       caml_string_of_jsbytes
        ("\0\x02\x1a&\x1a\f\x15#\f9;6# \x16\x109\f\x13;0\0\x02\x06\x1a\x1e&\x1a#\f(&:\x0e&2\x1a\f&\x19\f\x1b\b\x19\x1b\x14\x1b\x1b\x1b\x1d2*,\x1d2\x15\x17.\x1757\x187\x1c7\"7$7775\f7\x1170\0\x02\x04&8\x1b&4\x1b<''18;:\x1b\x1f1\"\x1b\x0f%/\n!-76!)\x12730=6%\0\x02&8;\r+0\0\x02\x0b\x1b0")],
     rhs=
      [0,
       [0,
        8,
        caml_string_of_jsbytes
         ("\x13\x11\x0f\r\x0b&&41&:\x1f&:\x1b&8;\x04&\x04&8\x1b9\x15\x1a9\f5\x1a5\f\x06*&\x17.\x17&\x1a#\f7$77\x1c77\"77\x187\x1e7(\x1d27,\x1d27/)\x127'%!&8;\n-\x1b\x1b<'==6%;;6#776!1\"\x1b&:\x1b\x19\x1a\x19\f\x1a\f&\x1b\x14\x1b\x1b\b\x1b\x0e&2\x1b\x15&& \x16\x10&\x1a\f&\x1a#\f\x02;0\x0270\x0230\x02+0\x02\x1b0")],
       [0,
        8,
        caml_string_of_jsbytes
         ("\0\x01\x02\x03\x04\x05\x06\t\f\x0f\x12\x14\x18\x19\x1a\x1d\x1e!\"#$'+.1479=AEEFFGGHKKMNQRUVYZ]`cdgijmptuvz}\x81\x82\x84\x85\x87\x88\x8a\x8b\x8d\x8e\x90")]],
     lr0_core=
      [0,
       8,
       caml_string_of_jsbytes
        ("\0\x01\x02\x03\x04\x05\x06\x07\b\t\n\x0b\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !\"#$%&'()*+,-./0123456789:;<=>?@CDABEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f")],
     lr0_items=
      [0,
       [0,
        32,
        caml_string_of_jsbytes
         ("\0\0\0\0\0\0\xf4\x01\0\x008\x01\0\0\xf0\x01\0\0\xec\x01\0\0\xe8\x01\0\0\xe4\x01\0\0\xf0\x02\0\0\xec\x02\0\0\xec\x03\0\x004\x01\0\0\xf0\x03\0\0\xf0\x04\0\x000\x01\0\0\xb0\x01\0\0\xac\x01\0\0\xb0\x02\0\0\xb0\x03\0\0\xe8\x02\0\0\xe8\x03\0\0\xe8\x04\0\x008\x02\0\x008\x03\0\0\0\x01\0\0\xf8\x01\0\0\xf8\x02\0\0\x04\0\0\0\xfc\x01\0\0D\x01\0\0@\x01\0\0h\x01\0\0\xf0\x01\0\0\xec\x01\0\0\xe8\x01\0\0\xe4\x01\0\0T\x01\0\0L\x01\0\0\xf0\x02\0\0\xec\x02\0\0T\x02\0\0\xf0\x03\0\0T\x03\0\0\xf0\x04\0\0T\x04\0\0l\x01\0\0\xc0\x01\0\0\xc0\x02\0\0\xdc\x01\0\0\xdc\x02\0\0\xdc\x03\0\0\xcc\x01\0\0\xc8\x01\0\0\xcc\x02\0\0\xd0\x01\0\0\xc8\x02\0\0\xc4\x01\0\0\xc8\x03\0\0\xd8\x01\0\0\xd4\x01\0\0\xd8\x02\0\0\xc4\x01\0\0\xd8\x03\0\0\xd8\x01\0\0\xd4\x01\0\0\xd4\x02\0\0\xd8\x01\0\0\xd4\x03\0\0\xd4\x01\0\0\xdc\x04\0\0\xd8\x01\0\0\xd4\x01\0\0\xd8\x01\0\0\xd4\x01\0\0\xc0\x03\0\0l\x02\0\0l\x03\0\0H\x01\0\0p\x01\0\0p\x02\0\0p\x03\0\0\xe0\x01\0\0P\x01\0\0P\x02\0\0P\x03\0\0<\x01\0\0p\x04\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\0d\x02\0\0d\x03\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\0\\\x02\0\0d\x01\0\0`\x01\0\0\\\x03\0\0\\\x01\0\0X\x01\0\0`\x02\0\0d\x01\0\0`\x03\0\0`\x01\0\0\\\x01\0\0X\x01\0\0X\x02\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x03\0\0X\x01\0\0l\x04\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\0h\x02\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\0@\x02\0\0<\x01\0\0@\x03\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\0\x04\x01\0\x01\0\x01\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\x01\0\x02\0\0\b\0\0\x01\x04\x01\0\0,\x01\0\0(\x01\0\0,\x02\0\0(\x02\0\0,\x03\0\0\xd8\x01\0\0\xd4\x01\0\0,\x04\0\0$\x01\0\0 \x01\0\0\x1c\x01\0\0\x18\x01\0\0\x14\x01\0\0\x18\x02\0\0\xd8\x01\0\0\xd4\x01\0\0\xa0\x01\0\0\x9c\x01\0\0\xa0\x02\0\0\xa0\x03\0\0|\x01\0\0\x18\x03\0\0$\x02\0\0$\x03\0\0 \x02\0\0\x1c\x02\0\0\xd8\x01\0\0\xd4\x01\0\0\xa0\x01\0\0\x9c\x01\0\0 \x03\0\0\x1c\x03\0\0\xbc\x01\0\0\xbc\x02\0\0\xd8\x01\0\0\xd4\x01\0\0\xbc\x03\0\0\b\x01\0\0\x84\x01\0\0t\x01\0\0\x98\x01\0\0\x8c\x01\0\0\x98\x02\0\0\xb8\x01\0\0\xb4\x01\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\0\xb8\x02\0\0\xb8\x03\0\0t\x02\0\0t\x03\0\0t\x04\0\0d\x01\0\0`\x01\0\0\\\x01\0\0X\x01\0\x01\b\x01\0\x01\b\x02\0\0\xa8\x01\0\0\xa4\x01\0\0\xa8\x02\0\0\xa8\x03\0\0\f\0\0\x01\f\x01\0\0\x90\x01\0\0\x90\x02\0\0\x90\x03\0\0\f\x01\0\x01\x10\x01\0\x01\x10\x02\0\0\x10\0\0\x01\x14\x01\0\0\x10\x01\0\x01\x18\x01\0\0\xd8\x01\0\0\xd4\x01\0\x01\x18\x02")],
       [0,
        8,
        caml_string_of_jsbytes
         ("\0\x01\x02\x03\x07\t\n\x0b\f\r\x0e\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f%(*,-./01245689;<=@ADGJKLMNOPQRSTUZ[`afglmrw|~\x7f\x83\x84\x89\x8a\x8b\x8c\x8e\x90\x91\x94\x99\x9a\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa6\xab\xac\xad\xae\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xbd\xbe\xbf\xc0\xc1\xc6\xc7\xc8\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xda\xdb")]],
     nullable=caml_string_of_jsbytes("\0\0\x0b\x80"),
     first$0=
      [0,
       30,
       caml_string_of_jsbytes
        ('\x82\b \x02\0\0\x80\f\x88\x02\0(\x02\x8f\0\x80\b \x02\b \x80\b\0\x02\x002 \b\0\xa0\n<\x02\0 \x80\0\0\x02\0\0\0\b\0\x02\b \0\b \x80\0\0\x02\0\0\x82(\0 \n<\0\0 \x80\x04\0\x02\0\0\x82\b\0\b\0\0\0\0\0\x80\x02\0\xa3\xc0\x10\0\b\0\x02\b \x01"\0\x80\x02\0\xa3\xc0\b\x02\x8f\0\0\b \0\0 \x80\x04\0\x02\0\0')],
     keywords=
      [0,
       [0,caml_string_of_jsbytes("true"),1],
       [0,
        [0,caml_string_of_jsbytes("exists"),18],
        [0,
         [0,caml_string_of_jsbytes("false"),17],
         [0,
          [0,caml_string_of_jsbytes("forall"),16],
          [0,
           [0,caml_string_of_jsbytes("rec"),5],
           [0,[0,caml_string_of_jsbytes("type"),0],0]]]]]],
     ocaml_lex_tables=
      [0,
       caml_string_of_jsbytes
        ("\0\0\xe6\xff\xe7\xff\xe8\xff\xe9\xff\xec\xff!\0\xef\xff\xf0\xff\xf1\xff\x02\0\0\0\xf5\xff\x12\0\x01\0\xf8\xff\xf9\xff\xfa\xff\xfb\xffO\0b\0\x02\0\xff\xff\xf7\xff\xf2\xff\xf6\xff\xf4\xff\x02\0\xf3\xff\xeb\xff\xed\xff"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\xff\xff\xff\xff\x19\0\x19\0\xff\xff\x19\0\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x02\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\x01\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\x16\0\x15\0\0\0\x15\0\0\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x15\0\0\0\0\0\0\0\x0e\0\x17\0\x12\0\x11\0\x03\0\x04\0\t\0\x0b\0\b\0\x1b\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x06\0\x07\0\n\0\x05\0\x1a\0\x18\0\x1c\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x1e\0\0\0\0\0\x1d\0\0\0\0\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x10\0\r\0\x0f\0\f\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\0\0\0\0\0\0\0\0\x19\0\0\0\0\0\0\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\0\0\0\0\0\0\0\0\x14\0\0\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x15\0\xff\xff\0\0\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x15\0\xff\xff\xff\xff\xff\xff\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\r\0\x1b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     _u7_=
      [0,
       caml_string_of_jsbytes("parseToUnicode"),
       caml_string_of_jsbytes("parse")],
     shared$1=
      [0,
       caml_string_of_jsbytes("form"),
       caml_string_of_jsbytes("html"),
       caml_string_of_jsbytes("proof"),
       caml_string_of_jsbytes("position"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("phandle"),
       caml_string_of_jsbytes("parent"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("fresh"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("handle"),
       caml_string_of_jsbytes("mathml")];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _k_=caml_string_of_jsbytes("input"),
     _j_=caml_string_of_jsbytes("output_substring"),
     _i_=caml_string_of_jsbytes("output"),
     _h_=caml_string_of_jsbytes("%.12g"),
     _g_=caml_string_of_jsbytes("."),
     _e_=caml_string_of_jsbytes("true"),
     _f_=caml_string_of_jsbytes("false"),
     _d_=caml_string_of_jsbytes("char_of_int"),
     _a_=caml_string_of_jsbytes("Stdlib.Exit"),
     _b_=caml_int64_create_lo_mi_hi(0,0,32752),
     _c_=caml_int64_create_lo_mi_hi(0,0,65520),
     _l_=caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     _n_=caml_string_of_jsbytes("\\\\"),
     _o_=caml_string_of_jsbytes("\\'"),
     _p_=caml_string_of_jsbytes("\\b"),
     _q_=caml_string_of_jsbytes("\\t"),
     _r_=caml_string_of_jsbytes("\\n"),
     _s_=caml_string_of_jsbytes("\\r"),
     _m_=caml_string_of_jsbytes("Char.chr"),
     _v_=caml_string_of_jsbytes("List.nth"),
     _u_=caml_string_of_jsbytes("tl"),
     _t_=caml_string_of_jsbytes("hd"),
     _y_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _x_=caml_string_of_jsbytes("Bytes.blit"),
     _w_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _C_=caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     _B_=caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     _A_=caml_string_of_jsbytes(""),
     _z_=caml_string_of_jsbytes("String.concat"),
     _I_=[0,caml_string_of_jsbytes("array.ml"),322,4],
     _G_=caml_string_of_jsbytes("Array.blit"),
     _F_=caml_string_of_jsbytes("Array.fill"),
     _E_=caml_string_of_jsbytes("Array.sub"),
     _D_=caml_string_of_jsbytes("Array.init"),
     _H_=caml_string_of_jsbytes("Stdlib.Array.Bottom"),
     _J_=caml_string_of_jsbytes("%d"),
     _N_=caml_string_of_jsbytes("%d"),
     _M_=caml_int64_create_lo_mi_hi(0,0,0),
     _L_=caml_int64_create_lo_mi_hi(1,0,0),
     _K_=caml_int64_create_lo_mi_hi(1,0,0),
     _O_=caml_string_of_jsbytes("%d"),
     _U_=caml_string_of_jsbytes("Set.remove_min_elt"),
     _V_=[0,0,0,0],
     _W_=[0,0,0],
     _X_=[0,caml_string_of_jsbytes("set.ml"),570,18],
     _P_=caml_string_of_jsbytes("Set.bal"),
     _Q_=caml_string_of_jsbytes("Set.bal"),
     _R_=caml_string_of_jsbytes("Set.bal"),
     _S_=caml_string_of_jsbytes("Set.bal"),
     _ab_=caml_string_of_jsbytes("Map.remove_min_elt"),
     _ac_=[0,0,0,0],
     _ad_=[0,caml_string_of_jsbytes("map.ml"),400,10],
     _ae_=[0,0,0],
     _Z_=caml_string_of_jsbytes("Map.bal"),
     ___=caml_string_of_jsbytes("Map.bal"),
     _$_=caml_string_of_jsbytes("Map.bal"),
     _aa_=caml_string_of_jsbytes("Map.bal"),
     _ag_=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
     _ah_=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     _am_=caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     _al_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _ak_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _aj_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _ai_=caml_string_of_jsbytes("Buffer.sub"),
     _aw_=caml_string_of_jsbytes("%c"),
     _ax_=caml_string_of_jsbytes("%s"),
     _ay_=caml_string_of_jsbytes("%i"),
     _az_=caml_string_of_jsbytes("%li"),
     _aA_=caml_string_of_jsbytes("%ni"),
     _aB_=caml_string_of_jsbytes("%Li"),
     _aC_=caml_string_of_jsbytes("%f"),
     _aD_=caml_string_of_jsbytes("%B"),
     _aE_=caml_string_of_jsbytes("%{"),
     _aF_=caml_string_of_jsbytes("%}"),
     _aG_=caml_string_of_jsbytes("%("),
     _aH_=caml_string_of_jsbytes("%)"),
     _aI_=caml_string_of_jsbytes("%a"),
     _aJ_=caml_string_of_jsbytes("%t"),
     _aK_=caml_string_of_jsbytes("%?"),
     _aL_=caml_string_of_jsbytes("%r"),
     _aM_=caml_string_of_jsbytes("%_r"),
     _aN_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _aY_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _aQ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _aZ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _aR_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _a0_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _aS_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _a1_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _aT_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _a2_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _aU_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _aW_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _aO_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _aX_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _aP_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _aV_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bZ_=caml_string_of_jsbytes("%u"),
     _bX_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bY_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _b0_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _b1_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _b2_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _b3_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _b4_=caml_string_of_jsbytes("@{"),
     _b5_=caml_string_of_jsbytes("@["),
     _b6_=caml_string_of_jsbytes("@{"),
     _b7_=caml_string_of_jsbytes("@["),
     _c7_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _ck_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _cn_=caml_string_of_jsbytes("0"),
     _cl_=caml_string_of_jsbytes("padding"),
     _cm_=[0,1,0],
     _co_=[0,0],
     _cp_=caml_string_of_jsbytes("precision"),
     _cq_=[1,0],
     _cr_=[1,1],
     _cB_=caml_string_of_jsbytes("'*'"),
     _cy_=caml_string_of_jsbytes("'-'"),
     _cz_=caml_string_of_jsbytes("'0'"),
     _cA_=caml_string_of_jsbytes("'*'"),
     _cv_=caml_string_of_jsbytes("0"),
     _cw_=[1,1],
     _cx_=caml_string_of_jsbytes("0"),
     _cs_=caml_string_of_jsbytes("precision"),
     _ct_=[1,1],
     _cu_=caml_string_of_jsbytes("precision"),
     _cM_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _cC_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _cD_=caml_string_of_jsbytes("'+'"),
     _cE_=caml_string_of_jsbytes("'#'"),
     _cF_=caml_string_of_jsbytes("' '"),
     _cG_=[0,0],
     _cH_=caml_string_of_jsbytes("`padding'"),
     _cI_=[0,0],
     _cJ_=caml_string_of_jsbytes("`precision'"),
     _cK_=caml_string_of_jsbytes("'+'"),
     _cL_=caml_string_of_jsbytes("'_'"),
     _cN_=[0,[12,64,0]],
     _cO_=[0,caml_string_of_jsbytes("@ "),1,0],
     _cP_=[0,caml_string_of_jsbytes("@,"),0,0],
     _cQ_=[2,60],
     _cR_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _cS_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _cU_=caml_string_of_jsbytes("digit"),
     _cT_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2837,11],
     _cV_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _cW_=caml_string_of_jsbytes("character ')'"),
     _cX_=caml_string_of_jsbytes("character '}'"),
     _cY_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2899,34],
     _c3_=caml_string_of_jsbytes("'#'"),
     _cZ_=caml_string_of_jsbytes("'+'"),
     _c0_=caml_string_of_jsbytes("'+'"),
     _c1_=caml_string_of_jsbytes("' '"),
     _c2_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2935,28],
     _c5_=caml_string_of_jsbytes("'+'"),
     _c4_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2957,11],
     _c6_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _cj_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _ci_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _ch_=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     _cg_=caml_string_of_jsbytes("unexpected end of format"),
     _cf_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _b__=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     _b8_=caml_string_of_jsbytes(""),
     _b9_=[0,0,4],
     _b$_=caml_string_of_jsbytes(""),
     _ca_=caml_string_of_jsbytes("b"),
     _cb_=caml_string_of_jsbytes("h"),
     _cc_=caml_string_of_jsbytes("hov"),
     _cd_=caml_string_of_jsbytes("hv"),
     _ce_=caml_string_of_jsbytes("v"),
     _bW_=caml_string_of_jsbytes("nan"),
     _bU_=caml_string_of_jsbytes("neg_infinity"),
     _bV_=caml_string_of_jsbytes("infinity"),
     _bT_=caml_string_of_jsbytes("."),
     _bS_=[0,103],
     _bG_=caml_string_of_jsbytes("%+nd"),
     _bH_=caml_string_of_jsbytes("% nd"),
     _bJ_=caml_string_of_jsbytes("%+ni"),
     _bK_=caml_string_of_jsbytes("% ni"),
     _bL_=caml_string_of_jsbytes("%nx"),
     _bM_=caml_string_of_jsbytes("%#nx"),
     _bN_=caml_string_of_jsbytes("%nX"),
     _bO_=caml_string_of_jsbytes("%#nX"),
     _bP_=caml_string_of_jsbytes("%no"),
     _bQ_=caml_string_of_jsbytes("%#no"),
     _bF_=caml_string_of_jsbytes("%nd"),
     _bI_=caml_string_of_jsbytes("%ni"),
     _bR_=caml_string_of_jsbytes("%nu"),
     _bt_=caml_string_of_jsbytes("%+ld"),
     _bu_=caml_string_of_jsbytes("% ld"),
     _bw_=caml_string_of_jsbytes("%+li"),
     _bx_=caml_string_of_jsbytes("% li"),
     _by_=caml_string_of_jsbytes("%lx"),
     _bz_=caml_string_of_jsbytes("%#lx"),
     _bA_=caml_string_of_jsbytes("%lX"),
     _bB_=caml_string_of_jsbytes("%#lX"),
     _bC_=caml_string_of_jsbytes("%lo"),
     _bD_=caml_string_of_jsbytes("%#lo"),
     _bs_=caml_string_of_jsbytes("%ld"),
     _bv_=caml_string_of_jsbytes("%li"),
     _bE_=caml_string_of_jsbytes("%lu"),
     _bg_=caml_string_of_jsbytes("%+Ld"),
     _bh_=caml_string_of_jsbytes("% Ld"),
     _bj_=caml_string_of_jsbytes("%+Li"),
     _bk_=caml_string_of_jsbytes("% Li"),
     _bl_=caml_string_of_jsbytes("%Lx"),
     _bm_=caml_string_of_jsbytes("%#Lx"),
     _bn_=caml_string_of_jsbytes("%LX"),
     _bo_=caml_string_of_jsbytes("%#LX"),
     _bp_=caml_string_of_jsbytes("%Lo"),
     _bq_=caml_string_of_jsbytes("%#Lo"),
     _bf_=caml_string_of_jsbytes("%Ld"),
     _bi_=caml_string_of_jsbytes("%Li"),
     _br_=caml_string_of_jsbytes("%Lu"),
     _a5_=caml_string_of_jsbytes("%+d"),
     _a6_=caml_string_of_jsbytes("% d"),
     _a8_=caml_string_of_jsbytes("%+i"),
     _a9_=caml_string_of_jsbytes("% i"),
     _a__=caml_string_of_jsbytes("%x"),
     _a$_=caml_string_of_jsbytes("%#x"),
     _ba_=caml_string_of_jsbytes("%X"),
     _bb_=caml_string_of_jsbytes("%#X"),
     _bc_=caml_string_of_jsbytes("%o"),
     _bd_=caml_string_of_jsbytes("%#o"),
     _a4_=caml_string_of_jsbytes("%d"),
     _a7_=caml_string_of_jsbytes("%i"),
     _be_=caml_string_of_jsbytes("%u"),
     _ao_=caml_string_of_jsbytes("@]"),
     _ap_=caml_string_of_jsbytes("@}"),
     _aq_=caml_string_of_jsbytes("@?"),
     _ar_=caml_string_of_jsbytes("@\n"),
     _as_=caml_string_of_jsbytes("@."),
     _at_=caml_string_of_jsbytes("@@"),
     _au_=caml_string_of_jsbytes("@%"),
     _av_=caml_string_of_jsbytes("@"),
     _an_=[0,0,0],
     _a3_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _da_=caml_string_of_jsbytes(""),
     _db_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _dy_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _dz_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _dx_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     _dw_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _dt_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _du_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _dl_=caml_string_of_jsbytes("Raised at"),
     _dm_=caml_string_of_jsbytes("Re-raised at"),
     _dn_=caml_string_of_jsbytes("Raised by primitive operation at"),
     _do_=caml_string_of_jsbytes("Called from"),
     _dp_=caml_string_of_jsbytes(" (inlined)"),
     _dr_=caml_string_of_jsbytes(""),
     _dq_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _ds_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _dg_=caml_string_of_jsbytes("Out of memory"),
     _dh_=caml_string_of_jsbytes("Stack overflow"),
     _di_=caml_string_of_jsbytes("Pattern matching failed"),
     _dj_=caml_string_of_jsbytes("Assertion failed"),
     _dk_=caml_string_of_jsbytes("Undefined recursive module"),
     _dc_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _dd_=caml_string_of_jsbytes(""),
     _de_=caml_string_of_jsbytes(""),
     _df_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _c$_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _c9_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _c__=caml_string_of_jsbytes("_"),
     _dv_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _dC_=caml_string_of_jsbytes("Fun.Finally_raised: "),
     _dA_=caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     _dE_=caml_string_of_jsbytes("x"),
     _dK_=caml_string_of_jsbytes("Hashtbl: unsupported hash table format"),
     _dJ_=[0,0],
     _dI_=[0,caml_string_of_jsbytes("hashtbl.ml"),102,23],
     _wK_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     _wI_=caml_string_of_jsbytes("CAMLRUNPARAM"),
     _dF_=caml_string_of_jsbytes(""),
     _dR_=caml_string_of_jsbytes("Weak.Make: hash bucket cannot grow more"),
     _dQ_=caml_string_of_jsbytes("Weak.blit"),
     _dP_=caml_string_of_jsbytes("Weak.check"),
     _dO_=caml_string_of_jsbytes("Weak.get_copy"),
     _dN_=caml_string_of_jsbytes("Weak.get"),
     _dM_=caml_string_of_jsbytes("Weak.set"),
     _dL_=caml_string_of_jsbytes("Weak.create"),
     _eb_=[3,0,3],
     _ec_=caml_string_of_jsbytes("."),
     _d__=caml_string_of_jsbytes(">"),
     _d$_=caml_string_of_jsbytes("<\/"),
     _ea_=caml_string_of_jsbytes(""),
     _d7_=caml_string_of_jsbytes(">"),
     _d8_=caml_string_of_jsbytes("<"),
     _d9_=caml_string_of_jsbytes(""),
     _d4_=caml_string_of_jsbytes("\n"),
     _d0_=caml_string_of_jsbytes(""),
     _d1_=caml_string_of_jsbytes(""),
     _d2_=caml_string_of_jsbytes(""),
     _d3_=caml_string_of_jsbytes(""),
     _dZ_=[0,caml_string_of_jsbytes("")],
     _dV_=caml_string_of_jsbytes(""),
     _dW_=caml_string_of_jsbytes(""),
     _dX_=caml_string_of_jsbytes(""),
     _dY_=caml_string_of_jsbytes(""),
     _dU_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _dT_=caml_string_of_jsbytes(""),
     _dS_=caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     _eN_=[0,91],
     _eM_=[0,123],
     _eO_=caml_string_of_jsbytes("end of input not found"),
     _eP_=caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     _eQ_=caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     _eR_=caml_string_of_jsbytes("scanf: missing reader"),
     _eS_=[0,caml_string_of_jsbytes("scanf.ml"),1453,13],
     _eT_=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     _eU_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _eV_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _eW_=caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     _eX_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _eY_=caml_string_of_jsbytes('"'),
     _eZ_=caml_string_of_jsbytes(' in format "'),
     _eL_=[0,37,caml_string_of_jsbytes("")],
     _eK_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _eJ_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _eG_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _eF_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _eC_=caml_string_of_jsbytes("an"),
     _eE_=caml_string_of_jsbytes("x"),
     _eD_=caml_string_of_jsbytes("nfinity"),
     _ex_=caml_string_of_jsbytes("digits"),
     _ey_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _ev_=caml_string_of_jsbytes("decimal digits"),
     _ew_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _er_=caml_string_of_jsbytes("0b"),
     _es_=caml_string_of_jsbytes("0o"),
     _et_=caml_string_of_jsbytes("0u"),
     _eu_=caml_string_of_jsbytes("0x"),
     _eq_=[0,caml_string_of_jsbytes("scanf.ml"),555,9],
     _en_=caml_string_of_jsbytes("false"),
     _eo_=caml_string_of_jsbytes("true"),
     _ep_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _em_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _el_=caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     _ek_=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     _ej_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _ei_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _eh_=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _ee_=caml_string_of_jsbytes("-"),
     _eg_=caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     _ez_=caml_string_of_jsbytes("binary"),
     _eA_=caml_string_of_jsbytes("octal"),
     _eB_=caml_string_of_jsbytes("hexadecimal"),
     _eH_=caml_string_of_jsbytes("a Char"),
     _eI_=caml_string_of_jsbytes("a String"),
     _e0_=caml_string_of_jsbytes(""),
     _wH_=caml_string_of_jsbytes("TMPDIR"),
     _wG_=caml_string_of_jsbytes("TEMP"),
     _e1_=caml_string_of_jsbytes("Cygwin"),
     _e2_=caml_string_of_jsbytes("Win32"),
     _fp_=
      [0,
       [11,
        caml_string_of_jsbytes("Handling error in state "),
        [4,0,0,0,[12,10,[10,0]]]],
       caml_string_of_jsbytes("Handling error in state %d\n%!")],
     _fo_=
      [0,
       [11,caml_string_of_jsbytes("Resuming error handling\n"),[10,0]],
       caml_string_of_jsbytes("Resuming error handling\n%!")],
     _fn_=
      [0,
       [11,caml_string_of_jsbytes("Initiating error handling\n"),[10,0]],
       caml_string_of_jsbytes("Initiating error handling\n%!")],
     _fm_=
      [0,
       [11,
        caml_string_of_jsbytes("Lookahead token is now "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" ("),
          [4,
           0,
           0,
           0,
           [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(")\n"),[10,0]]]]]]]],
       caml_string_of_jsbytes("Lookahead token is now %s (%d-%d)\n%!")],
     _fl_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _fk_=
      [0,
       [11,
        caml_string_of_jsbytes("Shifting ("),
        [2,
         0,
         [11,caml_string_of_jsbytes(") to state "),[4,0,0,0,[12,10,[10,0]]]]]],
       caml_string_of_jsbytes("Shifting (%s) to state %d\n%!")],
     _fj_=
      [0,
       [11,
        caml_string_of_jsbytes("State "),
        [4,0,0,0,[11,caml_string_of_jsbytes(":\n"),[10,0]]]],
       caml_string_of_jsbytes("State %d:\n%!")],
     _fi_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),3634,4],
     _fh_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),3619,8],
     _fg_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),3573,4],
     _ff_=caml_string_of_jsbytes("feed: outgoing transition does not exist"),
     _fe_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),3385,4],
     _fd_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),3298,4],
     _fc_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),3292,4],
     _fb_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),3273,4],
     _fa_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),2638,6],
     _e4_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),1456,4],
     _e5_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),1471,4],
     _e9_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),1813,8],
     _e$_=
      caml_string_of_jsbytes
       ("force_reduction: this reduction is not permitted in this state"),
     _e__=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),2001,6],
     _e8_=[0,caml_string_of_jsbytes("lib/pack/menhirLib.ml"),1786,4],
     _e7_=
      caml_string_of_jsbytes
       ("resume expects HandlingError | Shifting | AboutToReduce"),
     _e6_=caml_string_of_jsbytes("offer expects InputNeeded"),
     _e3_=caml_string_of_jsbytes(""),
     _fz_=caml_string_of_jsbytes("E2BIG"),
     _fB_=caml_string_of_jsbytes("EACCES"),
     _fC_=caml_string_of_jsbytes("EAGAIN"),
     _fD_=caml_string_of_jsbytes("EBADF"),
     _fE_=caml_string_of_jsbytes("EBUSY"),
     _fF_=caml_string_of_jsbytes("ECHILD"),
     _fG_=caml_string_of_jsbytes("EDEADLK"),
     _fH_=caml_string_of_jsbytes("EDOM"),
     _fI_=caml_string_of_jsbytes("EEXIST"),
     _fJ_=caml_string_of_jsbytes("EFAULT"),
     _fK_=caml_string_of_jsbytes("EFBIG"),
     _fL_=caml_string_of_jsbytes("EINTR"),
     _fM_=caml_string_of_jsbytes("EINVAL"),
     _fN_=caml_string_of_jsbytes("EIO"),
     _fO_=caml_string_of_jsbytes("EISDIR"),
     _fP_=caml_string_of_jsbytes("EMFILE"),
     _fQ_=caml_string_of_jsbytes("EMLINK"),
     _fR_=caml_string_of_jsbytes("ENAMETOOLONG"),
     _fS_=caml_string_of_jsbytes("ENFILE"),
     _fT_=caml_string_of_jsbytes("ENODEV"),
     _fU_=caml_string_of_jsbytes("ENOENT"),
     _fV_=caml_string_of_jsbytes("ENOEXEC"),
     _fW_=caml_string_of_jsbytes("ENOLCK"),
     _fX_=caml_string_of_jsbytes("ENOMEM"),
     _fY_=caml_string_of_jsbytes("ENOSPC"),
     _fZ_=caml_string_of_jsbytes("ENOSYS"),
     _f0_=caml_string_of_jsbytes("ENOTDIR"),
     _f1_=caml_string_of_jsbytes("ENOTEMPTY"),
     _f2_=caml_string_of_jsbytes("ENOTTY"),
     _f3_=caml_string_of_jsbytes("ENXIO"),
     _f4_=caml_string_of_jsbytes("EPERM"),
     _f5_=caml_string_of_jsbytes("EPIPE"),
     _f6_=caml_string_of_jsbytes("ERANGE"),
     _f7_=caml_string_of_jsbytes("EROFS"),
     _f8_=caml_string_of_jsbytes("ESPIPE"),
     _f9_=caml_string_of_jsbytes("ESRCH"),
     _f__=caml_string_of_jsbytes("EXDEV"),
     _f$_=caml_string_of_jsbytes("EWOULDBLOCK"),
     _ga_=caml_string_of_jsbytes("EINPROGRESS"),
     _gb_=caml_string_of_jsbytes("EALREADY"),
     _gc_=caml_string_of_jsbytes("ENOTSOCK"),
     _gd_=caml_string_of_jsbytes("EDESTADDRREQ"),
     _ge_=caml_string_of_jsbytes("EMSGSIZE"),
     _gf_=caml_string_of_jsbytes("EPROTOTYPE"),
     _gg_=caml_string_of_jsbytes("ENOPROTOOPT"),
     _gh_=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     _gi_=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     _gj_=caml_string_of_jsbytes("EOPNOTSUPP"),
     _gk_=caml_string_of_jsbytes("EPFNOSUPPORT"),
     _gl_=caml_string_of_jsbytes("EAFNOSUPPORT"),
     _gm_=caml_string_of_jsbytes("EADDRINUSE"),
     _gn_=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     _go_=caml_string_of_jsbytes("ENETDOWN"),
     _gp_=caml_string_of_jsbytes("ENETUNREACH"),
     _gq_=caml_string_of_jsbytes("ENETRESET"),
     _gr_=caml_string_of_jsbytes("ECONNABORTED"),
     _gs_=caml_string_of_jsbytes("ECONNRESET"),
     _gt_=caml_string_of_jsbytes("ENOBUFS"),
     _gu_=caml_string_of_jsbytes("EISCONN"),
     _gv_=caml_string_of_jsbytes("ENOTCONN"),
     _gw_=caml_string_of_jsbytes("ESHUTDOWN"),
     _gx_=caml_string_of_jsbytes("ETOOMANYREFS"),
     _gy_=caml_string_of_jsbytes("ETIMEDOUT"),
     _gz_=caml_string_of_jsbytes("ECONNREFUSED"),
     _gA_=caml_string_of_jsbytes("EHOSTDOWN"),
     _gB_=caml_string_of_jsbytes("EHOSTUNREACH"),
     _gC_=caml_string_of_jsbytes("ELOOP"),
     _gD_=caml_string_of_jsbytes("EOVERFLOW"),
     _gE_=
      [0,
       [11,caml_string_of_jsbytes("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_string_of_jsbytes("EUNKNOWNERR %d")],
     _fA_=
      [0,
       [11,
        caml_string_of_jsbytes("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(", "),
          [3,0,[11,caml_string_of_jsbytes(", "),[3,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("Unix.Unix_error(Unix.%s, %S, %S)")],
     _ft_=caml_string_of_jsbytes("Unix.Unix_error"),
     _fu_=caml_string_of_jsbytes(""),
     _fv_=caml_string_of_jsbytes(""),
     _fx_=caml_string_of_jsbytes("Unix.Unix_error"),
     _gF_=caml_string_of_jsbytes("0.0.0.0"),
     _gG_=caml_string_of_jsbytes("127.0.0.1"),
     _wF_=caml_string_of_jsbytes("::"),
     _wE_=caml_string_of_jsbytes("::1"),
     _gN_=caml_string_of_jsbytes("nat_of_int"),
     _gJ_=caml_string_of_jsbytes("make_nat"),
     _gX_=[0,caml_string_of_jsbytes("src/batInnerWeaktbl.mlv"),110,34],
     _gZ_=[0,caml_string_of_jsbytes("src/batInnerWeaktbl.mlv"),155,16],
     _gY_=[0,caml_string_of_jsbytes("src/batInnerWeaktbl.mlv"),154,16],
     _gW_=caml_string_of_jsbytes("Weaktbl.Stack.push: stack cannot grow"),
     _g7_=caml_string_of_jsbytes("BatIO.output"),
     _g6_=caml_string_of_jsbytes("BatIO.input"),
     _g2_=caml_string_of_jsbytes("BatInnerIO.No_more_input"),
     _g3_=caml_string_of_jsbytes("BatInnerIO.Input_closed"),
     _g4_=caml_string_of_jsbytes("BatInnerIO.Output_closed"),
     _hr_=caml_string_of_jsbytes(""),
     _hp_=caml_string_of_jsbytes(""),
     _ho_=caml_string_of_jsbytes(""),
     _hn_=caml_string_of_jsbytes(" "),
     _hm_=caml_string_of_jsbytes("..."),
     _hl_=[0,caml_string_of_jsbytes("src/batEnum.ml"),49,16],
     _hj_=
      [0,
       caml_string_of_jsbytes("next"),
       caml_string_of_jsbytes("count"),
       caml_string_of_jsbytes("clone")],
     _hk_=caml_string_of_jsbytes("BatEnum.No_more_elements"),
     _hv_=[0,caml_string_of_jsbytes("src/batString.mlv"),971,6],
     _hw_=caml_string_of_jsbytes(""),
     _hu_=caml_string_of_jsbytes(""),
     _hs_=caml_string_of_jsbytes(""),
     _ht_=[0,caml_string_of_jsbytes(""),0],
     _hH_=caml_string_of_jsbytes("%"),
     _hI_=caml_string_of_jsbytes(""),
     _hJ_=caml_string_of_jsbytes(""),
     _hM_=caml_string_of_jsbytes('"'),
     _hN_=caml_string_of_jsbytes('"'),
     _hK_=caml_string_of_jsbytes("'"),
     _hL_=caml_string_of_jsbytes("'"),
     _hG_=caml_string_of_jsbytes("%_"),
     _hF_=[0,caml_string_of_jsbytes("src/batPrintf.mlv"),127,8],
     _hD_=caml_string_of_jsbytes("''"),
     _hE_=caml_string_of_jsbytes("printf: premature end of format string ``"),
     _hz_=caml_string_of_jsbytes("''"),
     _hA_=caml_string_of_jsbytes(" in format string ``"),
     _hB_=caml_string_of_jsbytes(", at char number "),
     _hC_=caml_string_of_jsbytes("printf: bad conversion %"),
     _hx_=caml_string_of_jsbytes("index_of_int: negative argument "),
     _hO_=caml_string_of_jsbytes("Option.get"),
     _h5_=caml_string_of_jsbytes(""),
     _h4_=caml_string_of_jsbytes(""),
     _h3_=caml_string_of_jsbytes(""),
     _h2_=caml_string_of_jsbytes(""),
     _hX_=
      [0,
       caml_string_of_jsbytes("flush"),
       caml_string_of_jsbytes("output"),
       caml_string_of_jsbytes("close_out")],
     _hY_=
      [0,
       caml_string_of_jsbytes("output"),
       caml_string_of_jsbytes("flush"),
       caml_string_of_jsbytes("close_out")],
     _h0_=
      [0,caml_string_of_jsbytes("input"),caml_string_of_jsbytes("close_in")],
     _h6_=caml_string_of_jsbytes("pow"),
     _h7_=caml_string_of_jsbytes("BatNumber.Overflow"),
     _h8_=caml_string_of_jsbytes("BatNumber.NaN"),
     _wy_=caml_string_of_jsbytes("0x5555_5555_5555_5555"),
     _wz_=caml_string_of_jsbytes("0x3333_3333_3333_3333"),
     _wA_=caml_string_of_jsbytes("0x0f0f_0f0f_0f0f_0f0f"),
     _iT_=caml_string_of_jsbytes("Set.remove_min_elt"),
     _iX_=[0,0,0,0],
     _iY_=[0,0,0,0],
     _i3_=[0,0,0],
     _iZ_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _i2_=caml_string_of_jsbytes("{"),
     _i1_=caml_string_of_jsbytes("}"),
     _i0_=caml_string_of_jsbytes(","),
     _iV_=
      caml_string_of_jsbytes("Set.at_rank_exn: negative index not allowed"),
     _iW_=caml_string_of_jsbytes("Set.at_rank_exn i s: i >= (Set.cardinal s)"),
     _iP_=caml_string_of_jsbytes("Set.bal"),
     _iQ_=caml_string_of_jsbytes("Set.bal"),
     _iR_=caml_string_of_jsbytes("Set.bal"),
     _iS_=caml_string_of_jsbytes("Set.bal"),
     _iU_=caml_string_of_jsbytes("BatSet.Concrete.Found"),
     _i4_=caml_string_of_jsbytes("List.iter2: list lengths differ"),
     _i5_=caml_string_of_jsbytes("List.fold_left2: list lengths differ"),
     _ja_=[0,0,0],
     _i$_=caml_string_of_jsbytes("BatList.init"),
     _i9_=caml_string_of_jsbytes("List.combine: list lengths differ"),
     _i__=caml_string_of_jsbytes("List.combine: list lengths differ"),
     _i7_=caml_string_of_jsbytes("List.remove_at"),
     _i8_=caml_string_of_jsbytes("List.remove_at"),
     _i6_=caml_string_of_jsbytes("List.for_all2: list lengths differ"),
     _ji_=[0,0,0,0],
     _jo_=[0,caml_string_of_jsbytes("src/batMap.mlv"),739,8],
     _jj_=[0,[15,[2,0,[15,0]]],caml_string_of_jsbytes("%a%s%a")],
     _jn_=caml_string_of_jsbytes("{\n"),
     _jm_=caml_string_of_jsbytes("\n}"),
     _jl_=caml_string_of_jsbytes(",\n"),
     _jk_=caml_string_of_jsbytes(": "),
     _jg_=[0,caml_string_of_jsbytes("src/batMap.mlv"),143,18],
     _jf_=[0,caml_string_of_jsbytes("src/batMap.mlv"),123,17],
     _jb_=caml_string_of_jsbytes("Map.bal"),
     _jc_=caml_string_of_jsbytes("Map.bal"),
     _jd_=caml_string_of_jsbytes("Map.bal"),
     _je_=caml_string_of_jsbytes("Map.bal"),
     _jq_=caml_string_of_jsbytes("BatUChar.Out_of_range"),
     _ju_=[0,caml_string_of_jsbytes("lib/automata.ml"),360,21],
     _js_=[1,0],
     _jN_=[0,caml_string_of_jsbytes("lib/core.ml"),690,4],
     _kN_=caml_string_of_jsbytes("Re.replace"),
     _kO_=caml_string_of_jsbytes("Re.replace"),
     _jP_=caml_string_of_jsbytes("Re.repn"),
     _jQ_=caml_string_of_jsbytes("Re.repn"),
     _jO_=[0,caml_string_of_jsbytes("lib/core.ml"),723,13],
     _jM_=[0,caml_string_of_jsbytes("lib/core.ml"),493,35],
     _jv_=[0,0,0,0,0,0,0,0,0,0,0],
     _jI_=[0,170,[0,181,[0,186,[0,223,[0,255,0]]]]],
     _kb_=caml_string_of_jsbytes("\t "),
     _lK_=caml_string_of_jsbytes(" "),
     _lL_=caml_string_of_jsbytes(" />"),
     _lM_=caml_string_of_jsbytes("<"),
     _lN_=caml_string_of_jsbytes(">"),
     _lO_=caml_string_of_jsbytes("><\/"),
     _lP_=caml_string_of_jsbytes("<"),
     _lQ_=caml_string_of_jsbytes(">"),
     _lR_=caml_string_of_jsbytes("<\/"),
     _lS_=caml_string_of_jsbytes(">"),
     _lT_=caml_string_of_jsbytes("<"),
     _lU_=caml_string_of_jsbytes("-->"),
     _lV_=caml_string_of_jsbytes("<!--"),
     _lW_=caml_string_of_jsbytes(";"),
     _lX_=caml_string_of_jsbytes("&"),
     _lJ_=[0,[2,0,[12,61,[2,0,0]]],caml_string_of_jsbytes("%s=%s")],
     _lF_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _lG_=[0,[12,34,[4,0,0,0,[12,34,0]]],caml_string_of_jsbytes('"%d"')],
     _lH_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _lI_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _lD_=caml_string_of_jsbytes(", "),
     _lE_=caml_string_of_jsbytes(" "),
     _lA_=
      [0,
       [12,
        60,
        [16,
         [15,
          [12,
           62,
           [16,
            [15,[16,[16,[11,caml_string_of_jsbytes("<\/"),[2,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes("<%t%a>%t%a%t%t<\/%s>")],
     _lB_=
      [0,
       [11,
        caml_string_of_jsbytes("<!--"),
        [2,0,[11,caml_string_of_jsbytes("-->"),0]]],
       caml_string_of_jsbytes("<!--%s-->")],
     _lC_=[0,[12,38,[2,0,[12,59,0]]],caml_string_of_jsbytes("&%s;")],
     _ly_=
      [0,
       [12,60,[15,[11,caml_string_of_jsbytes("/>"),0]]],
       caml_string_of_jsbytes("<%a/>")],
     _lz_=
      [0,
       [12,
        60,
        [15,[12,62,[16,[11,caml_string_of_jsbytes("<\/"),[2,0,[12,62,0]]]]]]],
       caml_string_of_jsbytes("<%a>%t<\/%s>")],
     _lx_=[0,[2,0,[15,[16,0]]],caml_string_of_jsbytes("%s%a%t")],
     _lw_=[0,[16,[2,0,[12,61,[15,0]]]],caml_string_of_jsbytes("%t%s=%a")],
     _ls_=[0,[12,34,[15,[12,34,0]]],caml_string_of_jsbytes('"%a"')],
     _lt_=[0,[12,34,[4,0,0,0,[12,34,0]]],caml_string_of_jsbytes('"%d"')],
     _lu_=[0,[12,34,[2,0,[12,34,0]]],caml_string_of_jsbytes('"%s"')],
     _lv_=[0,[12,34,[15,[12,34,0]]],caml_string_of_jsbytes('"%a"')],
     _lr_=[0,[12,44,[16,0]],caml_string_of_jsbytes(",%t")],
     _lq_=
      [0,
       [18,[1,[0,0,caml_string_of_jsbytes("")]],[15,[17,0,0]]],
       caml_string_of_jsbytes("@[%a@]")],
     _lp_=caml_string_of_jsbytes(" "),
     _lo_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _lk_=[0,[4,0,0,0,[12,101,[4,0,0,0,0]]],caml_string_of_jsbytes("%de%d")],
     _lh_=caml_string_of_jsbytes("Infinity"),
     _li_=caml_string_of_jsbytes("-Infinity"),
     _lj_=caml_string_of_jsbytes("NaN"),
     _ll_=[0,[8,[0,0,3],0,[0,12],0],caml_string_of_jsbytes("%.12g")],
     _lm_=[0,[8,[0,0,3],0,[0,15],0],caml_string_of_jsbytes("%.15g")],
     _ln_=[0,[8,[0,0,3],0,[0,18],0],caml_string_of_jsbytes("%.18g")],
     _k__=caml_string_of_jsbytes("--!>"),
     _k$_=caml_string_of_jsbytes("-->"),
     _la_=caml_string_of_jsbytes("->"),
     _lb_=caml_string_of_jsbytes(">"),
     _lc_=caml_string_of_jsbytes("&gt;"),
     _ld_=caml_string_of_jsbytes("-&gt;"),
     _le_=caml_string_of_jsbytes("--&gt;"),
     _lf_=caml_string_of_jsbytes("--!&gt;"),
     _lg_=[0,1],
     _kT_=caml_string_of_jsbytes("&lt;"),
     _kU_=caml_string_of_jsbytes("&gt;"),
     _kV_=caml_string_of_jsbytes("&amp;"),
     _kQ_=caml_string_of_jsbytes("&quot;"),
     _kR_=caml_string_of_jsbytes("&#"),
     _kS_=caml_string_of_jsbytes(";"),
     _kX_=caml_string_of_jsbytes("--!>"),
     _kZ_=caml_string_of_jsbytes("-->"),
     _k2_=caml_string_of_jsbytes("->"),
     _k6_=caml_string_of_jsbytes(">"),
     _l1_=caml_string_of_jsbytes(""),
     _l2_=[0,1],
     _l3_=
      [0,
       [12,10,[2,0,[12,10,[2,0,[12,10,[2,0,[12,10,0]]]]]]],
       caml_string_of_jsbytes("\n%s\n%s\n%s\n")],
     _lZ_=caml_string_of_jsbytes("]]>"),
     _l4_=caml_string_of_jsbytes("]]>"),
     _l5_=caml_string_of_jsbytes("<![CDATA["),
     _l6_=caml_string_of_jsbytes("//]]>"),
     _l7_=caml_string_of_jsbytes("//<![CDATA["),
     _l8_=caml_string_of_jsbytes("/* ]]> */"),
     _l9_=caml_string_of_jsbytes("/* <![CDATA[ */"),
     _mn_=[0,0],
     _mo_=[0,1],
     _ml_=[0,0],
     _mm_=[0,0],
     _md_=caml_string_of_jsbytes("Fatal error: exception "),
     _me_=caml_string_of_jsbytes("Lwt.Resolution_loop.Canceled"),
     _m__=caml_string_of_jsbytes("[ocamlgraph] fold_pred_e"),
     _m9_=caml_string_of_jsbytes("[ocamlgraph] iter_pred_e"),
     _m8_=caml_string_of_jsbytes("[ocamlgraph] in_degree"),
     _m7_=caml_string_of_jsbytes("[ocamlgraph] fold_pred"),
     _m6_=caml_string_of_jsbytes("[ocamlgraph] iter_pred"),
     _m5_=caml_string_of_jsbytes("[ocamlgraph] fold_succ_e"),
     _m4_=caml_string_of_jsbytes("[ocamlgraph] iter_succ_e"),
     _m3_=caml_string_of_jsbytes("[ocamlgraph] fold_succ"),
     _m2_=caml_string_of_jsbytes("[ocamlgraph] iter_succ"),
     _m0_=caml_string_of_jsbytes("[ocamlgraph] remove_edge_e"),
     _m1_=caml_string_of_jsbytes("[ocamlgraph] remove_edge_e"),
     _mY_=caml_string_of_jsbytes("[ocamlgraph] remove_edge"),
     _mZ_=caml_string_of_jsbytes("[ocamlgraph] remove_edge"),
     _mX_=
      caml_string_of_jsbytes
       ("Graph__Blocks.BidirectionalLabeled(V)(E)(HM).Found"),
     _mW_=caml_string_of_jsbytes("[ocamlgraph] in_degree"),
     _mV_=caml_string_of_jsbytes("[ocamlgraph] pred"),
     _mU_=caml_string_of_jsbytes("[ocamlgraph] fold_pred"),
     _mT_=caml_string_of_jsbytes("[ocamlgraph] iter_pred"),
     _mS_=caml_string_of_jsbytes("[ocamlgraph] succ"),
     _mR_=caml_string_of_jsbytes("[ocamlgraph] fold_succ"),
     _mQ_=caml_string_of_jsbytes("[ocamlgraph] iter_succ"),
     _mP_=caml_string_of_jsbytes("[ocamlgraph] remove_edge"),
     _mO_=caml_string_of_jsbytes("[ocamlgraph] out_degree"),
     _mN_=[0,caml_string_of_jsbytes("src/blocks.ml"),474,8],
     _mM_=caml_string_of_jsbytes("[ocamlgraph] fold_succ_e"),
     _mL_=caml_string_of_jsbytes("[ocamlgraph] iter_succ_e"),
     _mK_=caml_string_of_jsbytes("[ocamlgraph] fold_succ"),
     _mJ_=caml_string_of_jsbytes("[ocamlgraph] iter_succ"),
     _mH_=caml_string_of_jsbytes("[ocamlgraph] remove_edge_e"),
     _mI_=caml_string_of_jsbytes("[ocamlgraph] remove_edge_e"),
     _mF_=caml_string_of_jsbytes("[ocamlgraph] remove_edge"),
     _mG_=caml_string_of_jsbytes("[ocamlgraph] remove_edge"),
     _mE_=caml_string_of_jsbytes("Graph__Blocks.Labeled(V)(E)(HM).Found"),
     _mD_=caml_string_of_jsbytes("[ocamlgraph] succ"),
     _mC_=caml_string_of_jsbytes("[ocamlgraph] fold_succ"),
     _mB_=caml_string_of_jsbytes("[ocamlgraph] iter_succ"),
     _mz_=caml_string_of_jsbytes("[ocamlgraph] remove_edge"),
     _mA_=caml_string_of_jsbytes("[ocamlgraph] remove_edge"),
     _my_=caml_string_of_jsbytes("[ocamlgraph] fold_pred_e"),
     _mx_=caml_string_of_jsbytes("[ocamlgraph] iter_pred_e"),
     _mw_=caml_string_of_jsbytes("[ocamlgraph] in_degree"),
     _mv_=caml_string_of_jsbytes("[ocamlgraph] fold_pred"),
     _mu_=caml_string_of_jsbytes("[ocamlgraph] iter_pred"),
     _mt_=caml_string_of_jsbytes("[ocamlgraph] out_degree"),
     _ms_=[0,caml_string_of_jsbytes("src/blocks.ml"),110,16],
     _mr_=[0,caml_string_of_jsbytes("src/blocks.ml"),103,26],
     _na_=caml_string_of_jsbytes("Jsoo_runtime.Error.Exn"),
     _nc_=caml_string_of_jsbytes("jsError"),
     _nF_=caml_string_of_jsbytes(")"),
     _nG_=caml_string_of_jsbytes("("),
     _nE_=caml_string_of_jsbytes("mn"),
     _nD_=caml_string_of_jsbytes("mi"),
     _nC_=caml_string_of_jsbytes("mo"),
     _nB_=caml_string_of_jsbytes("mrow"),
     _nA_=caml_string_of_jsbytes("math"),
     _ny_=caml_string_of_jsbytes("("),
     _nz_=caml_string_of_jsbytes(")"),
     _nx_=caml_string_of_jsbytes("nbsp"),
     _nw_=caml_string_of_jsbytes("span"),
     _nr_=caml_string_of_jsbytes(" "),
     _nv_=caml_string_of_jsbytes(""),
     _ns_=caml_string_of_jsbytes(" "),
     _nu_=caml_string_of_jsbytes(""),
     _nt_=[0,[2,0,[2,0,[2,0,0]]],caml_string_of_jsbytes("%s%s%s")],
     _nq_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _no_=caml_string_of_jsbytes("; "),
     _nn_=caml_string_of_jsbytes("["),
     _nm_=caml_string_of_jsbytes("]"),
     _nl_=caml_string_of_jsbytes("List.pivoti"),
     _np_=caml_string_of_jsbytes("Engine.Utils.Disposable.Disposed"),
     _nH_=caml_string_of_jsbytes("Engine.Syntax.ParseError"),
     _qA_=caml_string_of_jsbytes("_EQ"),
     _qB_=caml_string_of_jsbytes("_EQ"),
     _qC_=caml_string_of_jsbytes("_EQ"),
     _qG_=caml_string_of_jsbytes("Subst.add [1]"),
     _qF_=caml_string_of_jsbytes("Subst.add [2]"),
     _qH_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),1890,16],
     _qD_=[0,0],
     _qz_=caml_string_of_jsbytes("Wrong arity for new subexpressions"),
     _qy_=caml_string_of_jsbytes("Wrong arity for new subformulas"),
     _qv_=caml_string_of_jsbytes(""),
     _qu_=caml_string_of_jsbytes("?"),
     _qt_=caml_string_of_jsbytes("x"),
     _on_=caml_string_of_jsbytes("()"),
     _oo_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _oq_=
      [0,
       [11,
        caml_string_of_jsbytes("rec "),
        [2,0,[11,caml_string_of_jsbytes(" . "),[2,0,0]]]],
       caml_string_of_jsbytes("rec %s . %s")],
     _op_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),411,25],
     _or_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _os_=caml_string_of_jsbytes(", "),
     _ot_=caml_string_of_jsbytes("true"),
     _ou_=caml_string_of_jsbytes("false"),
     _ov_=caml_string_of_jsbytes("_EQ"),
     _ox_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" = "),[2,0,0]]],
       caml_string_of_jsbytes("%s = %s")],
     _ow_=caml_string_of_jsbytes(", "),
     _oz_=[0,0],
     _oy_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),449,14],
     _oA_=caml_string_of_jsbytes("forall"),
     _oC_=caml_string_of_jsbytes("exists"),
     _oB_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(" : "),
           [2,0,[11,caml_string_of_jsbytes(" . "),[2,0,0]]]]]]],
       caml_string_of_jsbytes("%s %s : %s . %s")],
     _oD_=caml_string_of_jsbytes("()"),
     _oE_=caml_string_of_jsbytes("nat"),
     _oG_=caml_string_of_jsbytes("\xe2\x84\x95"),
     _oF_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _oI_=
      [0,
       [11,
        caml_string_of_jsbytes("rec "),
        [2,0,[11,caml_string_of_jsbytes(" . "),[2,0,0]]]],
       caml_string_of_jsbytes("rec %s . %s")],
     _oH_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),504,25],
     _oY_=caml_string_of_jsbytes("S"),
     _oZ_=caml_string_of_jsbytes("Z"),
     _oX_=caml_string_of_jsbytes("\xe2\x8a\x95"),
     _oJ_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _oK_=caml_string_of_jsbytes("S"),
     _oL_=caml_string_of_jsbytes("Z"),
     _oM_=caml_string_of_jsbytes("add"),
     _oN_=caml_string_of_jsbytes("mult"),
     _oP_=caml_string_of_jsbytes("S"),
     _oQ_=caml_string_of_jsbytes("Z"),
     _oR_=caml_string_of_jsbytes("add"),
     _oS_=caml_string_of_jsbytes("mult"),
     _oU_=caml_string_of_jsbytes("\xe2\x8b\x85"),
     _oV_=caml_string_of_jsbytes("+"),
     _oW_=caml_string_of_jsbytes("0"),
     _oT_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),547,14],
     _oO_=caml_string_of_jsbytes(", "),
     _o0_=caml_string_of_jsbytes("_EQ"),
     _o2_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" = "),[2,0,0]]],
       caml_string_of_jsbytes("%s = %s")],
     _o1_=caml_string_of_jsbytes(", "),
     _o5_=caml_string_of_jsbytes("_EQ"),
     _o4_=[0,0],
     _o3_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),580,14],
     _o6_=
      [0,
       [2,
        0,
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" : "),
          [2,0,[11,caml_string_of_jsbytes(" . "),[2,0,0]]]]]],
       caml_string_of_jsbytes("%s%s : %s . %s")],
     _o7_=caml_string_of_jsbytes("()"),
     _o8_=caml_string_of_jsbytes("nat"),
     _o__=caml_string_of_jsbytes("\xe2\x84\x95"),
     _o9_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _pa_=caml_string_of_jsbytes("."),
     _pb_=caml_string_of_jsbytes("rec"),
     _pc_=caml_string_of_jsbytes("nbsp"),
     _o$_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),635,27],
     _px_=caml_string_of_jsbytes("S"),
     _py_=caml_string_of_jsbytes("Z"),
     _pw_=caml_string_of_jsbytes("\xe2\x8a\x95"),
     _pf_=caml_string_of_jsbytes("id"),
     _pe_=[0,[2,0,[12,58,[2,0,0]]],caml_string_of_jsbytes("%s:%s")],
     _pd_=caml_string_of_jsbytes("/"),
     _pg_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _ph_=caml_string_of_jsbytes("S"),
     _pi_=caml_string_of_jsbytes("Z"),
     _pj_=caml_string_of_jsbytes("add"),
     _pk_=caml_string_of_jsbytes("mult"),
     _po_=caml_string_of_jsbytes("S"),
     _pp_=caml_string_of_jsbytes("Z"),
     _pq_=caml_string_of_jsbytes("add"),
     _pr_=caml_string_of_jsbytes("mult"),
     _pt_=caml_string_of_jsbytes("\xe2\x8b\x85"),
     _pu_=caml_string_of_jsbytes("+"),
     _pv_=caml_string_of_jsbytes("0"),
     _ps_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),704,16],
     _pl_=caml_string_of_jsbytes("nbsp"),
     _pm_=caml_string_of_jsbytes(","),
     _pn_=caml_string_of_jsbytes("nbsp"),
     _pB_=caml_string_of_jsbytes("id"),
     _pA_=[0,[2,0,[12,58,[2,0,0]]],caml_string_of_jsbytes("%s:%s")],
     _pz_=caml_string_of_jsbytes("/"),
     _pC_=caml_string_of_jsbytes("#x22A4"),
     _pD_=caml_string_of_jsbytes("#x22A5"),
     _pE_=caml_string_of_jsbytes("_EQ"),
     _pI_=caml_string_of_jsbytes("nbsp"),
     _pJ_=caml_string_of_jsbytes("="),
     _pK_=caml_string_of_jsbytes("nbsp"),
     _pF_=caml_string_of_jsbytes("nbsp"),
     _pG_=caml_string_of_jsbytes(","),
     _pH_=caml_string_of_jsbytes("nbsp"),
     _pO_=caml_string_of_jsbytes("_EQ"),
     _pP_=caml_string_of_jsbytes("nbsp"),
     _pQ_=caml_string_of_jsbytes("#x2260"),
     _pR_=caml_string_of_jsbytes("nbsp"),
     _pL_=
      [0,
       [11,caml_string_of_jsbytes("#x"),[4,6,0,0,0]],
       caml_string_of_jsbytes("#x%x")],
     _pN_=[0,0],
     _pM_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),761,16],
     _pS_=caml_string_of_jsbytes("."),
     _pT_=caml_string_of_jsbytes(":"),
     _pU_=caml_string_of_jsbytes("nbsp"),
     _pV_=caml_string_of_jsbytes("nat"),
     _pX_=caml_string_of_jsbytes("\xe2\x84\x95"),
     _pW_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _pZ_=caml_string_of_jsbytes("."),
     _pY_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),833,27],
     _p1_=[0,[2,0,[12,58,[2,0,0]]],caml_string_of_jsbytes("%s:%s")],
     _p0_=caml_string_of_jsbytes("/"),
     _qh_=caml_string_of_jsbytes("S"),
     _qi_=caml_string_of_jsbytes("Z"),
     _qg_=caml_string_of_jsbytes("\xe2\x8a\x95"),
     _p3_=
      [0,[2,0,[12,123,[4,0,0,0,[12,125,0]]]],caml_string_of_jsbytes("%s{%d}")],
     _p4_=caml_string_of_jsbytes("S"),
     _p5_=caml_string_of_jsbytes("Z"),
     _p6_=caml_string_of_jsbytes("add"),
     _p7_=caml_string_of_jsbytes("mult"),
     _p9_=caml_string_of_jsbytes("S"),
     _p__=caml_string_of_jsbytes("Z"),
     _p$_=caml_string_of_jsbytes("add"),
     _qa_=caml_string_of_jsbytes("mult"),
     _qc_=caml_string_of_jsbytes("\xc3\x97"),
     _qd_=caml_string_of_jsbytes("+"),
     _qe_=caml_string_of_jsbytes("0"),
     _qf_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),882,20],
     _qb_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),889,16],
     _p8_=caml_string_of_jsbytes(","),
     _p2_=caml_string_of_jsbytes("id"),
     _ql_=caml_string_of_jsbytes("id"),
     _qk_=[0,[2,0,[12,58,[2,0,0]]],caml_string_of_jsbytes("%s:%s")],
     _qj_=caml_string_of_jsbytes("/"),
     _qm_=caml_string_of_jsbytes("_EQ"),
     _qo_=caml_string_of_jsbytes("="),
     _qn_=caml_string_of_jsbytes(","),
     _qq_=caml_string_of_jsbytes("_EQ"),
     _qp_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),950,16],
     _qr_=caml_string_of_jsbytes("."),
     _qs_=caml_string_of_jsbytes(":"),
     _oj_=caml_string_of_jsbytes("<->"),
     _ok_=caml_string_of_jsbytes("~"),
     _ol_=caml_string_of_jsbytes("->"),
     _om_=caml_string_of_jsbytes("||"),
     _oi_=caml_string_of_jsbytes("&&"),
     _od_=caml_string_of_jsbytes("S"),
     _oe_=caml_string_of_jsbytes("Z"),
     _of_=caml_string_of_jsbytes("add"),
     _og_=caml_string_of_jsbytes("mult"),
     _oh_=[0,caml_string_of_jsbytes("libs/engine/fo.ml"),374,16],
     _n5_=caml_string_of_jsbytes("S"),
     _n6_=caml_string_of_jsbytes("Z"),
     _n7_=caml_string_of_jsbytes("add"),
     _n8_=caml_string_of_jsbytes("mult"),
     _nK_=caml_string_of_jsbytes("S"),
     _nJ_=caml_string_of_jsbytes("Expected a formula"),
     _nI_=caml_string_of_jsbytes("Expected an expression"),
     _nL_=[0,0,0],
     _nM_=caml_string_of_jsbytes("nat"),
     _nQ_=caml_string_of_jsbytes("Z"),
     _nU_=caml_string_of_jsbytes("S"),
     _nY_=caml_string_of_jsbytes("add"),
     _n2_=caml_string_of_jsbytes("mult"),
     _n4_=caml_string_of_jsbytes("Engine.Fo.DuplicatedEntry"),
     _qw_=caml_string_of_jsbytes("Engine.Fo.RecheckFailure"),
     _qx_=caml_string_of_jsbytes("Engine.Fo.TypingError"),
     _qE_=caml_string_of_jsbytes("Engine.Fo.Form.Subst.UnboundVariable"),
     _qI_=caml_string_of_jsbytes("Engine.Fo.Form.Invalid_constant"),
     _sg_=[0,caml_string_of_jsbytes("libs/engine/parser.ml"),3268,12],
     _sh_=[0,[1,0]],
     _si_=[0,[1,1]],
     _sj_=[0,[1,2]],
     _sk_=[0,[1,3]],
     _sl_=[0,[1,4]],
     _sm_=[0,[1,5]],
     _sn_=[0,[1,6]],
     _so_=[0,[1,7]],
     _sp_=[0,[1,8]],
     _sq_=[0,[1,9]],
     _sr_=[0,[1,10]],
     _ss_=[0,[1,11]],
     _st_=[0,[1,12]],
     _su_=[0,[1,13]],
     _sv_=[0,[1,14]],
     _sw_=[0,[1,15]],
     _sx_=[0,[1,16]],
     _sy_=[0,[1,17]],
     _sz_=[0,[1,18]],
     _sA_=[0,[1,19]],
     _sB_=[0,[1,20]],
     _sC_=[0,[1,21]],
     _sD_=[0,[1,22]],
     _sE_=[0,[1,23]],
     _sF_=[0,[1,24]],
     _sG_=[0,[1,25]],
     _rN_=[0,caml_string_of_jsbytes("libs/engine/parser.ml"),3210,12],
     _rO_=[0,[0,0]],
     _rP_=[0,[0,1]],
     _rQ_=[0,[0,2]],
     _rR_=[0,[0,3]],
     _rS_=[0,[0,4]],
     _rT_=[0,[0,5]],
     _rU_=[0,[0,6]],
     _rV_=[0,[0,7]],
     _rW_=[0,[0,8]],
     _rX_=[0,[0,9]],
     _rY_=[0,[0,10]],
     _rZ_=[0,[0,11]],
     _r0_=[0,[0,12]],
     _r1_=[0,[0,13]],
     _r2_=[0,[0,14]],
     _r3_=[0,[0,15]],
     _r4_=[0,[0,16]],
     _r5_=[0,[0,17]],
     _r6_=[0,[0,18]],
     _r7_=[0,[0,19]],
     _r8_=[0,[0,20]],
     _r9_=[0,[0,21]],
     _r__=[0,[0,22]],
     _r$_=[0,[0,23]],
     _sa_=[0,[0,24]],
     _sb_=[0,[0,25]],
     _sc_=[0,[0,26]],
     _sd_=[0,[0,27]],
     _se_=[0,[0,28]],
     _sf_=[0,[0,29]],
     _rx_=caml_string_of_jsbytes("_EQ"),
     _qJ_=caml_string_of_jsbytes("Engine.Parser.MenhirBasics.Error"),
     _sP_=
      [0,
       [11,caml_string_of_jsbytes("illegal character: "),[0,0]],
       caml_string_of_jsbytes("illegal character: %c")],
     _sQ_=caml_string_of_jsbytes("Engine.LemmaDB.LemmaNotFound"),
     _u0_=[0,1],
     _u2_=[0,1],
     _u1_=caml_string_of_jsbytes("Cannot handle multiple link actions yet"),
     _uU_=[0,4298439,803493184],
     _uV_=[0,4298439,737453762],
     _uW_=caml_string_of_jsbytes("Fold"),
     _uX_=caml_string_of_jsbytes("Unfold"),
     _uY_=[0,4298439,803493184],
     _uZ_=caml_string_of_jsbytes("Induction"),
     _uT_=caml_string_of_jsbytes("Elim"),
     _uS_=caml_string_of_jsbytes("Hyperlink"),
     _uR_=[0,1],
     _uQ_=[0,1],
     _uP_=[0,4298439,803493184],
     _uO_=[0,4298439,803493184],
     _uN_=caml_string_of_jsbytes("_EQ"),
     _uM_=caml_string_of_jsbytes("_EQ"),
     _uK_=caml_string_of_jsbytes("Expected a formula item"),
     _uL_=[0,481346541,0],
     _uJ_=caml_string_of_jsbytes("_EQ"),
     _uF_=[0,481346541,0],
     _uD_=[0,0,0],
     _uC_=[0,caml_string_of_jsbytes("libs/engine/proof.ml"),2176,19],
     _t9_=[0,1],
     _uu_=caml_string_of_jsbytes("_EQ"),
     _ut_=caml_string_of_jsbytes("_EQ"),
     _uj_=
      caml_string_of_jsbytes
       ("DnD on positive equivalence currently unsupported"),
     _uk_=[0,1,0],
     _ul_=[0,[0,3903731,0,0]],
     _un_=[0,1,0],
     _um_=[0,1,0],
     _up_=[0,1,0],
     _uo_=caml_string_of_jsbytes("empty disjunction"),
     _ui_=[0,1,0],
     _uh_=caml_string_of_jsbytes("empty conjunction"),
     _uq_=[0,1,0],
     _ur_=[0,1,0],
     _us_=[0,caml_string_of_jsbytes("libs/engine/proof.ml"),1918,22],
     _t$_=[0,0,0],
     _t__=[0,0,0],
     _t8_=[0,0,0],
     _ud_=[0,0,0],
     _uc_=caml_string_of_jsbytes("empty conjunction"),
     _ub_=[0,0,0],
     _ua_=caml_string_of_jsbytes("empty disjunction"),
     _ue_=[0,0,0],
     _uf_=[0,caml_string_of_jsbytes("libs/engine/proof.ml"),1985,22],
     _ug_=[0,0,0],
     _uz_=caml_string_of_jsbytes("_EQ"),
     _uw_=[0,[0,3903731,0,0]],
     _ux_=caml_string_of_jsbytes("empty disjunction"),
     _uv_=caml_string_of_jsbytes("empty conjunction"),
     _uy_=[0,caml_string_of_jsbytes("libs/engine/proof.ml"),2112,22],
     _uA_=
      [0,
       [11,caml_string_of_jsbytes("itrace: "),[2,0,0]],
       caml_string_of_jsbytes("itrace: %s")],
     _uB_=[0,0],
     _t5_=caml_string_of_jsbytes("\xe2\x88\x97"),
     _t7_=caml_string_of_jsbytes("\xe2\x8a\xa2"),
     _t6_=
      [0,
       [2,0,[12,32,[2,0,[12,32,[2,0,0]]]]],
       caml_string_of_jsbytes("%s %s %s")],
     _tY_=[0,[12,123,[2,0,[12,125,0]]],caml_string_of_jsbytes("{%s}")],
     _tW_=caml_string_of_jsbytes("\xe2\x86\x90"),
     _t0_=caml_string_of_jsbytes("\xe2\x86\x92"),
     _tX_=caml_string_of_jsbytes(""),
     _tZ_=[0,[2,0,[2,0,0]],caml_string_of_jsbytes("%s%s")],
     _tV_=[0,0],
     _tT_=caml_string_of_jsbytes("Cannot rewrite variable names"),
     _tU_=caml_string_of_jsbytes("Cannot rewrite variable names"),
     _tS_=[0,caml_string_of_jsbytes("libs/engine/proof.ml"),1213,15],
     _tR_=[0,1],
     _tO_=caml_string_of_jsbytes("Cannot modify an abstract definition"),
     _tP_=caml_string_of_jsbytes("Cannot modify an abstract definition"),
     _tN_=[0,caml_string_of_jsbytes("libs/engine/proof.ml"),1170,15],
     _tM_=[0,1],
     _tJ_=[0,4298439,803493184],
     _tK_=[0,4298439,737453762],
     _tH_=
      [0,
       [4,0,0,0,[12,47,[2,0,[17,[2,35],[4,0,0,0,[12,58,[2,0,0]]]]]]],
       caml_string_of_jsbytes("%d/%s@#%d:%s")],
     _tI_=caml_string_of_jsbytes(""),
     _tF_=[0,[12,47,0],caml_string_of_jsbytes("/")],
     _tG_=
      [0,
       [4,0,0,0,[12,47,[2,0,[12,35,[4,0,0,0,[12,58,[15,0]]]]]]],
       caml_string_of_jsbytes("%d/%s#%d:%a")],
     _tA_=[0,4298439,737453762],
     _tB_=[0,4298439,803493184],
     _tw_=[0,-578069685,0],
     _tu_=[0,1,0],
     _tv_=[0,1,0],
     _tq_=caml_string_of_jsbytes("Expected an expression or formula item"),
     _tp_=caml_string_of_jsbytes("Expected a local variable with a body"),
     _to_=caml_string_of_jsbytes("Expected an expression item"),
     _tn_=caml_string_of_jsbytes("Expected a formula item"),
     _th_=caml_string_of_jsbytes("cannot build forward"),
     _td_=caml_string_of_jsbytes("Or-intro-"),
     _s8_=[0,caml_string_of_jsbytes("True-intro"),0],
     _s9_=caml_string_of_jsbytes("_EQ"),
     _s__=[0,caml_string_of_jsbytes("EQ-intro"),0],
     _ta_=[0,caml_string_of_jsbytes("Equiv-intro"),0],
     _tb_=[0,caml_string_of_jsbytes("Not-intro"),0],
     _tc_=[0,caml_string_of_jsbytes("Imp-intro"),0],
     _s$_=[0,caml_string_of_jsbytes("And-intro"),0],
     _te_=[0,caml_string_of_jsbytes("FA-intro"),0],
     _tf_=[0,caml_string_of_jsbytes("Ex-intro"),0],
     _s5_=[0,83,0],
     _s6_=[0,83,0],
     _s3_=[0,[0,0,0],0],
     _s0_=[0,0,0],
     _sZ_=caml_string_of_jsbytes("_EQ"),
     _sU_=[0,caml_string_of_jsbytes("libs/engine/proof.ml"),133,6],
     _sR_=caml_string_of_jsbytes("Engine.Proof.InvalidGoalId"),
     _sS_=caml_string_of_jsbytes("Engine.Proof.InvalidHyphId"),
     _sT_=caml_string_of_jsbytes("Engine.Proof.SubgoalNotOpened"),
     _sV_=caml_string_of_jsbytes("Engine.Proof.TacticNotApplicable"),
     _sW_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TId"),
     _sX_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TDef"),
     _sY_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TIntro"),
     _s1_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.OrDrop"),
     _s2_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.AndDrop"),
     _s4_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TElim"),
     _s7_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TInd"),
     _tg_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TForward"),
     _ti_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TCut"),
     _tj_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TAssume"),
     _tk_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TGeneralize"),
     _tl_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TMove"),
     _tm_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TDuplicate"),
     _tr_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.InvalidPath"),
     _ts_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.InvalidSubFormPath"),
     _tt_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.InvalidSubExprPath"),
     _tC_=
      [0,
       [0,3607583,caml_string_of_jsbytes("H")],
       [0,
        [0,-578069685,caml_string_of_jsbytes("C")],
        [0,
         [0,[0,4298439,803493184],caml_string_of_jsbytes("Vh")],
         [0,[0,[0,4298439,737453762],caml_string_of_jsbytes("Vb")],0]]]],
     _tL_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TRewriteAt"),
     _tQ_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TRewrite"),
     _t1_=[0,caml_string_of_jsbytes("")],
     _t2_=[0,caml_string_of_jsbytes("")],
     _t3_=[0,caml_string_of_jsbytes(" ")],
     _t4_=caml_string_of_jsbytes("Engine.Proof.CoreLogic.TLink"),
     _wu_=caml_string_of_jsbytes(""),
     _wt_=caml_string_of_jsbytes(""),
     _wq_=[0,caml_string_of_jsbytes(" ")],
     _wr_=[0,caml_string_of_jsbytes("")],
     _ws_=[0,caml_string_of_jsbytes(", ")],
     _wv_=
      [0,
       [2,0,[11,caml_string_of_jsbytes("\xe2\x8a\xa2 "),[2,0,0]]],
       caml_string_of_jsbytes("%s\xe2\x8a\xa2 %s")],
     _wp_=caml_string_of_jsbytes(""),
     _wn_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _wm_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _wl_=caml_string_of_jsbytes(""),
     _wj_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _wi_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _wh_=caml_string_of_jsbytes(""),
     _wd_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _wc_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _wb_=caml_string_of_jsbytes(""),
     _we_=
      [0,
       [4,0,0,0,[11,caml_string_of_jsbytes("/C#0"),0]],
       caml_string_of_jsbytes("%d/C#0")],
     _wf_=
      [0,
       [4,0,0,0,[11,caml_string_of_jsbytes("/H#"),[4,0,0,0,0]]],
       caml_string_of_jsbytes("%d/H#%d")],
     _v7_=caml_string_of_jsbytes(""),
     _v$_=caml_string_of_jsbytes(":"),
     _v8_=caml_string_of_jsbytes("b"),
     _v__=caml_string_of_jsbytes("h"),
     _v9_=
      [0,
       [4,
        0,
        0,
        0,
        [11,caml_string_of_jsbytes("/V"),[2,0,[12,35,[4,0,0,0,[2,0,0]]]]]],
       caml_string_of_jsbytes("%d/V%s#%d%s")],
     _v3_=caml_string_of_jsbytes(":="),
     _v4_=caml_string_of_jsbytes(":"),
     _v5_=caml_string_of_jsbytes("id"),
     _v6_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _vZ_=caml_string_of_jsbytes(":="),
     _v0_=caml_string_of_jsbytes(":"),
     _v1_=caml_string_of_jsbytes("id"),
     _v2_=[0,[15,0],caml_string_of_jsbytes("%a")],
     _vX_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" : "),
         [2,0,[11,caml_string_of_jsbytes(" := "),[2,0,0]]]]],
       caml_string_of_jsbytes("%s : %s := %s")],
     _vY_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" : "),[2,0,0]]],
       caml_string_of_jsbytes("%s : %s")],
     _vV_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" := "),[2,0,0]]],
       caml_string_of_jsbytes("%s := %s")],
     _vW_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" : "),[2,0,0]]],
       caml_string_of_jsbytes("%s : %s")],
     _vU_=caml_string_of_jsbytes(""),
     _vS_=caml_string_of_jsbytes(""),
     _vN_=[0,caml_string_of_jsbytes("")],
     _vO_=[0,caml_string_of_jsbytes("")],
     _vP_=[0,caml_string_of_jsbytes(" & ")],
     _vQ_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" : "),
         [2,0,[11,caml_string_of_jsbytes(" -> "),[2,0,0]]]]],
       caml_string_of_jsbytes("%s : %s -> %s")],
     _vK_=caml_string_of_jsbytes(""),
     _vL_=caml_string_of_jsbytes(", "),
     _vG_=[0,caml_string_of_jsbytes("")],
     _vH_=[0,caml_string_of_jsbytes("")],
     _vI_=[0,caml_string_of_jsbytes(", ")],
     _vJ_=caml_string_of_jsbytes(""),
     _vM_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("; "),
         [2,0,[11,caml_string_of_jsbytes(" |- "),[2,0,0]]]]],
       caml_string_of_jsbytes("%s; %s |- %s")],
     _vC_=[0,caml_string_of_jsbytes("")],
     _vD_=[0,caml_string_of_jsbytes("")],
     _vE_=[0,caml_string_of_jsbytes(", ")],
     _vF_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" \xe2\x8a\xa2 "),[2,0,0]]],
       caml_string_of_jsbytes("%s \xe2\x8a\xa2 %s")],
     _vB_=caml_string_of_jsbytes(""),
     _vv_=caml_string_of_jsbytes("object"),
     _vw_=caml_string_of_jsbytes("string"),
     _vx_=caml_string_of_jsbytes("any"),
     _vy_=caml_string_of_jsbytes("click"),
     _vz_=caml_string_of_jsbytes("dnd"),
     _vu_=caml_string_of_jsbytes("object"),
     _vt_=caml_string_of_jsbytes(""),
     _vr_=
      [0,
       [11,caml_string_of_jsbytes("internal error: "),[2,0,0]],
       caml_string_of_jsbytes("internal error: %s")],
     _vk_=[0,caml_string_of_jsbytes("invalid goal (parse error)")],
     _vl_=caml_string_of_jsbytes('" in goal'),
     _vm_=caml_string_of_jsbytes('duplicated entry "'),
     _vn_=caml_string_of_jsbytes('" does not exist'),
     _vo_=caml_string_of_jsbytes('lemma "'),
     _vq_=[0,caml_string_of_jsbytes("tactic not applicable")],
     _vp_=[0,caml_string_of_jsbytes("invalid goal (type error)")],
     _vi_=caml_string_of_jsbytes("string"),
     _vh_=caml_string_of_jsbytes("Found"),
     _u3_=
      [0,
       caml_string_of_jsbytes("type_"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("proof"),
       caml_string_of_jsbytes("prefix"),
       caml_string_of_jsbytes("position"),
       caml_string_of_jsbytes("parent"),
       caml_string_of_jsbytes("name"),
       caml_string_of_jsbytes("mathml"),
       caml_string_of_jsbytes("idhead"),
       caml_string_of_jsbytes("idbody"),
       caml_string_of_jsbytes("html"),
       caml_string_of_jsbytes("handle"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("body")],
     _u4_=
      [0,
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("prefix"),
       caml_string_of_jsbytes("mathmltag"),
       caml_string_of_jsbytes("mathml"),
       caml_string_of_jsbytes("htmltag"),
       caml_string_of_jsbytes("html")],
     _u5_=
      [0,
       caml_string_of_jsbytes("tvars"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("pvars"),
       caml_string_of_jsbytes("parent"),
       caml_string_of_jsbytes("move_hyp"),
       caml_string_of_jsbytes("ivariants"),
       caml_string_of_jsbytes("intro"),
       caml_string_of_jsbytes("handle"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("generalize"),
       caml_string_of_jsbytes("fvars"),
       caml_string_of_jsbytes("elim"),
       caml_string_of_jsbytes("cut"),
       caml_string_of_jsbytes("context"),
       caml_string_of_jsbytes("conclusion"),
       caml_string_of_jsbytes("addlocal"),
       caml_string_of_jsbytes("addlemma"),
       caml_string_of_jsbytes("addalias")],
     _u6_=
      [0,
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("rawstring"),
       caml_string_of_jsbytes("rawmathml"),
       caml_string_of_jsbytes("rawhtml"),
       caml_string_of_jsbytes("mathml"),
       caml_string_of_jsbytes("html")],
     _u8_=
      [0,
       caml_string_of_jsbytes("subgoals"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("proof"),
       caml_string_of_jsbytes("pactions"),
       caml_string_of_jsbytes("loaddb"),
       caml_string_of_jsbytes("handle"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("getdb"),
       caml_string_of_jsbytes("closed"),
       caml_string_of_jsbytes("apply"),
       caml_string_of_jsbytes("actions")],
     _u9_=
      [0,
       caml_string_of_jsbytes("proof"),
       caml_string_of_jsbytes("loaddb"),
       caml_string_of_jsbytes("actions"),
       caml_string_of_jsbytes("pactions"),
       caml_string_of_jsbytes("subgoals"),
       caml_string_of_jsbytes("closed"),
       caml_string_of_jsbytes("getdb"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("apply"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("handle")],
     _u__=
      [0,
       caml_string_of_jsbytes("html"),
       caml_string_of_jsbytes("htmltag"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("mathmltag"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("prefix"),
       caml_string_of_jsbytes("mathml")],
     _u$_=
      [0,
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("proof"),
       caml_string_of_jsbytes("position"),
       caml_string_of_jsbytes("phandle"),
       caml_string_of_jsbytes("parent"),
       caml_string_of_jsbytes("mathml"),
       caml_string_of_jsbytes("html"),
       caml_string_of_jsbytes("handle"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("fresh"),
       caml_string_of_jsbytes("form")],
     _va_=
      [0,
       caml_string_of_jsbytes("body"),
       caml_string_of_jsbytes("html"),
       caml_string_of_jsbytes("proof"),
       caml_string_of_jsbytes("name"),
       caml_string_of_jsbytes("position"),
       caml_string_of_jsbytes("idbody"),
       caml_string_of_jsbytes("idhead"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("parent"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("type_"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("prefix"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("handle"),
       caml_string_of_jsbytes("mathml")],
     _vb_=
      [0,
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("mathmltag"),
       caml_string_of_jsbytes("mathml"),
       caml_string_of_jsbytes("htmltag"),
       caml_string_of_jsbytes("html")],
     _vc_=
      [0,
       caml_string_of_jsbytes("html"),
       caml_string_of_jsbytes("htmltag"),
       caml_string_of_jsbytes("mathmltag"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("mathml")],
     _vd_=
      [0,
       caml_string_of_jsbytes("elim"),
       caml_string_of_jsbytes("generalize"),
       caml_string_of_jsbytes("pvars"),
       caml_string_of_jsbytes("conclusion"),
       caml_string_of_jsbytes("addlemma"),
       caml_string_of_jsbytes("addlocal"),
       caml_string_of_jsbytes("toascii"),
       caml_string_of_jsbytes("parent"),
       caml_string_of_jsbytes("ivariants"),
       caml_string_of_jsbytes("move_hyp"),
       caml_string_of_jsbytes("cut"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("addalias"),
       caml_string_of_jsbytes("fvars"),
       caml_string_of_jsbytes("tvars"),
       caml_string_of_jsbytes("context"),
       caml_string_of_jsbytes("setmeta"),
       caml_string_of_jsbytes("getmeta"),
       caml_string_of_jsbytes("handle"),
       caml_string_of_jsbytes("intro")],
     _ve_=
      [0,
       caml_string_of_jsbytes("html"),
       caml_string_of_jsbytes("rawstring"),
       caml_string_of_jsbytes("tostring"),
       caml_string_of_jsbytes("rawhtml"),
       caml_string_of_jsbytes("rawmathml"),
       caml_string_of_jsbytes("mathml")],
     _vf_=caml_string_of_jsbytes("Engine.Jsapi.InvalidASource"),
     _vg_=caml_string_of_jsbytes("Engine.Jsapi.InvalidLemmaDB"),
     _ww_=caml_string_of_jsbytes("engine");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function make(v){return [0,v]}
    function get(r){return r[1]}
    function compare_and_set(r,seen,v)
     {var cur=r[1];return cur === seen?(r[1] = v,1):0}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,_a_,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var
     max_num=2147483647,
     min_num=-2147483648,
     infinity=caml_int64_float_of_bits(_b_),
     neg_infinity=caml_int64_float_of_bits(_c_);
    function cat(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       _bol_=l1 + l2 | 0,
       s=caml_create_bytes(_bol_);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(_d_)}
    function string_of_bool(b){return b?_e_:_f_}
    function to_string(n){return caml_string_of_jsbytes("" + n)}
    function valid_float_lexem(s)
     {var l=caml_ml_string_length(s);
      function loop(i)
       {var i$0=i;
        for(;;)
         {if(l <= i$0)return cat(s,_g_);
          var match=caml_string_get(s,i$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
          return s}}
      return loop(0)}
    function to_string$0(f)
     {return valid_float_lexem(caml_format_float(_h_,f))}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_bok_)
             {_bok_ = caml_wrap_exception(_bok_);
              if(_bok_[1] !== Sys_error)throw _bok_;
              var _boj_=_bok_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {var _boi_=caml_ml_string_length(s);return caml_ml_output(oc,s,0,_boi_)}
    function output(oc,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_output_bytes(oc,s,ofs,len);
      return invalid_arg(_i_)}
    function output_substring(oc,s,ofs,len)
     {if
       (0
        <=
        ofs
        &&
        0
        <=
        len
        &&
        !
        ((caml_ml_string_length(s) - len | 0) < ofs))
       return caml_ml_output(oc,s,ofs,len);
      return invalid_arg(_j_)}
    function close_out(oc){caml_ml_flush(oc);return caml_ml_close_channel(oc)}
    function input(ic,s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       return caml_ml_input(ic,s,ofs,len);
      return invalid_arg(_k_)}
    function prerr_char(c){return caml_ml_output_char(stderr,c)}
    function prerr_string(s){return output_string(stderr,s)}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    function unsafe_to_string(param){var str=param[2];return str}
    var exit_function=make(flush_all);
    function at_exit(f)
     {for(;;)
       {var
         _bod_=1,
         f_yet_to_run=make(_bod_),
         old_exit=get(exit_function),
         new_exit$0=
          function(f_yet_to_run,old_exit)
           {function new_exit(param)
             {var _bof_=0,_bog_=1;
              if(compare_and_set(f_yet_to_run,_bog_,_bof_))
               {var _boh_=0;caml_call1(f,_boh_)}
              return caml_call1(old_exit,0)}
            return new_exit},
         new_exit=new_exit$0(f_yet_to_run,old_exit),
         success=compare_and_set(exit_function,old_exit,new_exit),
         _boe_=1 - success;
        if(_boe_)continue;
        return _boe_}}
    function do_at_exit(param)
     {var _boc_=0;return caml_call1(get(exit_function),_boc_)}
    function exit(retcode)
     {var _bob_=0;do_at_exit(_bob_);return caml_sys_exit(retcode)}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    function close_in(_boa_){return caml_ml_close_channel(_boa_)}
    function input_char(_bn$_){return caml_ml_input_char(_bn$_)}
    function output_char(_bn__,_bn9_){return caml_ml_output_char(_bn__,_bn9_)}
    function flush(_bn8_){return caml_ml_flush(_bn8_)}
    var
     match=caml_sys_get_config(0),
     os_type$0=match[1],
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0,
     match$0=32;
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    var
     max_ephe_length=max_array_length - 2 | 0,
     Undefined=[248,_l_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var _bn3_=0,closure=blk[1 + _bn3_],_bn4_=0;
      blk[1 + _bn4_] = raise_undefined;
      try
       {var _bn7_=0,result=caml_call1(closure,_bn7_);
        caml_obj_make_forward(blk,result);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);
        var _bn5_=function(param){throw e},_bn6_=0;
        blk[1 + _bn6_] = _bn5_;
        throw e}}
    function map(f,seq,param)
     {var _bn0_=0,match=caml_call1(seq,_bn0_);
      if(match)
       {var
         next=match[2],
         x=match[1],
         _bn1_=function(_bn2_){return map(f,next,_bn2_)};
        return [0,caml_call1(f,x),_bn1_]}
      return 0}
    function fold_left(f,acc,seq)
     {var acc$0=acc,seq$0=seq;
      for(;;)
       {var _bnZ_=0,match=caml_call1(seq$0,_bnZ_);
        if(match)
         {var
           next=match[2],
           x=match[1],
           acc$1=caml_call2(f,acc$0,x),
           acc$0=acc$1,
           seq$0=next;
          continue}
        return acc$0}}
    function iter(f,seq)
     {var seq$0=seq;
      for(;;)
       {var _bnY_=0,match=caml_call1(seq$0,_bnY_);
        if(match)
         {var next=match[2],x=match[1];
          caml_call1(f,x);
          var seq$0=next;
          continue}
        return 0}}
    function chr(n){if(0 <= n && ! (255 < n))return n;return invalid_arg(_m_)}
    function escaped(c)
     {var switch$0=0;
      if(40 <= c)
       {if(92 === c)return _n_;if(! (127 <= c))switch$0 = 1}
      else
       if(32 <= c)
        {if(39 <= c)return _o_;switch$0 = 1}
       else
        if(! (14 <= c))
         switch(c)
          {case 8:return _p_;
           case 9:return _q_;
           case 10:return _r_;
           case 13:return _s_
           }
      if(switch$0)
       {var s$0=caml_create_bytes(1);
        caml_bytes_unsafe_set(s$0,0,c);
        return caml_string_of_bytes(s$0)}
      var s=caml_create_bytes(4);
      caml_bytes_unsafe_set(s,0,92);
      caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
      caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
      caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
      return caml_string_of_bytes(s)}
    function lowercase(c)
     {var _bnX_=c - 192 | 0,switch$0=0;
      if(30 < _bnX_ >>> 0)
       {if(! (25 < _bnX_ + 127 >>> 0))switch$0 = 1}
      else
       if(23 !== _bnX_)switch$0 = 1;
      return switch$0?c + 32 | 0:c}
    function uppercase_ascii(c){return 25 < c - 97 >>> 0?c:c - 32 | 0}
    function compare(c1,c2){return c1 - c2 | 0}
    function length_aux(len,param)
     {var len$0=len,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           len$1=len$0 + 1 | 0,
           len$0=len$1,
           param$0=param$1;
          continue}
        return len$0}}
    function length(l){return length_aux(0,l)}
    function hd(param){if(param){var a=param[1];return a}return failwith(_t_)}
    function tl(param){if(param){var l=param[2];return l}return failwith(_u_)}
    function nth_opt(l,n)
     {if(0 <= n)
       {var
         nth_aux=
          function(l,n)
           {var l$0=l,n$0=n;
            for(;;)
             {if(l$0)
               {var l$1=l$0[2],a=l$0[1];
                if(0 === n$0)return [0,a];
                var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
                continue}
              return 0}};
        return nth_aux(l,n)}
      return invalid_arg(_v_)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map$0(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$0(f,l)]}
      return 0}
    function rev_map(f,l)
     {function rmap_f(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             l=param$0[2],
             a=param$0[1],
             accu$1=[0,caml_call1(f,a),accu$0],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      return rmap_f(0,l)}
    function iter$0(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function fold(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function for_all(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_bnW_=caml_call1(p,a);
          if(_bnW_){var param$0=l;continue}
          return _bnW_}
        return 1}}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_bnV_=caml_call1(p,a);
          if(_bnV_)return _bnV_;
          var param$0=l;
          continue}
        return 0}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_bnU_=0 === caml_compare(a,x)?1:0;
          if(_bnU_)return _bnU_;
          var param$0=l;
          continue}
        return 0}}
    function memq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_bnT_=a === x?1:0;
          if(_bnT_)return _bnT_;
          var param$0=l;
          continue}
        return 0}}
    function assoc(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function assoc_opt(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(0 === caml_compare(a,x))return [0,b];
          var param$0=l;
          continue}
        return 0}}
    function assq(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
          if(a === x)return b;
          var param$0=l;
          continue}
        throw Not_found}}
    function remove_assq(x,param)
     {if(param)
       {var l=param[2],pair=param[1],a=pair[1];
        return a === x?l:[0,pair,remove_assq(x,l)]}
      return 0}
    function find_all(p)
     {function find(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],x=param$0[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param$0=l;continue}
            var param$0=l;
            continue}
          return rev(accu$0)}}
      var _bnR_=0;
      return function(_bnS_){return find(_bnR_,_bnS_)}}
    function concat_map(f,l)
     {function aux(f,acc,param)
       {var acc$0=acc,param$0=param;
        for(;;)
         {if(param$0)
           {var
             l=param$0[2],
             x=param$0[1],
             xs=caml_call1(f,x),
             acc$1=rev_append(xs,acc$0),
             acc$0=acc$1,
             param$0=l;
            continue}
          return rev(acc$0)}}
      return aux(f,0,l)}
    function sort_uniq(cmp,l)
     {function rev_merge(l1,l2,accu)
       {var l1$0=l1,l2$0=l2,accu$0=accu;
        for(;;)
         {if(l1$0)
           {if(l2$0)
             {var
               t2=l2$0[2],
               h2=l2$0[1],
               t1=l1$0[2],
               h1=l1$0[1],
               c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$1=[0,h1,accu$0],l1$0=t1,l2$0=t2,accu$0=accu$1;
                continue}
              if(0 <= c)
               {var accu$2=[0,h2,accu$0],l2$0=t2,accu$0=accu$2;continue}
              var accu$3=[0,h1,accu$0],l1$0=t1,accu$0=accu$3;
              continue}
            return rev_append(l1$0,accu$0)}
          return rev_append(l2$0,accu$0)}}
      function rev_merge_rev(l1,l2,accu)
       {var l1$0=l1,l2$0=l2,accu$0=accu;
        for(;;)
         {if(l1$0)
           {if(l2$0)
             {var
               t2=l2$0[2],
               h2=l2$0[1],
               t1=l1$0[2],
               h1=l1$0[1],
               c=caml_call2(cmp,h1,h2);
              if(0 === c)
               {var accu$1=[0,h1,accu$0],l1$0=t1,l2$0=t2,accu$0=accu$1;
                continue}
              if(0 < c)
               {var accu$2=[0,h1,accu$0],l1$0=t1,accu$0=accu$2;continue}
              var accu$3=[0,h2,accu$0],l2$0=t2,accu$0=accu$3;
              continue}
            return rev_append(l1$0,accu$0)}
          return rev_append(l2$0,accu$0)}}
      function rev_sort(n,l)
       {if(2 === n)
         {if(l)
           {var _bnI_=l[2];
            if(_bnI_)
             {var
               tl=_bnI_[2],
               x2=_bnI_[1],
               x1=l[1],
               c=caml_call2(cmp,x1,x2),
               s=0 === c?[0,x1,0]:0 < c?[0,x1,[0,x2,0]]:[0,x2,[0,x1,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _bnK_=l[2];
           if(_bnK_)
            {var _bnL_=_bnK_[2];
             if(_bnL_)
              {var
                tl$1=_bnL_[2],
                x3=_bnL_[1],
                x2$0=_bnK_[1],
                x1$0=l[1],
                c$0=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$0)
                var
                 c$1=caml_call2(cmp,x2$0,x3),
                 _bnM_=
                  0 === c$1
                   ?[0,x2$0,0]
                   :0 < c$1?[0,x2$0,[0,x3,0]]:[0,x3,[0,x2$0,0]],
                 s$0=_bnM_;
               else
                if(0 < c$0)
                 {var c$2=caml_call2(cmp,x2$0,x3);
                  if(0 === c$2)
                   var _bnN_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 < c$2)
                    var _bnN_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                   else
                    var
                     c$3=caml_call2(cmp,x1$0,x3),
                     _bnO_=
                      0 === c$3
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 < c$3
                         ?[0,x1$0,[0,x3,[0,x2$0,0]]]
                         :[0,x3,[0,x1$0,[0,x2$0,0]]],
                     _bnN_=_bnO_;
                  var s$0=_bnN_}
                else
                 {var c$4=caml_call2(cmp,x1$0,x3);
                  if(0 === c$4)
                   var _bnP_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 < c$4)
                    var _bnP_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                   else
                    var
                     c$5=caml_call2(cmp,x2$0,x3),
                     _bnQ_=
                      0 === c$5
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 < c$5
                         ?[0,x2$0,[0,x3,[0,x1$0,0]]]
                         :[0,x3,[0,x2$0,[0,x1$0,0]]],
                     _bnP_=_bnQ_;
                  var s$0=_bnP_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=sort(n1,l),
         l2=match[2],
         s1=match[1],
         match$0=sort(n2,l2),
         tl$0=match$0[2],
         s2=match$0[1],
         _bnJ_=0;
        return [0,rev_merge(s1,s2,_bnJ_),tl$0]}
      function sort(n,l)
       {if(2 === n)
         {if(l)
           {var _bnz_=l[2];
            if(_bnz_)
             {var
               tl=_bnz_[2],
               x2=_bnz_[1],
               x1=l[1],
               c=caml_call2(cmp,x1,x2),
               s=0 === c?[0,x1,0]:0 <= c?[0,x2,[0,x1,0]]:[0,x1,[0,x2,0]];
              return [0,s,tl]}}}
        else
         if(3 === n && l)
          {var _bnB_=l[2];
           if(_bnB_)
            {var _bnC_=_bnB_[2];
             if(_bnC_)
              {var
                tl$1=_bnC_[2],
                x3=_bnC_[1],
                x2$0=_bnB_[1],
                x1$0=l[1],
                c$0=caml_call2(cmp,x1$0,x2$0);
               if(0 === c$0)
                var
                 c$1=caml_call2(cmp,x2$0,x3),
                 _bnD_=
                  0 === c$1
                   ?[0,x2$0,0]
                   :0 <= c$1?[0,x3,[0,x2$0,0]]:[0,x2$0,[0,x3,0]],
                 s$0=_bnD_;
               else
                if(0 <= c$0)
                 {var c$2=caml_call2(cmp,x1$0,x3);
                  if(0 === c$2)
                   var _bnE_=[0,x2$0,[0,x1$0,0]];
                  else
                   if(0 <= c$2)
                    var
                     c$3=caml_call2(cmp,x2$0,x3),
                     _bnF_=
                      0 === c$3
                       ?[0,x2$0,[0,x1$0,0]]
                       :0 <= c$3
                         ?[0,x3,[0,x2$0,[0,x1$0,0]]]
                         :[0,x2$0,[0,x3,[0,x1$0,0]]],
                     _bnE_=_bnF_;
                   else
                    var _bnE_=[0,x2$0,[0,x1$0,[0,x3,0]]];
                  var s$0=_bnE_}
                else
                 {var c$4=caml_call2(cmp,x2$0,x3);
                  if(0 === c$4)
                   var _bnG_=[0,x1$0,[0,x2$0,0]];
                  else
                   if(0 <= c$4)
                    var
                     c$5=caml_call2(cmp,x1$0,x3),
                     _bnH_=
                      0 === c$5
                       ?[0,x1$0,[0,x2$0,0]]
                       :0 <= c$5
                         ?[0,x3,[0,x1$0,[0,x2$0,0]]]
                         :[0,x1$0,[0,x3,[0,x2$0,0]]],
                     _bnG_=_bnH_;
                   else
                    var _bnG_=[0,x1$0,[0,x2$0,[0,x3,0]]];
                  var s$0=_bnG_}
               return [0,s$0,tl$1]}}}
        var
         n1=n >> 1,
         n2=n - n1 | 0,
         match=rev_sort(n1,l),
         l2=match[2],
         s1=match[1],
         match$0=rev_sort(n2,l2),
         tl$0=match$0[2],
         s2=match$0[1],
         _bnA_=0;
        return [0,rev_merge_rev(s1,s2,_bnA_),tl$0]}
      var len=length(l);
      return 2 <= len?sort(len,l)[1]:l}
    function min$0(x,y){return x <= y?x:y}
    function max$0(x,y){return y <= x?x:y}
    function to_string$1(x){return caml_string_of_jsbytes("" + x)}
    function make$0(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function of_bytes(b){return caml_string_of_bytes(copy(b))}
    function to_bytes(s){return copy(caml_bytes_of_string(s))}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(_w_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_x_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_y_)}
    function escaped$0(s)
     {var n=[0,0],_bnr_=caml_ml_bytes_length(s) - 1 | 0,_bnq_=0;
      if(! (_bnr_ < 0))
       {var i$0=_bnq_;
        for(;;)
         {var match=caml_bytes_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _bnw_=match - 34 | 0,switch$1=0;
            if(58 < _bnw_ >>> 0)
             {if(93 <= _bnw_)switch$1 = 1}
            else
             if(56 < _bnw_ - 1 >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _bnx_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _bnx_=4;break;case 1:var _bnx_=2;break}
          n[1] = n[1] + _bnx_ | 0;
          var _bny_=i$0 + 1 | 0;
          if(_bnr_ !== i$0){var i$0=_bny_;continue}
          break}}
      if(n[1] === caml_ml_bytes_length(s))return copy(s);
      var _bns_=n[1],s$0=caml_create_bytes(_bns_);
      n[1] = 0;
      var _bnu_=caml_ml_bytes_length(s) - 1 | 0,_bnt_=0;
      if(! (_bnu_ < 0))
       {var i=_bnt_;
        for(;;)
         {var c=caml_bytes_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c / 100 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],48 + (c % 10 | 0) | 0);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _bnv_=i + 1 | 0;
          if(_bnu_ !== i){var i=_bnv_;continue}
          break}}
      return s$0}
    function map$1(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_bnn_=l - 1 | 0,_bnm_=0;
      if(! (_bnn_ < 0))
       {var i=_bnm_;
        for(;;)
         {var _bno_=caml_bytes_unsafe_get(s,i);
          caml_bytes_unsafe_set(r,i,caml_call1(f,_bno_));
          var _bnp_=i + 1 | 0;
          if(_bnn_ !== i){var i=_bnp_;continue}
          break}}
      return r}
    function uppercase_ascii$0(s){return map$1(uppercase_ascii,s)}
    function ubos(_bnl_){return caml_bytes_of_string(_bnl_)}
    function usob(_bnk_){return caml_string_of_bytes(_bnk_)}
    function make$1(n,c){return usob(make$0(n,c))}
    function sub$0(s,ofs,len)
     {var _bnj_=ubos(s);return usob(sub(_bnj_,ofs,len))}
    function ensure_ge(x,y){return y <= x?x:invalid_arg(_z_)}
    function sum_lengths(acc,seplen,param)
     {var acc$0=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var _bnh_=param$0[1];
          if(param$0[2])
           {var
             tl=param$0[2],
             _bni_=(caml_ml_string_length(_bnh_) + seplen | 0) + acc$0 | 0,
             acc$1=ensure_ge(_bni_,acc$0),
             acc$0=acc$1,
             param$0=tl;
            continue}
          return caml_ml_string_length(_bnh_) + acc$0 | 0}
        return acc$0}}
    function unsafe_blits(dst,pos,sep,seplen,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       {if(param$0)
         {var _bnd_=param$0[1];
          if(param$0[2])
           {var tl=param$0[2],_bne_=caml_ml_string_length(_bnd_);
            caml_blit_string(_bnd_,0,dst,pos$0,_bne_);
            var _bnf_=pos$0 + caml_ml_string_length(_bnd_) | 0;
            caml_blit_string(sep,0,dst,_bnf_,seplen);
            var
             pos$1=(pos$0 + caml_ml_string_length(_bnd_) | 0) + seplen | 0,
             pos$0=pos$1,
             param$0=tl;
            continue}
          var _bng_=caml_ml_string_length(_bnd_);
          caml_blit_string(_bnd_,0,dst,pos$0,_bng_);
          return dst}
        return dst}}
    function join(sep,l)
     {if(l)
       {var
         seplen=caml_ml_string_length(sep),
         _bm$_=0,
         _bna_=0,
         _bnb_=sum_lengths(_bna_,seplen,l),
         _bnc_=caml_create_bytes(_bnb_);
        return usob(unsafe_blits(_bnc_,_bm$_,sep,seplen,l))}
      return _A_}
    function iter$1(f,s)
     {var _bm8_=caml_ml_string_length(s) - 1 | 0,_bm7_=0;
      if(! (_bm8_ < 0))
       {var i=_bm7_;
        for(;;)
         {var _bm9_=caml_string_unsafe_get(s,i);
          caml_call1(f,_bm9_);
          var _bm__=i + 1 | 0;
          if(_bm8_ !== i){var i=_bm__;continue}
          break}}
      return 0}
    function escaped$1(s)
     {function escape_if_needed(s,n,i)
       {var i$0=i;
        for(;;)
         {if(n <= i$0)return s;
          var
           match=caml_string_unsafe_get(s,i$0),
           _bm5_=match - 32 | 0,
           switch$0=0;
          if(59 < _bm5_ >>> 0)
           {if(33 < _bm5_ - 61 >>> 0)switch$0 = 1}
          else
           if(2 === _bm5_)switch$0 = 1;
          if(switch$0){var _bm6_=ubos(s);return usob(escaped$0(_bm6_))}
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      return escape_if_needed(s,caml_ml_string_length(s),0)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec(s,l,i,c);
      return invalid_arg(_B_)}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _bm3_=1;return _bm3_}
       catch(_bm4_)
        {_bm4_ = caml_wrap_exception(_bm4_);
         if(_bm4_ === Not_found)return 0;
         throw _bm4_}
      return invalid_arg(_C_)}
    function contains(s,c){return contains_from(s,0,c)}
    function uppercase_ascii$1(s)
     {var _bm2_=ubos(s);return usob(uppercase_ascii$0(_bm2_))}
    function compare$0(x,y){return caml_string_compare(x,y)}
    function init(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var
         _bmW_=0,
         _bmX_=caml_call1(f,_bmW_),
         res=caml_make_vect(l,_bmX_),
         _bmZ_=l - 1 | 0,
         _bmY_=1;
        if(! (_bmZ_ < 1))
         {var i=_bmY_;
          for(;;)
           {var _bm0_=caml_call1(f,i);
            res[1 + i] = _bm0_;
            var _bm1_=i + 1 | 0;
            if(_bmZ_ !== i){var i=_bm1_;continue}
            break}}
        return res}
      return invalid_arg(_D_)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return caml_array_sub(a,ofs,len);
      return invalid_arg(_E_)}
    function fill(a,ofs,len,v)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return caml_array_fill(a,ofs,len,v);
      return invalid_arg(_F_)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((a1.length - 1 - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((a2.length - 1 - len | 0) < ofs2))
       return caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(_G_)}
    function iter$2(f,a)
     {var _bmT_=a.length - 1 - 1 | 0,_bmS_=0;
      if(! (_bmT_ < 0))
       {var i=_bmS_;
        for(;;)
         {var _bmU_=a[1 + i];
          caml_call1(f,_bmU_);
          var _bmV_=i + 1 | 0;
          if(_bmT_ !== i){var i=_bmV_;continue}
          break}}
      return 0}
    function map$2(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var
       _bmK_=0,
       _bmL_=a[1 + _bmK_],
       _bmM_=caml_call1(f,_bmL_),
       r=caml_make_vect(l,_bmM_),
       _bmO_=l - 1 | 0,
       _bmN_=1;
      if(! (_bmO_ < 1))
       {var i=_bmN_;
        for(;;)
         {var _bmP_=a[1 + i],_bmQ_=caml_call1(f,_bmP_);
          r[1 + i] = _bmQ_;
          var _bmR_=i + 1 | 0;
          if(_bmO_ !== i){var i=_bmR_;continue}
          break}}
      return r}
    function iteri(f,a)
     {var _bmH_=a.length - 1 - 1 | 0,_bmG_=0;
      if(! (_bmH_ < 0))
       {var i=_bmG_;
        for(;;)
         {var _bmI_=a[1 + i];
          caml_call2(f,i,_bmI_);
          var _bmJ_=i + 1 | 0;
          if(_bmH_ !== i){var i=_bmJ_;continue}
          break}}
      return 0}
    function to_list(a)
     {function tolist(i,res)
       {var i$0=i,res$0=res;
        for(;;)
         {if(0 <= i$0)
           {var
             res$1=[0,a[1 + i$0],res$0],
             i$1=i$0 - 1 | 0,
             i$0=i$1,
             res$0=res$1;
            continue}
          return res$0}}
      return tolist(a.length - 1 - 1 | 0,0)}
    function list_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[2],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function of_list(l)
     {if(l)
       {var
         tl=l[2],
         hd=l[1],
         _bmE_=0,
         _bmF_=list_length(_bmE_,l),
         a=caml_make_vect(_bmF_,hd),
         fill=
          function(i,param)
           {var i$0=i,param$0=param;
            for(;;)
             {if(param$0)
               {var tl=param$0[2],hd=param$0[1];
                a[1 + i$0] = hd;
                var i$1=i$0 + 1 | 0,i$0=i$1,param$0=tl;
                continue}
              return a}};
        return fill(1,tl)}
      return [0]}
    function fold_left$0(f,x,a)
     {var r=[0,x],_bmA_=a.length - 1 - 1 | 0,_bmz_=0;
      if(! (_bmA_ < 0))
       {var i=_bmz_;
        for(;;)
         {var _bmB_=a[1 + i],_bmC_=r[1];
          r[1] = caml_call2(f,_bmC_,_bmB_);
          var _bmD_=i + 1 | 0;
          if(_bmA_ !== i){var i=_bmD_;continue}
          break}}
      return r[1]}
    function fold_right$0(f,a,x)
     {var r=[0,x],_bmv_=a.length - 1 - 1 | 0;
      if(! (_bmv_ < 0))
       {var i=_bmv_;
        for(;;)
         {var _bmw_=r[1],_bmx_=a[1 + i];
          r[1] = caml_call2(f,_bmx_,_bmw_);
          var _bmy_=i - 1 | 0;
          if(0 !== i){var i=_bmy_;continue}
          break}}
      return r[1]}
    var Bottom=[248,_H_,caml_fresh_oo_id(0)];
    function sort(cmp,a)
     {function maxson(l,i)
       {var i31=((i + i | 0) + i | 0) + 1 | 0,x=[0,i31];
        if((i31 + 2 | 0) < l)
         {var
           _bml_=i31 + 1 | 0,
           _bmm_=caml_check_bound(a,_bml_)[1 + _bml_],
           _bmn_=caml_check_bound(a,i31)[1 + i31];
          if(caml_call2(cmp,_bmn_,_bmm_) < 0)x[1] = i31 + 1 | 0;
          var
           _bmo_=i31 + 2 | 0,
           _bmp_=caml_check_bound(a,_bmo_)[1 + _bmo_],
           _bmq_=x[1],
           _bmr_=caml_check_bound(a,_bmq_)[1 + _bmq_];
          if(caml_call2(cmp,_bmr_,_bmp_) < 0)x[1] = i31 + 2 | 0;
          return x[1]}
        if((i31 + 1 | 0) < l)
         {var
           _bms_=i31 + 1 | 0,
           _bmt_=caml_check_bound(a,_bms_)[1 + _bms_],
           _bmu_=caml_check_bound(a,i31)[1 + i31];
          if(! (0 <= caml_call2(cmp,_bmu_,_bmt_)))return i31 + 1 | 0}
        if(i31 < l)return i31;
        throw [0,Bottom,i]}
      function trickledown(l,i,e)
       {var i$0=i;
        for(;;)
         {var j=maxson(l,i$0),_bmj_=caml_check_bound(a,j)[1 + j];
          if(0 < caml_call2(cmp,_bmj_,e))
           {var _bmk_=caml_check_bound(a,j)[1 + j];
            caml_check_bound(a,i$0)[1 + i$0] = _bmk_;
            var i$0=j;
            continue}
          caml_check_bound(a,i$0)[1 + i$0] = e;
          return 0}}
      function trickle(l,i,e)
       {try
         {var _bmi_=trickledown(l,i,e);return _bmi_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom)
           {var i$0=exn[2];caml_check_bound(a,i$0)[1 + i$0] = e;return 0}
          throw exn}}
      function bubbledown(l,i)
       {var i$0=i;
        for(;;)
         {var i$1=maxson(l,i$0),_bmh_=caml_check_bound(a,i$1)[1 + i$1];
          caml_check_bound(a,i$0)[1 + i$0] = _bmh_;
          var i$0=i$1;
          continue}}
      function bubble(l,i)
       {try
         {var _bmg_=bubbledown(l,i);return _bmg_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Bottom){var i$0=exn[2];return i$0}
          throw exn}}
      function trickleup(i,e)
       {var i$0=i;
        for(;;)
         {var father=(i$0 - 1 | 0) / 3 | 0;
          if(i$0 !== father)
           {var _bmd_=caml_check_bound(a,father)[1 + father];
            if(0 <= caml_call2(cmp,_bmd_,e))
             {caml_check_bound(a,i$0)[1 + i$0] = e;return 0}
            var _bme_=caml_check_bound(a,father)[1 + father];
            caml_check_bound(a,i$0)[1 + i$0] = _bme_;
            if(0 < father){var i$0=father;continue}
            var _bmf_=0;
            caml_check_bound(a,0)[1 + _bmf_] = e;
            return 0}
          throw [0,Assert_failure,_I_]}}
      var l=a.length - 1,_blZ_=((l + 1 | 0) / 3 | 0) - 1 | 0;
      if(! (_blZ_ < 0))
       {var i$0=_blZ_;
        for(;;)
         {var _bmb_=caml_check_bound(a,i$0)[1 + i$0];
          trickle(l,i$0,_bmb_);
          var _bmc_=i$0 - 1 | 0;
          if(0 !== i$0){var i$0=_bmc_;continue}
          break}}
      var _bl0_=l - 1 | 0;
      if(! (_bl0_ < 2))
       {var i=_bl0_;
        for(;;)
         {var
           e$0=caml_check_bound(a,i)[1 + i],
           _bl8_=0,
           _bl9_=caml_check_bound(a,0)[1 + _bl8_];
          caml_check_bound(a,i)[1 + i] = _bl9_;
          var _bl__=0,_bl$_=bubble(i,_bl__);
          trickleup(_bl$_,e$0);
          var _bma_=i - 1 | 0;
          if(2 !== i){var i=_bma_;continue}
          break}}
      var _bl1_=1 < l?1:0;
      if(_bl1_)
       {var
         _bl2_=1,
         e=caml_check_bound(a,1)[1 + _bl2_],
         _bl3_=0,
         _bl4_=caml_check_bound(a,0)[1 + _bl3_],
         _bl5_=1;
        caml_check_bound(a,1)[1 + _bl5_] = _bl4_;
        var _bl6_=0;
        caml_check_bound(a,0)[1 + _bl6_] = e;
        var _bl7_=0}
      else
       var _bl7_=_bl1_;
      return _bl7_}
    var zero=0,one=1;
    function succ(n){return n + 1 | 0}
    function pred(n){return n - 1 | 0}
    function abs$0(n){return caml_greaterequal(n,0)?n:- n | 0}
    function to_string$2(n){return caml_format_int(_J_,n)}
    function compare$1(x,y){return caml_int_compare(x,y)}
    function succ$0(n){return caml_int64_add(n,_K_)}
    function pred$0(n){return caml_int64_sub(n,_L_)}
    function abs$1(n){return caml_greaterequal(n,_M_)?n:caml_int64_neg(n)}
    function to_string$3(n){return caml_int64_format(_N_,n)}
    function compare$2(x,y){return caml_int64_compare(x,y)}
    var zero$1=0,one$1=1;
    function succ$1(n){return n + 1 | 0}
    function pred$1(n){return n - 1 | 0}
    function abs$2(n){return caml_greaterequal(n,0)?n:- n | 0}
    function to_string$4(n){return caml_format_int(_O_,n)}
    function compare$3(x,y){return caml_int_compare(x,y)}
    function engine(tbl,state,buf)
     {var
       result=caml_lex_engine(tbl,state,buf),
       _blW_=0 <= result?1:0,
       _blX_=_blW_?buf[12] !== dummy_pos?1:0:_blW_;
      if(_blX_)
       {buf[11] = buf[12];
        var _blY_=buf[12];
        buf[12] = [0,_blY_[1],_blY_[2],_blY_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_string(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _blL_=with_positions?zero_pos:dummy_pos,
       _blM_=with_positions?zero_pos:dummy_pos,
       _blN_=[0],
       _blO_=1,
       _blP_=0,
       _blQ_=0,
       _blR_=0,
       _blS_=0,
       _blT_=0,
       _blU_=caml_ml_string_length(s),
       _blV_=to_bytes(s);
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _blV_,
              _blU_,
              _blT_,
              _blS_,
              _blR_,
              _blQ_,
              _blP_,
              _blO_,
              _blN_,
              _blM_,
              _blL_]}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    function sub_lexeme_char(lexbuf,i)
     {var _blK_=lexbuf[2];return caml_bytes_get(_blK_,i)}
    function lexeme_start_p(lexbuf){return lexbuf[11]}
    function lexeme_end_p(lexbuf){return lexbuf[12]}
    function new_line(lexbuf)
     {var
       lcp=lexbuf[12],
       _blI_=lcp !== dummy_pos?1:0,
       _blJ_=
        _blI_?(lexbuf[12] = [0,lcp[1],lcp[2] + 1 | 0,lcp[4],lcp[4]],0):_blI_;
      return _blJ_}
    function Make(Ord)
     {function height(param){if(param){var h=param[4];return h}return 0}
      function create(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        var _blH_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_blH_]}
      function bal(l,v,r)
       {if(l)var h=l[4],hl=h;else var hl=0;
        if(r)var h$0=r[4],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[3],lv=l[2],ll=l[1],_blC_=height(lr);
            if(_blC_ <= height(ll))return create(ll,lv,create(lr,v,r));
            if(lr)
             {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_blD_=create(lrr,v,r);
              return create(create(ll,lv,lrl),lrv,_blD_)}
            return invalid_arg(_P_)}
          return invalid_arg(_Q_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[3],rv=r[2],rl=r[1],_blE_=height(rl);
            if(_blE_ <= height(rr))return create(create(l,v,rl),rv,rr);
            if(rl)
             {var rlr=rl[3],rlv=rl[2],rll=rl[1],_blF_=create(rlr,rv,rr);
              return create(create(l,v,rll),rlv,_blF_)}
            return invalid_arg(_R_)}
          return invalid_arg(_S_)}
        var _blG_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,v,r,_blG_]}
      function add(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],_blB_=Ord[1],c=caml_call2(_blB_,x,v);
          if(0 === c)return t;
          if(0 <= c){var rr=add(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=add(x,l);
          return l === ll?t:bal(ll,v,r)}
        return [0,0,x,0,1]}
      function singleton(x){return [0,0,x,0,1]}
      function add_min_element(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1];
          return bal(add_min_element(x,l),v,r)}
        return singleton(x)}
      function add_max_element(x,param)
       {if(param)
         {var r=param[3],v=param[2],l=param[1];
          return bal(l,v,add_max_element(x,r))}
        return singleton(x)}
      function join(l,v,r)
       {if(l)
         {if(r)
           {var
             rh=r[4],
             rr=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[4],
             lr=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,join(lr,v,r))
                    :(lh + 2 | 0) < rh?bal(join(l,v,rl),rv,rr):create(l,v,r)}
          return add_max_element(v,l)}
        return add_min_element(v,r)}
      function min_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _blA_=param$0[1];
            if(_blA_){var param$0=_blA_;continue}
            var v=param$0[2];
            return v}
          throw Not_found}}
      function min_elt_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _blz_=param$0[1];
            if(_blz_){var param$0=_blz_;continue}
            var v=param$0[2];
            return [0,v]}
          return 0}}
      function max_elt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
            var v=param$0[2];
            return v}
          throw Not_found}}
      function max_elt_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
            var v=param$0[2];
            return [0,v]}
          return 0}}
      function remove_min_elt(param)
       {if(param)
         {var _bly_=param[1];
          if(_bly_)
           {var r=param[3],v=param[2];return bal(remove_min_elt(_bly_),v,r)}
          var r$0=param[3];
          return r$0}
        return invalid_arg(_U_)}
      function merge(t1,t2)
       {if(t1)
         {if(t2)
           {var _blx_=remove_min_elt(t2);return bal(t1,min_elt(t2),_blx_)}
          return t1}
        return t2}
      function concat(t1,t2)
       {if(t1)
         {if(t2)
           {var _blw_=remove_min_elt(t2);return join(t1,min_elt(t2),_blw_)}
          return t1}
        return t2}
      function split(x,param)
       {if(param)
         {var
           r=param[3],
           v=param[2],
           l=param[1],
           _blv_=Ord[1],
           c=caml_call2(_blv_,x,v);
          if(0 === c)return [0,l,1,r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,r)]}
        return _V_}
      var empty=0;
      function is_empty(param){return param?0:1}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _blt_=Ord[1],
             c=caml_call2(_blt_,x,v),
             _blu_=0 === c?1:0;
            if(_blu_)return _blu_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function remove(x,t)
       {if(t)
         {var r=t[3],v=t[2],l=t[1],_bls_=Ord[1],c=caml_call2(_bls_,x,v);
          if(0 === c)return merge(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?t:bal(l,v,rr)}
          var ll=remove(x,l);
          return l === ll?t:bal(ll,v,r)}
        return 0}
      function union(s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[4],
             r2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[4],
             r1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {if(1 === h2)return add(v2,s1);
              var
               match=split(v1,s2),
               r2$0=match[3],
               l2$0=match[1],
               _blq_=union(r1,r2$0);
              return join(union(l1,l2$0),v1,_blq_)}
            if(1 === h1)return add(v1,s2);
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             l1$0=match$0[1],
             _blr_=union(r1$0,r2);
            return join(union(l1$0,l2),v2,_blr_)}
          return s1}
        return s2}
      function inter(s1,s2)
       {if(s1)
         {if(s2)
           {var r1=s1[3],v1=s1[2],l1=s1[1],_blm_=split(v1,s2),_bln_=_blm_[1];
            if(_blm_[2])
             {var r2=_blm_[3],_blo_=inter(r1,r2);
              return join(inter(l1,_bln_),v1,_blo_)}
            var r2$0=_blm_[3],_blp_=inter(r1,r2$0);
            return concat(inter(l1,_bln_),_blp_)}
          return 0}
        return 0}
      function split_bis(x,param)
       {if(param)
         {var
           r=param[3],
           v=param[2],
           l=param[1],
           _blk_=Ord[1],
           c=caml_call2(_blk_,x,v);
          if(0 === c)return 0;
          if(0 <= c)
           {var match=split_bis(x,r);
            if(match){var rr=match[2],lr=match[1];return [0,join(l,v,lr),rr]}
            return 0}
          var match$0=split_bis(x,l);
          if(match$0)
           {var rl=match$0[2],ll=match$0[1];
            return [0,
                    ll,
                    function(param)
                     {var _bll_=0;return join(caml_call1(rl,_bll_),v,r)}]}
          return 0}
        return [0,0,function(param){return 0}]}
      function disjoint(s1,s2)
       {var s1$0=s1,s2$0=s2;
        for(;;)
         {if(s1$0 && s2$0)
           {var r1=s1$0[3],v1=s1$0[2],l1=s1$0[1];
            if(s1$0 === s2$0)return 0;
            var match=split_bis(v1,s2$0);
            if(match)
             {var r2=match[2],l2=match[1],_bli_=disjoint(l1,l2);
              if(_bli_)
               {var _blj_=0,s2$1=caml_call1(r2,_blj_),s1$0=r1,s2$0=s2$1;
                continue}
              return _bli_}
            return 0}
          return 1}}
      function diff(s1,s2)
       {if(s1)
         {if(s2)
           {var r1=s1[3],v1=s1[2],l1=s1[1],_ble_=split(v1,s2),_blf_=_ble_[1];
            if(_ble_[2])
             {var r2=_ble_[3],_blg_=diff(r1,r2);
              return concat(diff(l1,_blf_),_blg_)}
            var r2$0=_ble_[3],_blh_=diff(r1,r2$0);
            return join(diff(l1,_blf_),v1,_blh_)}
          return s1}
        return 0}
      function cons_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var r=s$0[3],v=s$0[2],s$1=s$0[1],e$1=[0,v,r,e$0],s$0=s$1,e$0=e$1;
            continue}
          return e$0}}
      function compare_aux(e1,e2)
       {var e1$0=e1,e2$0=e2;
        for(;;)
         {if(e1$0)
           {if(e2$0)
             {var
               e2$1=e2$0[3],
               r2=e2$0[2],
               v2=e2$0[1],
               e1$1=e1$0[3],
               r1=e1$0[2],
               v1=e1$0[1],
               _bld_=Ord[1],
               c=caml_call2(_bld_,v1,v2);
              if(0 === c)
               {var
                 e2$2=cons_enum(r2,e2$1),
                 e1$2=cons_enum(r1,e1$1),
                 e1$0=e1$2,
                 e2$0=e2$2;
                continue}
              return c}
            return 1}
          return e2$0?-1:0}}
      function compare(s1,s2)
       {var _bla_=0,_blb_=cons_enum(s2,_bla_),_blc_=0;
        return compare_aux(cons_enum(s1,_blc_),_blb_)}
      function equal(s1,s2){return 0 === compare(s1,s2)?1:0}
      function subset(s1,s2)
       {var s1$0=s1,s2$0=s2;
        for(;;)
         {if(s1$0)
           {if(s2$0)
             {var
               r2=s2$0[3],
               v2=s2$0[2],
               l2=s2$0[1],
               r1=s1$0[3],
               v1=s1$0[2],
               l1=s1$0[1],
               _bk6_=Ord[1],
               c=caml_call2(_bk6_,v1,v2);
              if(0 === c)
               {var _bk7_=subset(l1,l2);
                if(_bk7_){var s1$0=r1,s2$0=r2;continue}
                return _bk7_}
              if(0 <= c)
               {var _bk8_=[0,0,v1,r1,0],_bk9_=subset(_bk8_,r2);
                if(_bk9_){var s1$0=l1;continue}
                return _bk9_}
              var _bk__=[0,l1,v1,0,0],_bk$_=subset(_bk__,l2);
              if(_bk$_){var s1$0=r1;continue}
              return _bk$_}
            return 0}
          return 1}}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call1(f,v);
            var param$0=r;
            continue}
          return 0}}
      function fold(f,s,accu)
       {var s$0=s,accu$0=accu;
        for(;;)
         {if(s$0)
           {var
             r=s$0[3],
             v=s$0[2],
             l=s$0[1],
             _bk5_=fold(f,l,accu$0),
             accu$1=caml_call2(f,v,_bk5_),
             s$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_bk2_=caml_call1(p,v);
            if(_bk2_)
             {var _bk3_=for_all(p,l);
              if(_bk3_){var param$0=r;continue}
              var _bk4_=_bk3_}
            else
             var _bk4_=_bk2_;
            return _bk4_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1],_bkZ_=caml_call1(p,v);
            if(_bkZ_)
             var _bk0_=_bkZ_;
            else
             {var _bk1_=exists(p,l);
              if(! _bk1_){var param$0=r;continue}
              var _bk0_=_bk1_}
            return _bk0_}
          return 0}}
      function filter(p,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pv=caml_call1(p,v),
           r$0=filter(p,r);
          if(pv){if(l === l$0 && r === r$0)return t;return join(l$0,v,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pv=caml_call1(p,v),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pv){var _bkX_=concat(lf,rf);return [0,join(lt,v,rt),_bkX_]}
          var _bkY_=join(lf,v,rf);
          return [0,concat(lt,rt),_bkY_]}
        return _W_}
      function cardinal(param)
       {if(param)
         {var r=param[3],l=param[1],_bkW_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _bkW_ | 0}
        return 0}
      function elements_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,v,elements_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function elements(s){return elements_aux(0,s)}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _bkV_=Ord[1],
             c=caml_call2(_bkV_,x,v);
            if(0 === c)return v;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first_aux(v0,f,param)
       {var v0$0=v0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,param$0=l;continue}
            var param$0=r;
            continue}
          return v0$0}}
      function find_first(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_first_aux(v,f,l);
            var param$0=r;
            continue}
          throw Not_found}}
      function find_first_opt_aux(v0,f,param)
       {var v0$0=v0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,param$0=l;continue}
            var param$0=r;
            continue}
          return [0,v0$0]}}
      function find_first_opt(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_first_opt_aux(v,f,l);
            var param$0=r;
            continue}
          return 0}}
      function find_last_aux(v0,f,param)
       {var v0$0=v0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,param$0=r;continue}
            var param$0=l;
            continue}
          return v0$0}}
      function find_last(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_last_aux(v,f,r);
            var param$0=l;
            continue}
          throw Not_found}}
      function find_last_opt_aux(v0,f,param)
       {var v0$0=v0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,param$0=r;continue}
            var param$0=l;
            continue}
          return [0,v0$0]}}
      function find_last_opt(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_last_opt_aux(v,f,r);
            var param$0=l;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _bkU_=Ord[1],
             c=caml_call2(_bkU_,x,v);
            if(0 === c)return [0,v];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function try_join(l,v,r)
       {var switch$0=0;
        if(0 !== l)
         {var _bkS_=max_elt(l),_bkT_=Ord[1];
          if(0 <= caml_call2(_bkT_,_bkS_,v))switch$0 = 1}
        if(! switch$0)
         {var switch$1=0;
          if(0 !== r)
           {var _bkQ_=min_elt(r),_bkR_=Ord[1];
            if(0 <= caml_call2(_bkR_,v,_bkQ_))switch$1 = 1}
          if(! switch$1)return join(l,v,r)}
        return union(l,add(v,r))}
      function map(f,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=map(f,l),
           v$0=caml_call1(f,v),
           r$0=map(f,r);
          if(l === l$0 && v === v$0 && r === r$0)return t;
          return try_join(l$0,v$0,r$0)}
        return 0}
      function try_concat(t1,t2)
       {if(t1)
         {if(t2)
           {var _bkP_=remove_min_elt(t2);
            return try_join(t1,min_elt(t2),_bkP_)}
          return t1}
        return t2}
      function filter_map(f,t)
       {if(t)
         {var
           r=t[3],
           v=t[2],
           l=t[1],
           l$0=filter_map(f,l),
           v$0=caml_call1(f,v),
           r$0=filter_map(f,r);
          if(v$0)
           {var v$1=v$0[1];
            if(l === l$0 && v === v$1 && r === r$0)return t;
            return try_join(l$0,v$1,r$0)}
          return try_concat(l$0,r$0)}
        return 0}
      function of_sorted_list(l)
       {function sub(n,l)
         {if(! (3 < n >>> 0))
           switch(n)
            {case 0:return [0,0,l];
             case 1:
              if(l){var l$3=l[2],x0=l[1];return [0,[0,0,x0,0,1],l$3]}break;
             case 2:
              if(l)
               {var _bkM_=l[2];
                if(_bkM_)
                 {var l$4=_bkM_[2],x1=_bkM_[1],x0$0=l[1];
                  return [0,[0,[0,0,x0$0,0,1],x1,0,2],l$4]}}
              break;
             default:
              if(l)
               {var _bkN_=l[2];
                if(_bkN_)
                 {var _bkO_=_bkN_[2];
                  if(_bkO_)
                   {var l$5=_bkO_[2],x2=_bkO_[1],x1$0=_bkN_[1],x0$1=l[1];
                    return [0,[0,[0,0,x0$1,0,1],x1$0,[0,0,x2,0,1],2],l$5]}}}}
          var nl=n / 2 | 0,match=sub(nl,l),l$0=match[2],left=match[1];
          if(l$0)
           {var
             l$1=l$0[2],
             mid=l$0[1],
             _bkL_=(n - nl | 0) - 1 | 0,
             match$0=sub(_bkL_,l$1),
             l$2=match$0[2],
             right=match$0[1];
            return [0,create(left,mid,right),l$2]}
          throw [0,Assert_failure,_X_]}
        var _bkK_=length(l);
        return sub(_bkK_,l)[1]}
      function of_list(l)
       {if(l)
         {var _bkv_=l[2],_bkw_=l[1];
          if(_bkv_)
           {var _bkx_=_bkv_[2],_bky_=_bkv_[1];
            if(_bkx_)
             {var _bkz_=_bkx_[2],_bkA_=_bkx_[1];
              if(_bkz_)
               {var _bkB_=_bkz_[2],_bkC_=_bkz_[1];
                if(_bkB_)
                 {if(_bkB_[2])
                   {var _bkD_=Ord[1];return of_sorted_list(sort_uniq(_bkD_,l))}
                  var
                   x4=_bkB_[1],
                   _bkE_=singleton(_bkw_),
                   _bkF_=add(_bky_,_bkE_),
                   _bkG_=add(_bkA_,_bkF_);
                  return add(x4,add(_bkC_,_bkG_))}
                var _bkH_=singleton(_bkw_),_bkI_=add(_bky_,_bkH_);
                return add(_bkC_,add(_bkA_,_bkI_))}
              var _bkJ_=singleton(_bkw_);
              return add(_bkA_,add(_bky_,_bkJ_))}
            return add(_bky_,singleton(_bkw_))}
          return singleton(_bkw_)}
        return empty}
      function add_seq(i,m)
       {return fold_left(function(s,x){return add(x,s)},m,i)}
      function of_seq(i){return add_seq(i,empty)}
      function seq_of_enum(c,param)
       {if(c)
         {var rest=c[3],t=c[2],x=c[1],_bkt_=cons_enum(t,rest);
          return [0,x,function(_bku_){return seq_of_enum(_bkt_,_bku_)}]}
        return 0}
      function to_seq(c)
       {var _bkq_=0,_bkr_=cons_enum(c,_bkq_);
        return function(_bks_){return seq_of_enum(_bkr_,_bks_)}}
      function snoc_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var s$1=s$0[3],v=s$0[2],l=s$0[1],e$1=[0,v,l,e$0],s$0=s$1,e$0=e$1;
            continue}
          return e$0}}
      function rev_seq_of_enum(c,param)
       {if(c)
         {var rest=c[3],t=c[2],x=c[1],_bko_=snoc_enum(t,rest);
          return [0,x,function(_bkp_){return rev_seq_of_enum(_bko_,_bkp_)}]}
        return 0}
      function to_rev_seq(c)
       {var _bkl_=0,_bkm_=snoc_enum(c,_bkl_);
        return function(_bkn_){return rev_seq_of_enum(_bkm_,_bkn_)}}
      function to_seq_from(low,s)
       {function aux(low,s,c)
         {var s$0=s,c$0=c;
          for(;;)
           {if(s$0)
             {var
               r=s$0[3],
               v=s$0[2],
               l=s$0[1],
               _bkk_=Ord[1],
               n=caml_call2(_bkk_,v,low);
              if(0 === n)return [0,v,r,c$0];
              if(0 <= n){var c$1=[0,v,r,c$0],s$0=l,c$0=c$1;continue}
              var s$0=r;
              continue}
            return c$0}}
        var _bkh_=0,_bki_=aux(low,s,_bkh_);
        return function(_bkj_){return seq_of_enum(_bki_,_bkj_)}}
      return [0,
              height,
              create,
              bal,
              add,
              singleton,
              add_min_element,
              add_max_element,
              join,
              min_elt,
              min_elt_opt,
              max_elt,
              max_elt_opt,
              remove_min_elt,
              merge,
              concat,
              split,
              empty,
              is_empty,
              mem,
              remove,
              union,
              inter,
              split_bis,
              disjoint,
              diff,
              cons_enum,
              compare_aux,
              compare,
              equal,
              subset,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              elements_aux,
              elements,
              min_elt,
              min_elt_opt,
              find,
              find_first_aux,
              find_first,
              find_first_opt_aux,
              find_first_opt,
              find_last_aux,
              find_last,
              find_last_opt_aux,
              find_last_opt,
              find_opt,
              try_join,
              map,
              try_concat,
              filter_map,
              of_sorted_list,
              of_list,
              add_seq,
              of_seq,
              seq_of_enum,
              to_seq,
              snoc_enum,
              rev_seq_of_enum,
              to_rev_seq,
              to_seq_from]}
    function _Y_(_bkf_)
     {var _bkg_=Make(_bkf_);
      return [0,
              _bkg_[17],
              _bkg_[18],
              _bkg_[19],
              _bkg_[4],
              _bkg_[5],
              _bkg_[20],
              _bkg_[21],
              _bkg_[22],
              _bkg_[24],
              _bkg_[25],
              _bkg_[28],
              _bkg_[29],
              _bkg_[30],
              _bkg_[31],
              _bkg_[53],
              _bkg_[32],
              _bkg_[33],
              _bkg_[34],
              _bkg_[35],
              _bkg_[55],
              _bkg_[36],
              _bkg_[37],
              _bkg_[39],
              _bkg_[9],
              _bkg_[10],
              _bkg_[11],
              _bkg_[12],
              _bkg_[40],
              _bkg_[41],
              _bkg_[16],
              _bkg_[42],
              _bkg_[51],
              _bkg_[44],
              _bkg_[46],
              _bkg_[48],
              _bkg_[50],
              _bkg_[57],
              _bkg_[65],
              _bkg_[61],
              _bkg_[64],
              _bkg_[58],
              _bkg_[59]]}
    function Make$0(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_bke_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_bke_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_bj$_=height(lr);
            if(_bj$_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _bka_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_bka_)}
            return invalid_arg(_Z_)}
          return invalid_arg(___)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_bkb_=height(rl);
            if(_bkb_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _bkc_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_bkc_)}
            return invalid_arg(_$_)}
          return invalid_arg(_aa_)}
        var _bkd_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_bkd_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var
           h=m[5],
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           _bj__=Ord[1],
           c=caml_call2(_bj__,x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _bj9_=Ord[1],
             c=caml_call2(_bj9_,x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first_aux(v0,d0,f,param)
       {var v0$0=v0,d0$0=d0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,d0$0=d,param$0=l;continue}
            var param$0=r;
            continue}
          return [0,v0$0,d0$0]}}
      function find_first(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_first_aux(v,d,f,l);
            var param$0=r;
            continue}
          throw Not_found}}
      function find_first_opt_aux(v0,d0,f,param)
       {var v0$0=v0,d0$0=d0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,d0$0=d,param$0=l;continue}
            var param$0=r;
            continue}
          return [0,[0,v0$0,d0$0]]}}
      function find_first_opt(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_first_opt_aux(v,d,f,l);
            var param$0=r;
            continue}
          return 0}}
      function find_last_aux(v0,d0,f,param)
       {var v0$0=v0,d0$0=d0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,d0$0=d,param$0=r;continue}
            var param$0=l;
            continue}
          return [0,v0$0,d0$0]}}
      function find_last(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_last_aux(v,d,f,r);
            var param$0=l;
            continue}
          throw Not_found}}
      function find_last_opt_aux(v0,d0,f,param)
       {var v0$0=v0,d0$0=d0,param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v)){var v0$0=v,d0$0=d,param$0=r;continue}
            var param$0=l;
            continue}
          return [0,[0,v0$0,d0$0]]}}
      function find_last_opt(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            if(caml_call1(f,v))return find_last_opt_aux(v,d,f,r);
            var param$0=l;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _bj8_=Ord[1],
             c=caml_call2(_bj8_,x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             _bj6_=Ord[1],
             c=caml_call2(_bj6_,x,v),
             _bj7_=0 === c?1:0;
            if(_bj7_)return _bj7_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _bj5_=param$0[1];
            if(_bj5_){var param$0=_bj5_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _bj4_=param$0[1];
            if(_bj4_){var param$0=_bj4_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _bj3_=param[1];
          if(_bj3_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_bj3_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_ab_)}
      function _bji_(t1,t2)
       {if(t1)
         {if(t2)
           {var match=min_binding(t2),d=match[2],x=match[1];
            return bal(t1,x,d,remove_min_binding(t2))}
          return t1}
        return t2}
      function remove(x,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           _bj2_=Ord[1],
           c=caml_call2(_bj2_,x,v);
          if(0 === c)return _bji_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var
           h=m[5],
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           _bjZ_=Ord[1],
           c=caml_call2(_bjZ_,x,v);
          if(0 === c)
           {var _bj0_=[0,d],match=caml_call1(f,_bj0_);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _bji_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var _bj1_=0,match$0=caml_call1(f,_bj1_);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=r;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             _bjY_=fold(f,l,accu$0),
             accu$1=caml_call3(f,v,d,_bjY_),
             m$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _bjV_=caml_call2(p,v,d);
            if(_bjV_)
             {var _bjW_=for_all(p,l);
              if(_bjW_){var param$0=r;continue}
              var _bjX_=_bjW_}
            else
             var _bjX_=_bjV_;
            return _bjX_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _bjS_=caml_call2(p,v,d);
            if(_bjS_)
             var _bjT_=_bjS_;
            else
             {var _bjU_=exists(p,l);
              if(! _bjU_){var param$0=r;continue}
              var _bjT_=_bjU_}
            return _bjT_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t1,t2)
       {if(t1)
         {if(t2)
           {var match=min_binding(t2),d=match[2],x=match[1];
            return join(t1,x,d,remove_min_binding(t2))}
          return t1}
        return t2}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           _bjR_=Ord[1],
           c=caml_call2(_bjR_,x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _ac_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _bjL_=merge(f,r1,r2),
             _bjM_=[0,d1],
             _bjN_=caml_call3(f,v1,_bjM_,d2);
            return concat_or_join(merge(f,l1,l2),v1,_bjN_,_bjL_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _bjO_=merge(f,r1$0,r2$0),
           _bjP_=[0,d2$0],
           _bjQ_=caml_call3(f,v2,d1$0,_bjP_);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_bjQ_,_bjO_)}
        throw [0,Assert_failure,_ad_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function filter_map(f,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=filter_map(f,l),
           fvd=caml_call2(f,v,d),
           r$0=filter_map(f,r);
          if(fvd){var d$0=fvd[1];return join(l$0,v,d$0,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _bjJ_=concat(lf,rf);return [0,join(lt,v,d,rt),_bjJ_]}
          var _bjK_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_bjK_]}
        return _ae_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {function compare_aux(e1,e2)
         {var e1$0=e1,e2$0=e2;
          for(;;)
           {if(e1$0)
             {if(e2$0)
               {var
                 e2$1=e2$0[4],
                 r2=e2$0[3],
                 d2=e2$0[2],
                 v2=e2$0[1],
                 e1$1=e1$0[4],
                 r1=e1$0[3],
                 d1=e1$0[2],
                 v1=e1$0[1],
                 _bjI_=Ord[1],
                 c=caml_call2(_bjI_,v1,v2);
                if(0 === c)
                 {var c$0=caml_call2(cmp,d1,d2);
                  if(0 === c$0)
                   {var
                     e2$2=cons_enum(r2,e2$1),
                     e1$2=cons_enum(r1,e1$1),
                     e1$0=e1$2,
                     e2$0=e2$2;
                    continue}
                  return c$0}
                return c}
              return 1}
            return e2$0?-1:0}}
        var _bjF_=0,_bjG_=cons_enum(m2,_bjF_),_bjH_=0;
        return compare_aux(cons_enum(m1,_bjH_),_bjG_)}
      function equal(cmp,m1,m2)
       {function equal_aux(e1,e2)
         {var e1$0=e1,e2$0=e2;
          for(;;)
           {if(e1$0)
             {if(e2$0)
               {var
                 e2$1=e2$0[4],
                 r2=e2$0[3],
                 d2=e2$0[2],
                 v2=e2$0[1],
                 e1$1=e1$0[4],
                 r1=e1$0[3],
                 d1=e1$0[2],
                 v1=e1$0[1],
                 _bjB_=Ord[1],
                 _bjC_=0 === caml_call2(_bjB_,v1,v2)?1:0;
                if(_bjC_)
                 {var _bjD_=caml_call2(cmp,d1,d2);
                  if(_bjD_)
                   {var
                     e2$2=cons_enum(r2,e2$1),
                     e1$2=cons_enum(r1,e1$1),
                     e1$0=e1$2,
                     e2$0=e2$2;
                    continue}
                  var _bjE_=_bjD_}
                else
                 var _bjE_=_bjC_;
                return _bjE_}
              return 0}
            return e2$0?0:1}}
        var _bjy_=0,_bjz_=cons_enum(m2,_bjy_),_bjA_=0;
        return equal_aux(cons_enum(m1,_bjA_),_bjz_)}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_bjx_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _bjx_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      function add_seq(i,m)
       {return fold_left
                (function(m,param)
                  {var v=param[2],k=param[1];return add(k,v,m)},
                 m,
                 i)}
      function of_seq(i){return add_seq(i,empty)}
      function seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_bjv_=cons_enum(t,rest);
          return [0,[0,k,v],function(_bjw_){return seq_of_enum(_bjv_,_bjw_)}]}
        return 0}
      function to_seq(m)
       {var _bjs_=0,_bjt_=cons_enum(m,_bjs_);
        return function(_bju_){return seq_of_enum(_bjt_,_bju_)}}
      function snoc_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var
             s$1=s$0[4],
             d=s$0[3],
             v=s$0[2],
             l=s$0[1],
             e$1=[0,v,d,l,e$0],
             s$0=s$1,
             e$0=e$1;
            continue}
          return e$0}}
      function rev_seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_bjq_=snoc_enum(t,rest);
          return [0,
                  [0,k,v],
                  function(_bjr_){return rev_seq_of_enum(_bjq_,_bjr_)}]}
        return 0}
      function to_rev_seq(c)
       {var _bjn_=0,_bjo_=snoc_enum(c,_bjn_);
        return function(_bjp_){return rev_seq_of_enum(_bjo_,_bjp_)}}
      function to_seq_from(low,m)
       {function aux(low,m,c)
         {var m$0=m,c$0=c;
          for(;;)
           {if(m$0)
             {var
               r=m$0[4],
               d=m$0[3],
               v=m$0[2],
               l=m$0[1],
               _bjm_=Ord[1],
               n=caml_call2(_bjm_,v,low);
              if(0 === n)return [0,v,d,r,c$0];
              if(0 <= n){var c$1=[0,v,d,r,c$0],m$0=l,c$0=c$1;continue}
              var m$0=r;
              continue}
            return c$0}}
        var _bjj_=0,_bjk_=aux(low,m,_bjj_);
        return function(_bjl_){return seq_of_enum(_bjk_,_bjl_)}}
      return [0,
              height,
              create,
              singleton,
              bal,
              empty,
              is_empty,
              add,
              find,
              find_first_aux,
              find_first,
              find_first_opt_aux,
              find_first_opt,
              find_last_aux,
              find_last,
              find_last_opt_aux,
              find_last_opt,
              find_opt,
              mem,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              remove_min_binding,
              remove,
              update,
              iter,
              map,
              mapi,
              fold,
              for_all,
              exists,
              add_min_binding,
              add_max_binding,
              join,
              concat,
              concat_or_join,
              split,
              merge,
              union,
              filter,
              filter_map,
              partition,
              cons_enum,
              compare,
              equal,
              cardinal,
              bindings_aux,
              bindings,
              min_binding,
              min_binding_opt,
              add_seq,
              of_seq,
              seq_of_enum,
              to_seq,
              snoc_enum,
              rev_seq_of_enum,
              to_rev_seq,
              to_seq_from]}
    function _af_(_bjg_)
     {var _bjh_=Make$0(_bjg_);
      return [0,
              _bjh_[5],
              _bjh_[6],
              _bjh_[18],
              _bjh_[7],
              _bjh_[25],
              _bjh_[3],
              _bjh_[24],
              _bjh_[38],
              _bjh_[39],
              _bjh_[44],
              _bjh_[45],
              _bjh_[26],
              _bjh_[29],
              _bjh_[30],
              _bjh_[31],
              _bjh_[40],
              _bjh_[41],
              _bjh_[42],
              _bjh_[46],
              _bjh_[48],
              _bjh_[19],
              _bjh_[20],
              _bjh_[21],
              _bjh_[22],
              _bjh_[49],
              _bjh_[50],
              _bjh_[37],
              _bjh_[8],
              _bjh_[17],
              _bjh_[10],
              _bjh_[12],
              _bjh_[14],
              _bjh_[16],
              _bjh_[27],
              _bjh_[28],
              _bjh_[54],
              _bjh_[57],
              _bjh_[58],
              _bjh_[51],
              _bjh_[52]]}
    var Empty=[248,_ag_,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop(s)
     {var _bjf_=s[1];
      if(_bjf_)
       {var tl=_bjf_[2],hd=_bjf_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return hd}
      throw Empty}
    function pop_opt(s)
     {var _bje_=s[1];
      if(_bje_)
       {var tl=_bje_[2],hd=_bje_[1];
        s[1] = tl;
        s[2] = s[2] - 1 | 0;
        return [0,hd]}
      return 0}
    function top(s)
     {var _bjd_=s[1];if(_bjd_){var hd=_bjd_[1];return hd}throw Empty}
    function top_opt(s)
     {var _bjc_=s[1];if(_bjc_){var hd=_bjc_[1];return [0,hd]}return 0}
    function is_empty(s){return 0 === s[1]?1:0}
    function iter$3(f,s){return iter$0(f,s[1])}
    var Empty$0=[248,_ah_,caml_fresh_oo_id(0)];
    function create$0(param){return [0,0,0,0]}
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_bjb_=q[3];
      return _bjb_
              ?(q[1] = q[1] + 1 | 0,_bjb_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    function peek_opt(q)
     {var _bja_=q[2];
      if(_bja_){var content=_bja_[1];return [0,content]}
      return 0}
    function take(q)
     {var _bi__=q[2];
      if(_bi__)
       {var _bi$_=_bi__[1];
        if(_bi__[2])
         {var next=_bi__[2];q[1] = q[1] - 1 | 0;q[2] = next;return _bi$_}
        clear$0(q);
        return _bi$_}
      throw Empty$0}
    function take_opt(q)
     {var _bi8_=q[2];
      if(_bi8_)
       {var _bi9_=_bi8_[1];
        if(_bi8_[2])
         {var next=_bi8_[2];q[1] = q[1] - 1 | 0;q[2] = next;return [0,_bi9_]}
        clear$0(q);
        return [0,_bi9_]}
      return 0}
    function is_empty$0(q){return 0 === q[1]?1:0}
    function create$1(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function sub$2(b,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((b[2] - len | 0) < ofs))
       return sub_string(b[1],ofs,len);
      return invalid_arg(_ai_)}
    function length$0(b){return b[2]}
    function clear$1(b){b[2] = 0;return 0}
    function reset(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((old_pos + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_al_);
        var
         _bi3_=new_len[1],
         new_buffer=caml_create_bytes(_bi3_),
         _bi4_=b[2],
         _bi5_=0,
         _bi6_=0,
         _bi7_=b[1];
        blit(_bi7_,_bi6_,new_buffer,_bi5_,_bi4_);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_aj_]}
        throw [0,Assert_failure,_ak_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos){var _bi2_=1;resize(b,_bi2_)}
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_substring(b,s,offset,len)
     {var _biX_=offset < 0?1:0;
      if(_biX_)
       var _biY_=_biX_;
      else
       var
        _bi1_=len < 0?1:0,
        _biY_=_bi1_ || ((caml_ml_string_length(s) - len | 0) < offset?1:0);
      if(_biY_)invalid_arg(_am_);
      var new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      var _biZ_=b[2],_bi0_=b[1];
      caml_blit_string(s,offset,_bi0_,_biZ_,len);
      b[2] = new_position;
      return 0}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      var _biV_=b[2],_biW_=b[1];
      caml_blit_string(s,0,_biW_,_biV_,len);
      b[2] = new_position;
      return 0}
    function create_char_set(param){return make$0(32,0)}
    function add_in_char_set(char_set,c)
     {var
       str_ind=c >>> 3 | 0,
       mask=1 << (c & 7),
       _biT_=caml_bytes_get(char_set,str_ind) | mask,
       _biU_=char_of_int(_biT_);
      return caml_bytes_set(char_set,str_ind,_biU_)}
    function freeze_char_set(char_set){return of_bytes(char_set)}
    function rev_char_set(char_set)
     {var _biP_=0,char_set$0=create_char_set(_biP_),i=0;
      for(;;)
       {var _biQ_=caml_string_get(char_set,i) ^ 255,_biR_=char_of_int(_biQ_);
        caml_bytes_set(char_set$0,i,_biR_);
        var _biS_=i + 1 | 0;
        if(31 !== i){var i=_biS_;continue}
        return usob(char_set$0)}}
    function is_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return 0 !== (caml_string_get(char_set,str_ind) & mask)?1:0}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function prec_of_prec_opt(prec_opt)
     {if(prec_opt){var ndec=prec_opt[1];return [0,ndec]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1],_biK_=0;
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),_biK_,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1],_biL_=0;
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),_biL_,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1],_biM_=0;
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),_biM_,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1],_biN_=0;
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),_biN_,fmt]];
         case 6:
          var
           prec_opt=ign[2],
           pad_opt$5=ign[1],
           _biO_=prec_of_prec_opt(prec_opt);
          return [0,[8,_an_,pad_of_pad_opt(pad_opt$5),_biO_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _biE_=len < min_len?1:0;
      if(_biE_)
       {var
         _biF_=len * 2 | 0,
         new_len=max$0(_biF_,min_len),
         new_str=caml_create_bytes(new_len),
         _biG_=0,
         _biH_=0,
         _biI_=buf[2];
        blit(_biI_,_biH_,new_str,_biG_,len);
        buf[2] = new_str;
        var _biJ_=0}
      else
       var _biJ_=_biE_;
      return _biJ_}
    function buffer_add_char(buf,c)
     {var _biB_=1;
      buffer_check_size(buf,_biB_);
      var _biC_=buf[1],_biD_=buf[2];
      caml_bytes_set(_biD_,_biC_,c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      var _biy_=buf[1],_biz_=buf[2],_biA_=0;
      blit$0(s,_biA_,_biz_,_biy_,str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function char_of_fconv(opt,fconv)
     {if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:return 102;
        case 1:return 101;
        case 2:return 69;
        case 3:return 103;
        case 4:return 71;
        case 5:return cF;
        case 6:return 104;
        case 7:return 72;
        default:return 70}}
    function bprint_fconv_flag(buf,fconv)
     {switch(fconv[1])
       {case 0:break;
        case 1:var _biw_=43;buffer_add_char(buf,_biw_);break;
        default:var _bix_=32;buffer_add_char(buf,_bix_)}
      return 8 <= fconv[2]?buffer_add_char(buf,35):0}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _ao_;
         case 1:return _ap_;
         case 2:return _aq_;
         case 3:return _ar_;
         case 4:return _as_;
         case 5:return _at_;
         default:return _au_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:
          var c=formatting_lit[1],_biv_=1;return cat(_av_,make$1(_biv_,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_aw_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_ax_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_ay_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_az_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_aA_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_aB_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_aC_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_aD_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_aE_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_aF_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_aG_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_aH_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_aI_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_aJ_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_aK_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_aL_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_aM_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function trans(ty1,ty2)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof ty2 === "number")
        return 0;
       else
        switch(ty2[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_aN_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_bh$_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 0:var rest2=ty2[1];return [0,trans(_bh$_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_bia_=ty1[1];
          if(typeof ty2 !== "number")
           switch(ty2[0])
            {case 1:var rest2$0=ty2[1];return [1,trans(_bia_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_bib_=ty1[1];
          if(typeof ty2 === "number")
           switch$3 = 1;
          else
           switch(ty2[0])
            {case 2:var rest2$1=ty2[1];return [2,trans(_bib_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_bic_=ty1[1];
          if(typeof ty2 === "number")
           switch$4 = 1;
          else
           switch(ty2[0])
            {case 3:var rest2$2=ty2[1];return [3,trans(_bic_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_bid_=ty1[1];
          if(typeof ty2 === "number")
           switch$5 = 1;
          else
           switch(ty2[0])
            {case 4:var rest2$3=ty2[1];return [4,trans(_bid_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_bie_=ty1[1];
          if(typeof ty2 === "number")
           switch$6 = 1;
          else
           switch(ty2[0])
            {case 5:var rest2$4=ty2[1];return [5,trans(_bie_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_bif_=ty1[1];
          if(typeof ty2 === "number")
           switch$7 = 1;
          else
           switch(ty2[0])
            {case 6:var rest2$5=ty2[1];return [6,trans(_bif_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_big_=ty1[1];
          if(typeof ty2 === "number")
           switch$8 = 1;
          else
           switch(ty2[0])
            {case 7:var rest2$6=ty2[1];return [7,trans(_big_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_bih_=ty1[2],_bii_=ty1[1];
          if(typeof ty2 === "number")
           switch$9 = 1;
          else
           switch(ty2[0])
            {case 8:
              var rest2$7=ty2[2],ty2$0=ty2[1],_bij_=trans(_bih_,rest2$7);
              return [8,trans(_bii_,ty2$0),_bij_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_aW_];
          break;
         case 9:
          var switch$10=0,_bik_=ty1[3],_bil_=ty1[2],_bim_=ty1[1];
          if(typeof ty2 === "number")
           switch$10 = 1;
          else
           switch(ty2[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=ty2[3],
               ty22=ty2[2],
               ty21=ty2[1],
               _bin_=symm(_bil_),
               ty=trans(_bin_,ty21),
               match=fmtty_rel_det(ty),
               f4=match[4],
               f2=match[2],
               _bio_=0;
              caml_call1(f2,_bio_);
              var _bip_=0;
              caml_call1(f4,_bip_);
              return [9,_bim_,ty22,trans(_bik_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_aX_];
          break;
         case 10:
          var _biq_=ty1[1];
          if(typeof ty2 !== "number" && 10 === ty2[0])
           {var rest2$9=ty2[1];return [10,trans(_biq_,rest2$9)]}
          throw [0,Assert_failure,_aY_];
         case 11:
          var switch$11=0,_bir_=ty1[1];
          if(typeof ty2 === "number")
           switch$11 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:var rest2$10=ty2[1];return [11,trans(_bir_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_aZ_];
          break;
         case 12:
          var switch$12=0,_bis_=ty1[1];
          if(typeof ty2 === "number")
           switch$12 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=ty2[1];return [12,trans(_bis_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_a0_];
          break;
         case 13:
          var switch$13=0,_bit_=ty1[1];
          if(typeof ty2 === "number")
           switch$13 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=ty2[1];return [13,trans(_bit_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_a1_];
          break;
         default:
          var switch$14=0,_biu_=ty1[1];
          if(typeof ty2 === "number")
           switch$14 = 1;
          else
           switch(ty2[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=ty2[1];return [14,trans(_biu_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_a2_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_aQ_];
        case 1:throw [0,Assert_failure,_aR_];
        case 2:throw [0,Assert_failure,_aS_];
        case 3:throw [0,Assert_failure,_aT_];
        case 4:throw [0,Assert_failure,_aU_];
        case 5:throw [0,Assert_failure,_aO_];
        case 6:throw [0,Assert_failure,_aP_];
        default:throw [0,Assert_failure,_aV_]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _bg__=function(param){return 0},
         _bg$_=function(param){return 0},
         _bha_=function(param){return 0};
        return [0,function(param){return 0},_bha_,_bg$_,_bg__]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _bhb_=function(param){var _bh6_=0;caml_call1(af,_bh6_);return 0};
          return [0,
                  function(param){var _bh5_=0;caml_call1(fa,_bh5_);return 0},
                  _bhb_,
                  ed,
                  de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _bhc_=function(param){var _bh4_=0;caml_call1(af$0,_bh4_);return 0};
          return [0,
                  function(param){var _bh3_=0;caml_call1(fa$0,_bh3_);return 0},
                  _bhc_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _bhd_=function(param){var _bh2_=0;caml_call1(af$1,_bh2_);return 0};
          return [0,
                  function(param){var _bh1_=0;caml_call1(fa$1,_bh1_);return 0},
                  _bhd_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _bhe_=function(param){var _bh0_=0;caml_call1(af$2,_bh0_);return 0};
          return [0,
                  function(param){var _bhZ_=0;caml_call1(fa$2,_bhZ_);return 0},
                  _bhe_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _bhf_=function(param){var _bhY_=0;caml_call1(af$3,_bhY_);return 0};
          return [0,
                  function(param){var _bhX_=0;caml_call1(fa$3,_bhX_);return 0},
                  _bhf_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _bhg_=function(param){var _bhW_=0;caml_call1(af$4,_bhW_);return 0};
          return [0,
                  function(param){var _bhV_=0;caml_call1(fa$4,_bhV_);return 0},
                  _bhg_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _bhh_=function(param){var _bhU_=0;caml_call1(af$5,_bhU_);return 0};
          return [0,
                  function(param){var _bhT_=0;caml_call1(fa$5,_bhT_);return 0},
                  _bhh_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _bhi_=function(param){var _bhS_=0;caml_call1(af$6,_bhS_);return 0};
          return [0,
                  function(param){var _bhR_=0;caml_call1(fa$6,_bhR_);return 0},
                  _bhi_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _bhj_=function(param){var _bhQ_=0;caml_call1(af$7,_bhQ_);return 0};
          return [0,
                  function(param){var _bhP_=0;caml_call1(fa$7,_bhP_);return 0},
                  _bhj_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           _bhk_=symm(ty1),
           ty=trans(_bhk_,ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _bhl_=
            function(param)
             {var _bhN_=0;
              caml_call1(jd,_bhN_);
              var _bhO_=0;
              caml_call1(de$8,_bhO_);
              return 0},
           _bhm_=
            function(param)
             {var _bhL_=0;
              caml_call1(ed$8,_bhL_);
              var _bhM_=0;
              caml_call1(dj,_bhM_);
              return 0},
           _bhn_=
            function(param)
             {var _bhJ_=0;
              caml_call1(ga,_bhJ_);
              var _bhK_=0;
              caml_call1(af$8,_bhK_);
              return 0};
          return [0,
                  function(param)
                   {var _bhH_=0;
                    caml_call1(fa$8,_bhH_);
                    var _bhI_=0;
                    caml_call1(ag,_bhI_);
                    return 0},
                  _bhn_,
                  _bhm_,
                  _bhl_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _bho_=function(param){var _bhG_=0;caml_call1(af$9,_bhG_);return 0};
          return [0,
                  function(param){var _bhF_=0;caml_call1(fa$9,_bhF_);return 0},
                  _bho_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _bhp_=function(param){var _bhE_=0;caml_call1(af$10,_bhE_);return 0};
          return [0,
                  function(param)
                   {var _bhD_=0;caml_call1(fa$10,_bhD_);return 0},
                  _bhp_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _bhq_=function(param){var _bhC_=0;caml_call1(af$11,_bhC_);return 0};
          return [0,
                  function(param)
                   {var _bhB_=0;caml_call1(fa$11,_bhB_);return 0},
                  _bhq_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _bhr_=function(param){var _bhA_=0;caml_call1(de$12,_bhA_);return 0},
           _bhs_=function(param){var _bhz_=0;caml_call1(ed$12,_bhz_);return 0},
           _bht_=function(param){var _bhy_=0;caml_call1(af$12,_bhy_);return 0};
          return [0,
                  function(param)
                   {var _bhx_=0;caml_call1(fa$12,_bhx_);return 0},
                  _bht_,
                  _bhs_,
                  _bhr_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _bhu_=function(param){var _bh__=0;caml_call1(de$13,_bh__);return 0},
           _bhv_=function(param){var _bh9_=0;caml_call1(ed$13,_bh9_);return 0},
           _bhw_=function(param){var _bh8_=0;caml_call1(af$13,_bh8_);return 0};
          return [0,
                  function(param)
                   {var _bh7_=0;caml_call1(fa$13,_bh7_);return 0},
                  _bhw_,
                  _bhv_,
                  _bhu_]}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?prec?[2,fmtty]:fmtty:fmtty}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt$0(counter,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            _bg4_=[2,ty_rest],
            prec_ty=fmtty_of_precision_fmtty(prec,_bg4_);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            _bg5_=[3,ty_rest$0],
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,_bg5_);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            _bg6_=[4,ty_rest$1],
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,_bg6_);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            _bg7_=[5,ty_rest$2],
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,_bg7_);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            _bg8_=[6,ty_rest$3],
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,_bg8_);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _bg9_=fmtty_of_fmt(rest$13);
           return concat_fmtty(fmtty_of_formatting_gen(fmting_gen),_bg9_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return fmtty_of_ignored_format(counter$0,ign,rest$18)}
           return caml_trampoline_return
                   (fmtty_of_ignored_format,[0,ign,rest$18]);
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    function fmtty_of_ignored_format(counter,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$0,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$1,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 2:return [14,fmtty_of_fmt(fmt)];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$2,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$3,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$4,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$5,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$6,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$7,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$8,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$9,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$10,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$11,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         case 9:var fmtty=ign[2];return concat_fmtty(fmtty,fmtty_of_fmt(fmt));
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$12,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return fmtty_of_fmt$0(counter$13,fmt)}
          return caml_trampoline_return(fmtty_of_fmt$0,[0,fmt])}}
    function fmtty_of_formatting_gen(formatting_gen)
     {if(0 === formatting_gen[0])
       {var match=formatting_gen[1],fmt=match[1];return fmtty_of_fmt(fmt)}
      var match$0=formatting_gen[1],fmt$0=match$0[1];
      return fmtty_of_fmt(fmt$0)}
    function fmtty_of_fmt(fmtty)
     {return caml_trampoline(fmtty_of_fmt$0(0,fmtty))}
    var Type_mismatch=[248,_a3_,caml_fresh_oo_id(0)];
    function type_padding(pad,fmtty)
     {if(typeof pad === "number")
       return [0,0,fmtty];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],fmtty]}
        if(typeof fmtty !== "number" && 2 === fmtty[0])
         {var rest=fmtty[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _bg3_=match[2];
          if(typeof _bg3_ !== "number" && 2 === _bg3_[0])
           {var rest=_bg3_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,fmtty)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,fmtty)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             sub_fmtty_rest=sub_fmtty[1],
             match=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match[2],
             sub_fmtty_rest$0=match[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$0[2],
             sub_fmtty_rest$2=match$0[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$1=fmtty[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$1[2],
             sub_fmtty_rest$4=match$1[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof fmtty !== "number" && 3 === fmtty[0])
           {var
             fmtty_rest$2=fmtty[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$2[2],
             sub_fmtty_rest$6=match$2[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof fmtty !== "number" && 4 === fmtty[0])
           {var
             fmtty_rest$3=fmtty[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$3[2],
             sub_fmtty_rest$8=match$3[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof fmtty !== "number" && 5 === fmtty[0])
           {var
             fmtty_rest$4=fmtty[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$4[2],
             sub_fmtty_rest$10=match$4[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof fmtty !== "number" && 6 === fmtty[0])
           {var
             fmtty_rest$5=fmtty[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$5[2],
             sub_fmtty_rest$12=match$5[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$6=fmtty[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$6[2],
             sub_fmtty_rest$14=match$6[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$7=fmtty[2],
             sub2_fmtty=fmtty[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1],
             _bgT_=[0,sub2_fmtty],
             _bgU_=[0,sub2_fmtty$0];
            if(caml_notequal(_bgU_,_bgT_))throw Type_mismatch;
            var
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$7[2],
             sub_fmtty_rest$16=match$7[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[3],
             sub2_fmtty$1=fmtty[2],
             sub1_fmtty=fmtty[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _bgV_=[0,erase_rel(sub1_fmtty)],
             _bgW_=[0,erase_rel(sub1_fmtty$0)];
            if(caml_notequal(_bgW_,_bgV_))throw Type_mismatch;
            var
             _bgX_=[0,erase_rel(sub2_fmtty$1)],
             _bgY_=[0,erase_rel(sub2_fmtty$2)];
            if(caml_notequal(_bgY_,_bgX_))throw Type_mismatch;
            var
             _bgZ_=symm(sub1_fmtty),
             sub_fmtty$0=trans(_bgZ_,sub2_fmtty$1),
             match$8=fmtty_rel_det(sub_fmtty$0),
             f4=match$8[4],
             f2=match$8[2],
             _bg0_=0;
            caml_call1(f2,_bg0_);
            var _bg1_=0;
            caml_call1(f4,_bg1_);
            var
             _bg2_=erase_rel(sub_fmtty_rest$17),
             match$9=type_ignored_format_substituti(_bg2_,fmt,fmtty_rest$8),
             fmt$9=match$9[2],
             sub_fmtty_rest$18=match$9[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$10=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$10[2],
             sub_fmtty_rest$20=match$10[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$11[2],
             sub_fmtty_rest$22=match$11[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$12[2],
             sub_fmtty_rest$24=match$12[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$13[2],
             sub_fmtty_rest$26=match$13[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _bgz_=match$1[2],
           _bgy_=match$1[1];
          if(typeof _bgz_ !== "number" && 1 === _bgz_[0])
           {var
             fmtty_rest$1=_bgz_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_bgy_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _bgB_=match$3[2],
           _bgA_=match$3[1];
          if(typeof _bgB_ !== "number" && 1 === _bgB_[0])
           {var
             fmtty_rest$2=_bgB_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_bgA_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _bgD_=match$5[3],
           _bgC_=match$5[1];
          if(typeof _bgD_ !== "number" && 2 === _bgD_[0])
           {var
             fmtty_rest$3=_bgD_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_bgC_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _bgF_=match$7[3],
           _bgE_=match$7[1];
          if(typeof _bgF_ !== "number" && 3 === _bgF_[0])
           {var
             fmtty_rest$4=_bgF_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_bgE_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _bgH_=match$9[3],
           _bgG_=match$9[1];
          if(typeof _bgH_ !== "number" && 4 === _bgH_[0])
           {var
             fmtty_rest$5=_bgH_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_bgG_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _bgJ_=match$11[3],
           _bgI_=match$11[1];
          if(typeof _bgJ_ !== "number" && 5 === _bgJ_[0])
           {var
             fmtty_rest$6=_bgJ_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_bgI_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _bgL_=match$13[3],
           _bgK_=match$13[1];
          if(typeof _bgL_ !== "number" && 6 === _bgL_[0])
           {var
             fmtty_rest$7=_bgL_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_bgK_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _bgN_=match$15[2],
           _bgM_=match$15[1];
          if(typeof _bgN_ !== "number" && 7 === _bgN_[0])
           {var
             fmtty_rest$8=_bgN_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_bgM_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1],
             _bgO_=[0,sub_fmtty],
             _bgP_=[0,sub_fmtty$0];
            if(caml_notequal(_bgP_,_bgO_))throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _bgQ_=[0,erase_rel(sub_fmtty1)],
             _bgR_=[0,erase_rel(sub_fmtty$1)];
            if(caml_notequal(_bgR_,_bgQ_))throw Type_mismatch;
            var
             _bgS_=erase_rel(fmtty_rest$10),
             match$21=type_format_gen(fmt_rest$13,_bgS_),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          return type_formatting_gen(formatting_gen,fmt_rest$17,fmtty);
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];return type_ignored_param(ign,rest,fmtty)
         }
      throw Type_mismatch}
    function type_formatting_gen(formatting_gen,fmt0,fmtty0)
     {if(0 === formatting_gen[0])
       {var
         match=formatting_gen[1],
         str=match[2],
         fmt1=match[1],
         match$0=type_format_gen(fmt1,fmtty0),
         fmtty2=match$0[2],
         fmt2=match$0[1],
         match$1=type_format_gen(fmt0,fmtty2),
         fmtty3=match$1[2],
         fmt3=match$1[1];
        return [0,[18,[0,[0,fmt2,str]],fmt3],fmtty3]}
      var
       match$2=formatting_gen[1],
       str$0=match$2[2],
       fmt1$0=match$2[1],
       match$3=type_format_gen(fmt1$0,fmtty0),
       fmtty2$0=match$3[2],
       fmt2$0=match$3[1],
       match$4=type_format_gen(fmt0,fmtty2$0),
       fmtty3$0=match$4[2],
       fmt3$0=match$4[1];
      return [0,[18,[1,[0,fmt2$0,str$0]],fmt3$0],fmtty3$0]}
    function type_ignored_param(ign,fmt,fmtty)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return type_ignored_param_one(ign,fmt,fmtty);
         case 1:return type_ignored_param_one(ign,fmt,fmtty);
         case 2:
          if(typeof fmtty !== "number" && 14 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             match=type_format_gen(fmt,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[23,2,fmt$0],fmtty$0]}
          throw Type_mismatch;
         default:return type_ignored_param_one(ign,fmt,fmtty)}
      else
       switch(ign[0])
        {case 0:return type_ignored_param_one(ign,fmt,fmtty);
         case 1:return type_ignored_param_one(ign,fmt,fmtty);
         case 2:return type_ignored_param_one(ign,fmt,fmtty);
         case 3:return type_ignored_param_one(ign,fmt,fmtty);
         case 4:return type_ignored_param_one(ign,fmt,fmtty);
         case 5:return type_ignored_param_one(ign,fmt,fmtty);
         case 6:return type_ignored_param_one(ign,fmt,fmtty);
         case 7:return type_ignored_param_one(ign,fmt,fmtty);
         case 8:
          var sub_fmtty=ign[2],pad_opt=ign[1];
          return type_ignored_param_one([8,pad_opt,sub_fmtty],fmt,fmtty);
         case 9:
          var
           sub_fmtty$0=ign[2],
           pad_opt$0=ign[1],
           _bgx_=type_ignored_format_substituti(sub_fmtty$0,fmt,fmtty),
           match$0=_bgx_[2],
           fmtty$1=match$0[2],
           fmt$1=match$0[1],
           sub_fmtty$1=_bgx_[1];
          return [0,[23,[9,pad_opt$0,sub_fmtty$1],fmt$1],fmtty$1];
         case 10:return type_ignored_param_one(ign,fmt,fmtty);
         default:return type_ignored_param_one(ign,fmt,fmtty)}}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format(fmt,fmtty)
     {var _bgw_=type_format_gen(fmt,fmtty);
      if(typeof _bgw_[2] === "number"){var fmt$0=_bgw_[1];return fmt$0}
      throw Type_mismatch}
    function recast(fmt,fmtty)
     {var _bgv_=symm(fmtty);return type_format(fmt,erase_rel(_bgv_))}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _bgg_=2 === padty$0?48:32,res=make$0(width$0,_bgg_);
      switch(padty$0)
       {case 0:var _bgh_=0,_bgi_=0;blit$0(str,_bgi_,res,_bgh_,len);break;
        case 1:
         var _bgj_=width$0 - len | 0,_bgk_=0;
         blit$0(str,_bgk_,res,_bgj_,len);
         break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {var _bgl_=caml_string_get(str,0);
             caml_bytes_set(res,0,_bgl_);
             var _bgm_=len - 1 | 0,_bgn_=(width$0 - len | 0) + 1 | 0,_bgo_=1;
             blit$0(str,_bgo_,res,_bgn_,_bgm_)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {var _bgp_=caml_string_get(str,1);
               caml_bytes_set(res,1,_bgp_);
               var
                _bgq_=len - 2 | 0,
                _bgr_=(width$0 - len | 0) + 2 | 0,
                _bgs_=2;
               blit$0(str,_bgs_,res,_bgr_,_bgq_)}}
           else
            switch$2 = 1;
           if(switch$2)
            {var _bgt_=width$0 - len | 0,_bgu_=0;
             blit$0(str,_bgu_,res,_bgt_,len)}}}
      return usob(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < c - 97 >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          switch(c - 43 | 0)
           {case 5:
             if(len < (prec$0 + 2 | 0) && 1 < len)
              {var switch$2=0;
               if
                (120
                 ===
                 caml_string_get(str,1)
                 ||
                 88
                 ===
                 caml_string_get(str,1))
                switch$2 = 1;
               if(switch$2)
                {var
                  _bga_=48,
                  _bgb_=prec$0 + 2 | 0,
                  res$1=make$0(_bgb_,_bga_),
                  _bgc_=caml_string_get(str,1);
                 caml_bytes_set(res$1,1,_bgc_);
                 var
                  _bgd_=len - 2 | 0,
                  _bge_=(prec$0 - len | 0) + 4 | 0,
                  _bgf_=2;
                 blit$0(str,_bgf_,res$1,_bge_,_bgd_);
                 return usob(res$1)}}
             switch$0 = 1;
             switch$1 = 1;
             break;
            case 0:
            case 2:break;
            case 1:
            case 3:
            case 4:switch$1 = 1;break;
            default:switch$0 = 1;switch$1 = 1}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var _bf7_=48,_bf8_=prec$0 + 1 | 0,res$0=make$0(_bf8_,_bf7_);
          caml_bytes_set(res$0,0,c);
          var _bf9_=len - 1 | 0,_bf__=(prec$0 - len | 0) + 2 | 0,_bf$_=1;
          blit$0(str,_bf$_,res$0,_bf__,_bf9_);
          return usob(res$0)}}
      if(switch$0 && len < prec$0)
       {var _bf4_=48,res=make$0(prec$0,_bf4_),_bf5_=prec$0 - len | 0,_bf6_=0;
        blit$0(str,_bf6_,res,_bf5_,len);
        return usob(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped$1(str),
       l=caml_ml_string_length(str$0),
       _bf2_=34,
       _bf3_=l + 2 | 0,
       res=make$0(_bf3_,_bf2_);
      caml_blit_string(str$0,0,res,1,l);
      return usob(res)}
    function format_of_iconv(param)
     {switch(param)
       {case 1:return _a5_;
        case 2:return _a6_;
        case 4:return _a8_;
        case 5:return _a9_;
        case 6:return _a__;
        case 7:return _a$_;
        case 8:return _ba_;
        case 9:return _bb_;
        case 10:return _bc_;
        case 11:return _bd_;
        case 0:
        case 13:return _a4_;
        case 3:
        case 14:return _a7_;
        default:return _be_}}
    function format_of_iconvL(param)
     {switch(param)
       {case 1:return _bg_;
        case 2:return _bh_;
        case 4:return _bj_;
        case 5:return _bk_;
        case 6:return _bl_;
        case 7:return _bm_;
        case 8:return _bn_;
        case 9:return _bo_;
        case 10:return _bp_;
        case 11:return _bq_;
        case 0:
        case 13:return _bf_;
        case 3:
        case 14:return _bi_;
        default:return _br_}}
    function format_of_iconvl(param)
     {switch(param)
       {case 1:return _bt_;
        case 2:return _bu_;
        case 4:return _bw_;
        case 5:return _bx_;
        case 6:return _by_;
        case 7:return _bz_;
        case 8:return _bA_;
        case 9:return _bB_;
        case 10:return _bC_;
        case 11:return _bD_;
        case 0:
        case 13:return _bs_;
        case 3:
        case 14:return _bv_;
        default:return _bE_}}
    function format_of_iconvn(param)
     {switch(param)
       {case 1:return _bG_;
        case 2:return _bH_;
        case 4:return _bJ_;
        case 5:return _bK_;
        case 6:return _bL_;
        case 7:return _bM_;
        case 8:return _bN_;
        case 9:return _bO_;
        case 10:return _bP_;
        case 11:return _bQ_;
        case 0:
        case 13:return _bF_;
        case 3:
        case 14:return _bI_;
        default:return _bR_}}
    function format_of_fconv(fconv,prec)
     {var
       prec$0=abs(prec),
       symb=char_of_fconv(_bS_,fconv),
       _bfY_=16,
       buf=buffer_create(_bfY_),
       _bfZ_=37;
      buffer_add_char(buf,_bfZ_);
      bprint_fconv_flag(buf,fconv);
      var _bf0_=46;
      buffer_add_char(buf,_bf0_);
      var _bf1_=to_string$1(prec$0);
      buffer_add_string(buf,_bf1_);
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_bfQ_=caml_ml_string_length(s) - 1 | 0,_bfP_=0;
        if(! (_bfQ_ < 0))
         {var i$0=_bfP_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0);
            if(! (9 < match - 48 >>> 0))n[1]++;
            var _bfW_=i$0 + 1 | 0;
            if(_bfQ_ !== i$0){var i$0=_bfW_;continue}
            break}}
        var
         digits=n[1],
         _bfR_=caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0,
         buf=caml_create_bytes(_bfR_),
         pos=[0,0],
         put=
          function(c)
           {var _bfX_=pos[1];caml_bytes_set(buf,_bfX_,c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _bfT_=caml_ml_string_length(s) - 1 | 0,
         _bfS_=0;
        if(! (_bfT_ < 0))
         {var i=_bfS_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i);
            if(9 < c - 48 >>> 0)
             put(c);
            else
             {if(0 === left[1]){var _bfV_=95;put(_bfV_);left[1] = 3}
              left[1] += -1;
              put(c)}
            var _bfU_=i + 1 | 0;
            if(_bfT_ !== i){var i=_bfU_;continue}
            break}}
        return usob(buf)}
      return s}
    function convert_int(iconv,n)
     {var _bfO_=format_of_iconv(iconv);
      return transform_int_alt(iconv,caml_format_int(_bfO_,n))}
    function convert_int32(iconv,n)
     {var _bfN_=format_of_iconvl(iconv);
      return transform_int_alt(iconv,caml_format_int(_bfN_,n))}
    function convert_nativeint(iconv,n)
     {var _bfM_=format_of_iconvn(iconv);
      return transform_int_alt(iconv,caml_format_int(_bfM_,n))}
    function convert_int64(iconv,n)
     {var _bfL_=format_of_iconvL(iconv);
      return transform_int_alt(iconv,caml_int64_format(_bfL_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function add_dot_if_needed(str)
       {var len=caml_ml_string_length(str);
        function is_valid(i)
         {var i$0=i;
          for(;;)
           {if(i$0 === len)return 0;
            var
             match=caml_string_get(str,i$0),
             _bfK_=match - 46 | 0,
             switch$0=0;
            if(23 < _bfK_ >>> 0)
             {if(55 === _bfK_)switch$0 = 1}
            else
             if(21 < _bfK_ - 1 >>> 0)switch$0 = 1;
            if(switch$0)return 1;
            var i$1=i$0 + 1 | 0,i$0=i$1;
            continue}}
        var _bfJ_=0;
        return is_valid(_bfJ_)?str:cat(str,_bT_)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_bU_:_bV_:4 <= match?_bW_:str}
      switch(fconv[2])
       {case 5:
         var _bfG_=format_of_fconv(fconv,prec),str=caml_format_float(_bfG_,x);
         return caml_special_val(add_dot_if_needed(str));
        case 6:return hex(0);
        case 7:var _bfH_=0;return uppercase_ascii$1(hex(_bfH_));
        case 8:var _bfI_=0;return caml_special_val(hex(_bfI_));
        default:
         var _bfF_=format_of_fconv(fconv,prec);
         return caml_format_float(_bfF_,x)}}
    function format_caml_char(c)
     {var
       str=escaped(c),
       l=caml_ml_string_length(str),
       _bfD_=39,
       _bfE_=l + 2 | 0,
       res=make$0(_bfE_,_bfD_);
      caml_blit_string(str,0,res,1,l);
      return usob(res)}
    function string_of_fmtty(fmtty)
     {var _bfC_=16,buf=buffer_create(_bfC_);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var new_acc=[4,acc$0,format_caml_char(c)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           return make_float_padding_precision
                   (k$0,acc$0,rest$7,pad$5,prec$3,fconv);
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1],_bfB_=recast(fmt,fmtty);
             return make_printf(k$0,acc$0,concat_fmt(_bfB_,rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _bfy_=fmt$0[1];
           if(0 === _bfy_[0])
            {var
              rest$13=fmt$0[2],
              match=_bfy_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_bfy_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bX_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bY_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bZ_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return make_ignored_param(counter$1,k$0,acc$0,ign,rest$18)}
           return caml_trampoline_return
                   (make_ignored_param,[0,k$0,acc$0,ign,rest$18]);
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _bfz_=0,
            _bfA_=caml_call1(f,_bfz_);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_bfA_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_bfA_])}}
    function make_ignored_param(counter,k,acc,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return make_invalid_arg(counter$0,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return make_invalid_arg(counter$1,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:throw [0,Assert_failure,_b0_];
         default:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return make_invalid_arg(counter$2,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return make_invalid_arg(counter$3,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 1:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return make_invalid_arg(counter$4,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 2:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return make_invalid_arg(counter$5,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 3:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return make_invalid_arg(counter$6,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 4:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return make_invalid_arg(counter$7,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 5:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return make_invalid_arg(counter$8,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 6:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return make_invalid_arg(counter$9,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 7:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return make_invalid_arg(counter$10,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 8:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return make_invalid_arg(counter$11,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return make_from_fmtty$0(counter$14,k,acc,fmtty,fmt)}
          return caml_trampoline_return(make_from_fmtty$0,[0,k,acc,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return make_invalid_arg(counter$12,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt]);
         default:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return make_invalid_arg(counter$13,k,acc,fmt)}
          return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           _bfw_=symm(ty1),
           ty=trans(_bfw_,ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_bfx_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_b1_];
         default:throw [0,Assert_failure,_b2_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _bfv_=[8,acc,_b3_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_bfv_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_bfv_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _bfu_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_bfu_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_bfu_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var
             _bft_=caml_call1(trans,x),
             new_acc=[4,acc,fix_padding(padty,width,_bft_)];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var
           _bfs_=caml_call1(trans,x),
           new_acc=[4,acc,fix_padding(padty$0,w,_bfs_)];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,prec,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var
                     _bfh_=caml_call2(trans,iconv,x),
                     str=fix_int_precision(p,_bfh_);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var _bfg_=caml_call2(trans,iconv,x),str=fix_int_precision(p,_bfg_);
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _bfd_=pad[2],_bfe_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var
                       _bfp_=caml_call2(trans,iconv,x),
                       _bfq_=fix_int_precision(p,_bfp_),
                       str=fix_padding(_bfe_,_bfd_,_bfq_);
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var
                       _bfr_=caml_call2(trans,iconv,x),
                       str=fix_padding(_bfe_,_bfd_,_bfr_);
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=prec[1];
          return function(x)
           {var
             _bfn_=caml_call2(trans,iconv,x),
             _bfo_=fix_int_precision(p$0,_bfn_),
             str=fix_padding(_bfe_,_bfd_,_bfo_);
            return make_printf(k,[4,acc,str],fmt)}}
        var _bff_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var
                     _bfk_=caml_call2(trans,iconv,x),
                     _bfl_=fix_int_precision(p,_bfk_),
                     str=fix_padding(_bff_,w,_bfl_);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var
                     _bfm_=caml_call2(trans,iconv,x),
                     str=fix_padding(_bff_,w,_bfm_);
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var
           _bfi_=caml_call2(trans,iconv,x),
           _bfj_=fix_int_precision(p$1,_bfi_),
           str=fix_padding(_bff_,w,_bfj_);
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_float_padding_precision(k,acc,fmt,pad,prec,fconv)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         return prec
                 ?function(p,x)
                   {var str=convert_float(fconv,p,x);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var
                     _be8_=default_float_precision(fconv),
                     str=convert_float(fconv,_be8_,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=prec[1];
        return function(x)
         {var str=convert_float(fconv,p,x);
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _be5_=pad[2],_be6_=pad[1];
          if(typeof prec === "number")
           return prec
                   ?function(p,x)
                     {var
                       _bfb_=convert_float(fconv,p,x),
                       str=fix_padding(_be6_,_be5_,_bfb_);
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var
                       _bfc_=default_float_precision(fconv),
                       str=convert_float(fconv,_bfc_,x),
                       str$0=fix_padding(_be6_,_be5_,str);
                      return make_printf(k,[4,acc,str$0],fmt)};
          var p$0=prec[1];
          return function(x)
           {var
             _bfa_=convert_float(fconv,p$0,x),
             str=fix_padding(_be6_,_be5_,_bfa_);
            return make_printf(k,[4,acc,str],fmt)}}
        var _be7_=pad[1];
        if(typeof prec === "number")
         return prec
                 ?function(w,p,x)
                   {var
                     _be__=convert_float(fconv,p,x),
                     str=fix_padding(_be7_,w,_be__);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var
                     _be$_=default_float_precision(fconv),
                     str=convert_float(fconv,_be$_,x),
                     str$0=fix_padding(_be7_,w,str);
                    return make_printf(k,[4,acc,str$0],fmt)};
        var p$1=prec[1];
        return function(w,x)
         {var _be9_=convert_float(fconv,p$1,x),str=fix_padding(_be7_,w,_be9_);
          return make_printf(k,[4,acc,str],fmt)}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _be3_=acc$0[2],_be4_=acc$0[1];
           if(0 === _be3_[0])
            {var acc$1=_be3_[1];
             output_acc(o,_be4_);
             output_string(o,_b4_);
             var acc$0=acc$1;
             continue}
           var acc$2=_be3_[1];
           output_acc(o,_be4_);
           output_string(o,_b5_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _be0_=acc$0[2],_be1_=acc$0[1];
           if(0 === _be0_[0])
            {var acc$1=_be0_[1];
             strput_acc(b,_be1_);
             add_string(b,_b6_);
             var acc$0=acc$1;
             continue}
           var acc$2=_be0_[1];
           strput_acc(b,_be1_);
           add_string(b,_b7_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           var _be2_=0;
           return add_string(b,caml_call1(f,_be2_));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],_beZ_=256,buf=create$1(_beZ_);
      function k(acc){strput_acc(buf,acc);return failwith(contents(buf))}
      return make_printf(k,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,_b8_))return _b9_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_b__),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0);
          if(25 < match - 97 >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       _beP_=0,
       wstart=parse_spaces(_beP_),
       wend=parse_lword(wstart,wstart),
       _beQ_=wend - wstart | 0,
       box_name=sub$0(str,wstart,_beQ_),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _beV_=nend - nstart | 0,
          _beW_=sub$0(str,nstart,_beV_),
          _beX_=caml_int_of_string(_beW_),
          indent=_beX_}
       catch(_beY_)
        {_beY_ = caml_wrap_exception(_beY_);
         if(_beY_[1] !== Failure)throw _beY_;
         var _beT_=0,_beU_=invalid_box(_beT_),indent=_beU_}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len){var _beR_=0;invalid_box(_beR_)}
      var switch$0=0;
      if
       (caml_string_notequal(box_name,_b$_)
        &&
        caml_string_notequal(box_name,_ca_))
       if(caml_string_notequal(box_name,_cb_))
        if(caml_string_notequal(box_name,_cc_))
         if(caml_string_notequal(box_name,_cd_))
          if(caml_string_notequal(box_name,_ce_))
           var _beS_=0,box_type=invalid_box(_beS_);
          else
           var box_type=1;
         else
          var box_type=2;
        else
         var box_type=3;
       else
        var box_type=0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_precision_fmt_ebb(prec,fmt)
     {if(typeof prec === "number")return prec?[0,1,fmt]:[0,0,fmt];
      var p=prec[1];
      return [0,[0,p],fmt]}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {var
       match=make_precision_fmt_ebb(prec,fmt),
       fmt$0=match[2],
       prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt$0];
      else
       {if(0 === pad[0])
         {var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt$0]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt$0]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_cf_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,_cg_)}
      function invalid_nonnull_char_width(str_ind)
       {return invalid_format_message(str_ind,_ch_)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_ci_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_cj_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0);
          if(9 < c - 48 >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_string_length < acc$1)
           return caml_call3
                   (failwith_message(_cS_),str,acc$1,max_string_length);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var _beM_=str_ind + 1 | 0,c=caml_string_get(str,_beM_);
           if(9 < c - 48 >>> 0)
            return expected_character(str_ind + 1 | 0,_cU_,c);
           var
            _beN_=0,
            _beO_=str_ind + 1 | 0,
            match$0=parse_positive(_beO_,end_ind,_beN_),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_cT_]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var _beL_=str_ind - pct_ind | 0,subfmt=sub$0(str,pct_ind,_beL_);
        return caml_call5
                (failwith_message(_c6_),str,pct_ind,option,symb,subfmt)}
      function compute_float_conv(pct_ind,str_ind,plus,hash,space,symb)
       {if(plus)
         if(space && ! legacy_behavior$0)
          var _beK_=32,flag=incompatible_flag(pct_ind,str_ind,_beK_,_c5_);
         else
          var flag=1;
        else
         var flag=space?2:0;
        var switch$0=0;
        if(73 <= symb)
         {var switcher=symb - 101 | 0;
          if(3 < switcher >>> 0)
           switch$0 = 1;
          else
           {switch(switcher)
             {case 0:var _beI_=1;break;
              case 1:var _beI_=0;break;
              case 2:var _beI_=3;break;
              default:var _beI_=6}
            var kind=_beI_}}
        else
         if(69 <= symb)
          {var switch$1=0;
           switch(symb - 69 | 0)
            {case 0:var _beJ_=2;break;
             case 1:switch$0 = 1;switch$1 = 1;break;
             case 2:var _beJ_=4;break;
             default:var _beJ_=7}
           if(! switch$1)var kind=_beJ_}
         else
          switch$0 = 1;
        if(switch$0)
         {var switch$2=0;
          if(hash)
           if(70 === symb)var kind=8;else switch$2 = 1;
          else
           if(70 === symb)var kind=5;else switch$2 = 1;
          if(switch$2)throw [0,Assert_failure,_c4_]}
        return [0,flag,kind]}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(plus$0)
           {if(hash$0)
             switch$0 = 1;
            else
             if(! space$0){if(100 === symb)return 1;if(105 === symb)return 4}}
          else
           if(hash$0)
            if(space$0)
             switch$0 = 1;
            else
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
           else
            if(space$0)
             {if(100 === symb)return 2;if(105 === symb)return 5}
            else
             {var switcher$1=symb - 88 | 0;
              if(! (32 < switcher$1 >>> 0))
               switch(switcher$1)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
          if(switch$0)
           {var switcher=symb - 88 | 0;
            if(! (32 < switcher >>> 0))
             switch(switcher)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,_c3_)
               }}
          if(plus$0)
           {if(space$0)
             {if(legacy_behavior$0){var space$0=0;continue}
              return incompatible_flag(pct_ind,str_ind,32,_cZ_)}
            if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,_c0_)}
          if(space$0)
           {if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,_c1_)}
          throw [0,Assert_failure,_c2_]}}
      function counter_of_char(symb)
       {if(108 <= symb)
         {if(! (111 <= symb))
           switch(symb - 108 | 0)
            {case 0:return 0;case 1:break;default:return 1}}
        else
         if(76 === symb)return 2;
        throw [0,Assert_failure,_cY_]}
      function is_int_base(symb)
       {var _beH_=symb - 88 | 0;
        if(! (32 < _beH_ >>> 0))
         switch(_beH_)
          {case 0:case 12:case 17:case 23:case 29:case 32:return 1}
        return 0}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_cV_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            var _bew_=str_ind$0 + 1 | 0;
            if(caml_string_get(str,_bew_) === c)return str_ind$0;
            var _bex_=str_ind$0 + 1 | 0,match$0=caml_string_get(str,_bex_);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 switch(match$0 - 123 | 0)
                  {case 0:
                    var
                     _bey_=125,
                     _bez_=str_ind$0 + 2 | 0,
                     sub_end=search_subformat_end(_bez_,end_ind,_bey_),
                     str_ind$2=sub_end + 2 | 0,
                     str_ind$0=str_ind$2;
                    continue;
                   case 1:break;
                   default:
                    return expected_character(str_ind$0 + 1 | 0,_cW_,125)}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var
                  _beA_=str_ind$0 + 2 | 0,
                  match$1=caml_string_get(str,_beA_);
                 if(40 === match$1)
                  {var
                    _beB_=41,
                    _beC_=str_ind$0 + 3 | 0,
                    sub_end$0=search_subformat_end(_beC_,end_ind,_beB_),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    _beD_=125,
                    _beE_=str_ind$0 + 3 | 0,
                    sub_end$1=search_subformat_end(_beE_,end_ind,_beD_),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 _beF_=41,
                 _beG_=str_ind$0 + 2 | 0,
                 sub_end$2=search_subformat_end(_beG_,end_ind,_beF_),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,_cX_,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function parse_char_set(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var _bej_=0,char_set=create_char_set(_bej_);
        function add_char(c){return add_in_char_set(char_set,c)}
        function add_range(c$0,c)
         {if(! (c < c$0))
           {var i=c$0;
            for(;;)
             {var _beu_=char_of_int(i);
              add_in_char_set(char_set,_beu_);
              var _bev_=i + 1 | 0;
              if(c !== i){var i=_bev_;continue}
              break}}
          return 0}
        function fail_single_percent(str_ind)
         {return caml_call2(failwith_message(_cR_),str,str_ind)}
        function parse_char_set_content(counter,str_ind,end_ind)
         {var str_ind$0=str_ind;
          for(;;)
           {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
            var c=caml_string_get(str,str_ind$0);
            if(45 === c)
             {var _bes_=45;
              add_char(_bes_);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue}
            if(93 === c)return str_ind$0 + 1 | 0;
            var _bet_=str_ind$0 + 1 | 0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return parse_char_set_after_char$0(counter$0,_bet_,end_ind,c)}
            return caml_trampoline_return
                    (parse_char_set_after_char$0,[0,_bet_,end_ind,c])}}
        function parse_char_set_after_char$0(counter,str_ind,end_ind,c)
         {var str_ind$0=str_ind,c$0=c;
          for(;;)
           {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
            var c$1=caml_string_get(str,str_ind$0),switch$0=0;
            if(46 <= c$1)
             {if(64 === c$1)
               switch$0 = 1;
              else
               if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
            else
             if(37 === c$1)
              switch$0 = 1;
             else
              if(45 <= c$1)
               {var _ber_=str_ind$0 + 1 | 0;
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return parse_char_set_after_minus
                          (counter$0,_ber_,end_ind,c$0)}
                return caml_trampoline_return
                        (parse_char_set_after_minus,[0,_ber_,end_ind,c$0])}
            if(switch$0 && 37 === c$0)
             {add_char(c$1);
              var _beq_=str_ind$0 + 1 | 0;
              if(counter < 50)
               {var counter$1=counter + 1 | 0;
                return parse_char_set_content(counter$1,_beq_,end_ind)}
              return caml_trampoline_return
                      (parse_char_set_content,[0,_beq_,end_ind])}
            if(37 === c$0)fail_single_percent(str_ind$0);
            add_char(c$0);
            var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
            continue}}
        function parse_char_set_after_minus(counter,str_ind,end_ind,c)
         {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
          var c$0=caml_string_get(str,str_ind);
          if(37 === c$0)
           {if((str_ind + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            var _bem_=str_ind + 1 | 0,c$1=caml_string_get(str,_bem_);
            if(37 !== c$1 && 64 !== c$1)return fail_single_percent(str_ind);
            add_range(c,c$1);
            var _ben_=str_ind + 2 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return parse_char_set_content(counter$1,_ben_,end_ind)}
            return caml_trampoline_return
                    (parse_char_set_content,[0,_ben_,end_ind])}
          if(93 === c$0)
           {add_char(c);var _beo_=45;add_char(_beo_);return str_ind + 1 | 0}
          add_range(c,c$0);
          var _bep_=str_ind + 1 | 0;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return parse_char_set_content(counter$0,_bep_,end_ind)}
          return caml_trampoline_return
                  (parse_char_set_content,[0,_bep_,end_ind])}
        function parse_char_set_after_char(str_ind,end_ind,c)
         {return caml_trampoline
                  (parse_char_set_after_char$0(0,str_ind,end_ind,c))}
        function parse_char_set_start(str_ind,end_ind)
         {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind);
          return parse_char_set_after_char(str_ind + 1 | 0,end_ind,c)}
        if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(94 === match)
         var
          str_ind$0=str_ind + 1 | 0,
          reverse=1,
          reverse$0=reverse,
          str_ind$1=str_ind$0;
        else
         var _bel_=0,reverse$0=_bel_,str_ind$1=str_ind;
        var
         next_ind=parse_char_set_start(str_ind$1,end_ind),
         char_set$0=freeze_char_set(char_set),
         _bek_=reverse$0?rev_char_set(char_set$0):char_set$0;
        return [0,next_ind,_bek_]}
      function parse_after_at(str_ind,end_ind)
       {if(str_ind === end_ind)return _cN_;
        var c=caml_string_get(str,str_ind);
        if(65 <= c)
         {if(94 <= c)
           {var switcher=c - 123 | 0;
            if(! (2 < switcher >>> 0))
             switch(switcher)
              {case 0:return parse_tag(1,str_ind + 1 | 0,end_ind);
               case 1:break;
               default:
                var
                 _bd$_=str_ind + 1 | 0,
                 match$0=parse(_bd$_,end_ind),
                 fmt_rest$0=match$0[1];
                return [0,[17,1,fmt_rest$0]]}}
          else
           if(91 <= c)
            switch(c - 91 | 0)
             {case 0:return parse_tag(0,str_ind + 1 | 0,end_ind);
              case 1:break;
              default:
               var
                _bea_=str_ind + 1 | 0,
                match$1=parse(_bea_,end_ind),
                fmt_rest$1=match$1[1];
               return [0,[17,0,fmt_rest$1]]}}
        else
         {if(10 === c)
           {var
             _beb_=str_ind + 1 | 0,
             match$2=parse(_beb_,end_ind),
             fmt_rest$2=match$2[1];
            return [0,[17,3,fmt_rest$2]]}
          if(32 <= c)
           switch(c - 32 | 0)
            {case 0:
              var
               _bec_=str_ind + 1 | 0,
               match$3=parse(_bec_,end_ind),
               fmt_rest$3=match$3[1];
              return [0,[17,_cO_,fmt_rest$3]];
             case 5:
              if((str_ind + 1 | 0) < end_ind)
               {var _bed_=str_ind + 1 | 0;
                if(37 === caml_string_get(str,_bed_))
                 {var
                   _bee_=str_ind + 2 | 0,
                   match$4=parse(_bee_,end_ind),
                   fmt_rest$4=match$4[1];
                  return [0,[17,6,fmt_rest$4]]}}
              var match$5=parse(str_ind,end_ind),fmt_rest$5=match$5[1];
              return [0,[12,64,fmt_rest$5]];
             case 12:
              var
               _bef_=str_ind + 1 | 0,
               match$6=parse(_bef_,end_ind),
               fmt_rest$6=match$6[1];
              return [0,[17,_cP_,fmt_rest$6]];
             case 14:
              var
               _beg_=str_ind + 1 | 0,
               match$7=parse(_beg_,end_ind),
               fmt_rest$7=match$7[1];
              return [0,[17,4,fmt_rest$7]];
             case 27:return parse_good_break(str_ind + 1 | 0,end_ind);
             case 28:return parse_magic_size(str_ind + 1 | 0,end_ind);
             case 31:
              var
               _beh_=str_ind + 1 | 0,
               match$8=parse(_beh_,end_ind),
               fmt_rest$8=match$8[1];
              return [0,[17,2,fmt_rest$8]];
             case 32:
              var
               _bei_=str_ind + 1 | 0,
               match$9=parse(_bei_,end_ind),
               fmt_rest$9=match$9[1];
              return [0,[17,5,fmt_rest$9]]
             }}
        var
         _bd__=str_ind + 1 | 0,
         match=parse(_bd__,end_ind),
         fmt_rest=match[1];
        return [0,[17,[2,c],fmt_rest]]}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var
             _bd3_=62,
             _bd4_=str_ind + 1 | 0,
             ind=index_from(str,_bd4_,_bd3_);
            if(end_ind <= ind)throw Not_found;
            var
             _bd5_=(ind - str_ind | 0) + 1 | 0,
             sub_str=sub$0(str,str_ind,_bd5_),
             _bd6_=ind + 1 | 0,
             match$1=parse(_bd6_,end_ind),
             fmt_rest$0=match$1[1],
             _bd7_=ind + 1 | 0,
             match$2=parse(str_ind,_bd7_),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str],
             formatting$0=is_open_tag?[0,sub_format$0]:[1,sub_format$0],
             _bd8_=[0,[18,formatting$0,fmt_rest$0]];
            return _bd8_}
          throw Not_found}
        catch(_bd9_)
         {_bd9_ = caml_wrap_exception(_bd9_);
          if(_bd9_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _bd9_}}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _bdR_=str_ind === end_ind?1:0,
           _bdS_=_bdR_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_bdS_)throw Not_found;
          var
           _bdT_=str_ind + 1 | 0,
           str_ind_1=parse_spaces(_bdT_,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(! (58 <= match$0))switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             _bdU_=(str_ind_3 - str_ind | 0) + 3 | 0,
             _bdV_=str_ind - 2 | 0,
             s=sub$0(str,_bdV_,_bdU_),
             _bdW_=[0,s,width,0],
             _bdX_=str_ind_3 + 1 | 0,
             formatting_lit$0=_bdW_,
             next_ind=_bdX_;
           else
            switch$1 = 1;
          else
           if(1 < switcher - 1 >>> 0)
            {var
              match$3=parse_integer(str_ind_3,end_ind),
              offset=match$3[2],
              str_ind_4=match$3[1],
              str_ind_5=parse_spaces(str_ind_4,end_ind);
             if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
             var
              _bdY_=(str_ind_5 - str_ind | 0) + 3 | 0,
              _bdZ_=str_ind - 2 | 0,
              s$0=sub$0(str,_bdZ_,_bdY_),
              _bd0_=[0,s$0,width,offset],
              _bd1_=str_ind_5 + 1 | 0,
              formatting_lit$0=_bd0_,
              next_ind=_bd1_}
           else
            switch$1 = 1;
          if(switch$1)throw Not_found}
        catch(_bd2_)
         {_bd2_ = caml_wrap_exception(_bd2_);
          if(_bd2_ !== Not_found && _bd2_[1] !== Failure)throw _bd2_;
          var formatting_lit$0=formatting_lit,next_ind=str_ind}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(! (58 <= match$2))switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             _bdO_=(str_ind_3 - str_ind | 0) + 3 | 0,
             _bdP_=str_ind - 2 | 0,
             s=sub$0(str,_bdP_,_bdO_),
             _bdN_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _bdN_=0;
          var _bdM_=_bdN_}
        catch(_bdQ_)
         {_bdQ_ = caml_wrap_exception(_bdQ_);
          if(_bdQ_ !== Not_found && _bdQ_[1] !== Failure)throw _bdQ_;
          var _bdL_=0,_bdM_=_bdL_}
        if(_bdM_)
         {var
           match=_bdM_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_cQ_,fmt_rest$0]]}
      function parse_padding
       (pct_ind,str_ind,end_ind,zero,minus,plus,hash,space,ign)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        if(zero)
         if(minus)
          if(legacy_behavior$0)
           var padty=0;
          else
           var _bdK_=45,padty=incompatible_flag(pct_ind,str_ind,_bdK_,_cn_);
         else
          var padty=2;
        else
         var padty=minus?0:1;
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))
           {var
             _bdJ_=0,
             match$0=parse_positive(str_ind,end_ind,_bdJ_),
             width=match$0[2],
             new_ind=match$0[1];
            return parse_after_padding
                    (pct_ind,
                     new_ind,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     [0,padty,width])}}
        else
         if(42 === match)
          return parse_after_padding
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   minus,
                   plus,
                   hash,
                   space,
                   ign,
                   [1,padty]);
        switch(padty)
         {case 0:
           if(1 - legacy_behavior$0)
            {var _bdH_=45,_bdI_=str_ind - 1 | 0;
             invalid_format_without(_bdI_,_bdH_,_cl_)}
           return parse_after_padding
                   (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,0);
          case 1:
           return parse_after_padding
                   (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,0);
          default:
           return parse_after_padding
                   (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,_cm_)}}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        return 46 === symb
                ?parse_precision
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   minus,
                   plus,
                   hash,
                   space,
                   ign,
                   pad)
                :parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   0,
                   pad,
                   symb)}
      function parse_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_literal(minus,str_ind)
         {var
           _bdG_=0,
           match=parse_positive(str_ind,end_ind,_bdG_),
           prec=match[2],
           new_ind=match[1];
          return parse_after_precision
                  (pct_ind,
                   new_ind,
                   end_ind,
                   minus,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   [0,prec])}
        var symb=caml_string_get(str,str_ind);
        if(48 <= symb)
         {if(! (58 <= symb))return parse_literal(minus,str_ind)}
        else
         if(42 <= symb)
          switch(symb - 42 | 0)
           {case 0:
             return parse_after_precision
                     (pct_ind,
                      str_ind + 1 | 0,
                      end_ind,
                      minus,
                      plus,
                      hash,
                      space,
                      ign,
                      pad,
                      1);
            case 1:
            case 3:
             if(legacy_behavior$0)
              {var _bdF_=str_ind + 1 | 0,minus$0=minus || (45 === symb?1:0);
               return parse_literal(minus$0,_bdF_)}
             break
            }
        return legacy_behavior$0
                ?parse_after_precision
                  (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,_co_)
                :invalid_format_without(str_ind - 1 | 0,46,_cp_)}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,prec)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   prec,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof prec === "number" && ! prec)return parse_conv(0);
          if(minus)
           {if(typeof prec === "number")return parse_conv(_cq_);
            var n=prec[1];
            return parse_conv([0,0,n])}
          if(typeof prec === "number")return parse_conv(_cr_);
          var n$0=prec[1];
          return parse_conv([0,1,n$0])}
        return parse_conv(pad)}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var _bdD_=0,pad=get_pad(_bdD_),_bdE_=0,match=get_prec(_bdE_);
          if(typeof match === "number" && ! match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,_cs_)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_ct_
                      :incompatible_flag(pct_ind,str_ind,48,_cu_)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,_cv_)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_cw_
                      :incompatible_flag(pct_ind,str_ind,symb,_cx_)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,_cy_);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,_cz_)}
            return incompatible_flag(pct_ind,str_ind,c,_cA_)}}
        function get_pad_opt(c)
         {var _bdC_=0;return opt_of_pad(c,get_pad(_bdC_))}
        function get_padprec_opt(c)
         {var _bdB_=0;return opt_of_pad(c,get_padprec(_bdB_))}
        function get_prec_opt(param)
         {var _bdA_=0,match=get_prec(_bdA_);
          if(typeof match === "number")
           return match?incompatible_flag(pct_ind,str_ind,95,_cB_):0;
          var ndec=match[1];
          return [0,ndec]}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$5=parse(str_ind,end_ind),
             fmt_rest$5=match$5[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             _bcr_=41,
             sub_end=search_subformat_end(str_ind,end_ind,_bcr_),
             _bcs_=sub_end + 2 | 0,
             match$7=parse(_bcs_,end_ind),
             fmt_rest$7=match$7[1],
             match$8=parse(str_ind,sub_end),
             sub_fmt=match$8[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt),
             _bct_=0;
            if(get_ign(_bct_))
             var
              _bcu_=95,
              ignored$2=[9,get_pad_opt(_bcu_),sub_fmtty],
              _bcv_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var
              _bcw_=40,
              _bcv_=[0,[14,get_pad_opt(_bcw_),sub_fmtty,fmt_rest$7]];
            var fmt_result=_bcv_;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$11=parse(str_ind,end_ind),
             fmt_rest$10=match$11[1],
             _bcC_=0,
             _bcD_=get_ign(_bcC_)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_bcD_;
            break;
           case 78:
            var
             match$15=parse(str_ind,end_ind),
             fmt_rest$14=match$15[1],
             counter$0=2,
             _bcW_=0;
            if(get_ign(_bcW_))
             var
              ignored$6=[11,counter$0],
              _bcX_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _bcX_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_bcX_;
            break;
           case 83:
            var
             _bcY_=0,
             _bcZ_=get_padprec(_bcY_),
             pad$6=check_no_0(symb,_bcZ_),
             match$16=parse(str_ind,end_ind),
             fmt_rest$15=match$16[1],
             _bc0_=0;
            if(get_ign(_bc0_))
             var
              _bc1_=95,
              ignored$7=[1,get_padprec_opt(_bc1_)],
              _bc2_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$17=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$17[2],
              pad$7=match$17[1],
              _bc2_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_bc2_;
            break;
           case 91:
            var
             match$20=parse_char_set(str_ind,end_ind),
             char_set=match$20[2],
             next_ind=match$20[1],
             match$21=parse(next_ind,end_ind),
             fmt_rest$19=match$21[1],
             _bde_=0;
            if(get_ign(_bde_))
             var
              _bdf_=95,
              ignored$9=[10,get_pad_opt(_bdf_),char_set],
              _bdg_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var
              _bdh_=91,
              _bdg_=[0,[20,get_pad_opt(_bdh_),char_set,fmt_rest$19]];
            var fmt_result=_bdg_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {var _bdz_=0;
                return get_ign(_bdz_)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             scan_format=
              function(fmt_rest)
               {var _bdy_=0;
                return get_ign(_bdy_)?[0,[23,3,fmt_rest]]:[0,[22,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             _bdi_=99,
             match$24=get_pad_opt(_bdi_);
            if(match$24)
             var
              _bdj_=
               0 === match$24[1]
                ?scan_format(fmt_rest$21)
                :legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_nonnull_char_width(str_ind),
              _bdk_=_bdj_;
            else
             var _bdk_=char_format(fmt_rest$21);
            var fmt_result=_bdk_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _bdl_=0,
             _bdm_=get_ign(_bdl_)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_bdm_;
            break;
           case 115:
            var
             _bdn_=0,
             _bdo_=get_padprec(_bdn_),
             pad$9=check_no_0(symb,_bdo_),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1],
             _bdp_=0;
            if(get_ign(_bdp_))
             var
              _bdq_=95,
              ignored$10=[0,get_padprec_opt(_bdq_)],
              _bdr_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _bdr_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_bdr_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             _bds_=125,
             sub_end$0=search_subformat_end(str_ind,end_ind,_bds_),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             _bdt_=sub_end$0 + 2 | 0,
             match$30=parse(_bdt_,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0),
             _bdu_=0;
            if(get_ign(_bdu_))
             var
              _bdv_=95,
              ignored$11=[8,get_pad_opt(_bdv_),sub_fmtty$0],
              _bdw_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var
              _bdx_=123,
              _bdw_=[0,[13,get_pad_opt(_bdx_),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_bdw_;
            break;
           case 66:
           case 98:
            var
             _bcx_=0,
             _bcy_=get_padprec(_bcx_),
             pad$3=check_no_0(symb,_bcy_),
             match$9=parse(str_ind,end_ind),
             fmt_rest$8=match$9[1],
             _bcz_=0;
            if(get_ign(_bcz_))
             var
              _bcA_=95,
              ignored$3=[7,get_padprec_opt(_bcA_)],
              _bcB_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$10=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$10[2],
              pad$4=match$10[1],
              _bcB_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_bcB_;
            break;
           case 37:
           case 64:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$6=match$6[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var _bcV_=caml_string_get(str,str_ind);
              if(is_int_base(_bcV_)){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$14=parse(str_ind,end_ind),
               fmt_rest$13=match$14[1],
               counter=counter_of_char(symb),
               _bcT_=0;
              if(get_ign(_bcT_))
               var
                ignored$5=[11,counter],
                _bcU_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _bcU_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_bcU_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_cM_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _bc3_=0,
             _bc4_=get_space(_bc3_),
             _bc5_=0,
             _bc6_=get_hash(_bc5_),
             _bc7_=0,
             _bc8_=get_plus(_bc7_),
             iconv$2=compute_int_conv(pct_ind,str_ind,_bc8_,_bc6_,_bc4_,symb),
             match$18=parse(str_ind,end_ind),
             fmt_rest$17=match$18[1],
             _bc9_=0;
            if(get_ign(_bc9_))
             var
              _bc__=95,
              ignored$8=[2,iconv$2,get_pad_opt(_bc__)],
              _bc$_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _bda_=0,
              _bdb_=get_prec(_bda_),
              _bdc_=0,
              _bdd_=get_int_pad(_bdc_),
              match$19=make_padprec_fmt_ebb(_bdd_,_bdb_,fmt_rest$17),
              fmt_rest$18=match$19[3],
              prec$4=match$19[2],
              pad$8=match$19[1],
              _bc$_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_bc$_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             _bcE_=0,
             _bcF_=get_space(_bcE_),
             _bcG_=0,
             _bcH_=get_hash(_bcG_),
             _bcI_=0,
             _bcJ_=get_plus(_bcI_),
             fconv=compute_float_conv(pct_ind,str_ind,_bcJ_,_bcH_,_bcF_,symb),
             match$12=parse(str_ind,end_ind),
             fmt_rest$11=match$12[1],
             _bcK_=0;
            if(get_ign(_bcK_))
             var
              _bcL_=0,
              _bcM_=get_prec_opt(_bcL_),
              _bcN_=95,
              ignored$4=[6,get_pad_opt(_bcN_),_bcM_],
              _bcO_=[0,[23,ignored$4,fmt_rest$11]];
            else
             var
              _bcP_=0,
              _bcQ_=get_prec(_bcP_),
              _bcR_=0,
              _bcS_=get_pad(_bcR_),
              match$13=make_padprec_fmt_ebb(_bcS_,_bcQ_,fmt_rest$11),
              fmt_rest$12=match$13[3],
              prec$3=match$13[2],
              pad$5=match$13[1],
              _bcO_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_bcO_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$2=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$2 = 1;
           else
            {var switch$3=0;
             switch(symb - 108 | 0)
              {case 0:
                var
                 _bbG_=caml_string_get(str,str_ind),
                 _bbH_=0,
                 _bbI_=get_space(_bbH_),
                 _bbJ_=0,
                 _bbK_=get_hash(_bbJ_),
                 _bbL_=0,
                 _bbM_=get_plus(_bbL_),
                 _bbN_=str_ind + 1 | 0,
                 iconv=compute_int_conv(pct_ind,_bbN_,_bbM_,_bbK_,_bbI_,_bbG_),
                 _bbO_=str_ind + 1 | 0,
                 match=parse(_bbO_,end_ind),
                 fmt_rest=match[1],
                 _bbP_=0;
                if(get_ign(_bbP_))
                 var
                  _bbQ_=95,
                  ignored=[3,iconv,get_pad_opt(_bbQ_)],
                  _bbR_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _bbT_=0,
                  _bbU_=get_prec(_bbT_),
                  _bbV_=0,
                  _bbW_=get_int_pad(_bbV_),
                  match$0=make_padprec_fmt_ebb(_bbW_,_bbU_,fmt_rest),
                  fmt_rest$0=match$0[3],
                  prec$0=match$0[2],
                  pad$0=match$0[1],
                  _bbR_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _bbS_=_bbR_;
                break;
               case 1:switch$2 = 1;switch$3 = 1;break;
               default:
                var
                 _bbX_=caml_string_get(str,str_ind),
                 _bbY_=0,
                 _bbZ_=get_space(_bbY_),
                 _bb0_=0,
                 _bb1_=get_hash(_bb0_),
                 _bb2_=0,
                 _bb3_=get_plus(_bb2_),
                 _bb4_=str_ind + 1 | 0,
                 iconv$0=
                  compute_int_conv(pct_ind,_bb4_,_bb3_,_bb1_,_bbZ_,_bbX_),
                 _bb5_=str_ind + 1 | 0,
                 match$1=parse(_bb5_,end_ind),
                 fmt_rest$1=match$1[1],
                 _bb6_=0;
                if(get_ign(_bb6_))
                 var
                  _bb7_=95,
                  ignored$0=[4,iconv$0,get_pad_opt(_bb7_)],
                  _bb8_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _bb9_=0,
                  _bb__=get_prec(_bb9_),
                  _bb$_=0,
                  _bca_=get_int_pad(_bb$_),
                  match$2=make_padprec_fmt_ebb(_bca_,_bb__,fmt_rest$1),
                  fmt_rest$2=match$2[3],
                  prec$1=match$2[2],
                  pad$1=match$2[1],
                  _bb8_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _bbS_=_bb8_}
             if(! switch$3)var fmt_result=_bbS_}
          else
           if(76 === symb)
            {var
              _bcb_=caml_string_get(str,str_ind),
              _bcc_=0,
              _bcd_=get_space(_bcc_),
              _bce_=0,
              _bcf_=get_hash(_bce_),
              _bcg_=0,
              _bch_=get_plus(_bcg_),
              _bci_=str_ind + 1 | 0,
              iconv$1=compute_int_conv(pct_ind,_bci_,_bch_,_bcf_,_bcd_,_bcb_),
              _bcj_=str_ind + 1 | 0,
              match$3=parse(_bcj_,end_ind),
              fmt_rest$3=match$3[1],
              _bck_=0;
             if(get_ign(_bck_))
              var
               _bcl_=95,
               ignored$1=[5,iconv$1,get_pad_opt(_bcl_)],
               _bcm_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _bcn_=0,
               _bco_=get_prec(_bcn_),
               _bcp_=0,
               _bcq_=get_int_pad(_bcp_),
               match$4=make_padprec_fmt_ebb(_bcq_,_bco_,fmt_rest$3),
               fmt_rest$4=match$4[3],
               prec$2=match$4[2],
               pad$2=match$4[1],
               _bcm_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_bcm_}
           else
            switch$2 = 1;
          if(switch$2)
           var
            _bbt_=str_ind - 1 | 0,
            fmt_result=caml_call3(failwith_message(_cC_),str,_bbt_,symb)}
        if(1 - legacy_behavior$0)
         {var _bbu_=1 - plus_used[1],plus$0=_bbu_?plus:_bbu_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,_cD_);
          var _bbv_=1 - hash_used[1],hash$0=_bbv_?hash:_bbv_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,_cE_);
          var _bbw_=1 - space_used[1],space$0=_bbw_?space:_bbw_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,_cF_);
          var _bbx_=1 - pad_used[1];
          if(_bbx_)
           var _bby_=[0,pad],_bbz_=caml_notequal(_bby_,_cG_);
          else
           var _bbz_=_bbx_;
          if(_bbz_)incompatible_flag(pct_ind,str_ind,symb,_cH_);
          var _bbA_=1 - prec_used[1];
          if(_bbA_)
           var _bbB_=[0,prec],_bbC_=caml_notequal(_bbB_,_cI_);
          else
           var _bbC_=_bbA_;
          if(_bbC_)
           {var _bbD_=ign?95:symb;
            incompatible_flag(pct_ind,str_ind,_bbD_,_cJ_)}
          var plus$1=ign?plus:ign;
          if(plus$1)
           {var _bbE_=95;incompatible_flag(pct_ind,str_ind,_bbE_,_cK_)}}
        var _bbF_=1 - ign_used[1],ign$0=_bbF_?ign:_bbF_;
        if(ign$0)
         {var switch$4=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$4 = 1}
          else
           if(33 !== symb && ! (37 <= symb))switch$4 = 1;
          var switch$5=0;
          if(switch$4 || ! legacy_behavior$0)switch$5 = 1;
          if(switch$5)incompatible_flag(pct_ind,str_ind,symb,_cL_)}
        return fmt_result}
      function parse_format(pct_ind,end_ind)
       {return parse_ign(pct_ind,pct_ind + 1 | 0,end_ind)}
      function parse_ign(pct_ind,str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        return 95 === match
                ?parse_flags(pct_ind,str_ind + 1 | 0,end_ind,1)
                :parse_flags(pct_ind,str_ind,end_ind,0)}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _bbq_=flag[1],_bbr_=_bbq_?1 - legacy_behavior$0:_bbq_;
          if(_bbr_)
           {var _bbs_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_ck_),str,str_ind,_bbs_)}
          flag[1] = 1;
          return 0}
        function read_flags(str_ind)
         {var str_ind$0=str_ind;
          for(;;)
           {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
            var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
            if(! (16 < switcher >>> 0))
             switch(switcher)
              {case 0:
                set_flag(str_ind$0,space);
                var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                continue;
               case 3:
                set_flag(str_ind$0,hash);
                var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
                continue;
               case 11:
                set_flag(str_ind$0,plus);
                var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
                continue;
               case 13:
                set_flag(str_ind$0,minus);
                var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
                continue;
               case 16:
                set_flag(str_ind$0,zero);
                var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
                continue
               }
            return parse_padding
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     zero[1],
                     minus[1],
                     plus[1],
                     hash[1],
                     space[1],
                     ign)}}
        return read_flags(str_ind)}
      function parse(beg_ind,end_ind)
       {return parse_literal(beg_ind,beg_ind,end_ind)}
      function parse_literal(lit_start,str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)return add_literal(lit_start,str_ind$0,0);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {var match$0=parse_format(str_ind$0,end_ind),fmt_rest=match$0[1];
            return add_literal(lit_start,str_ind$0,fmt_rest)}
          if(64 === match)
           {var
             _bbp_=str_ind$0 + 1 | 0,
             match$1=parse_after_at(_bbp_,end_ind),
             fmt_rest$0=match$1[1];
            return add_literal(lit_start,str_ind$0,fmt_rest$0)}
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
          continue}}
      return parse(0,caml_ml_string_length(str))}
    function format_of_string_fmtty(str,fmtty)
     {var _bbl_=0,match=fmt_ebb_of_string(_bbl_,str),fmt=match[1];
      try
       {var _bbn_=[0,type_format(fmt,fmtty),str];return _bbn_}
      catch(_bbo_)
       {_bbo_ = caml_wrap_exception(_bbo_);
        if(_bbo_ === Type_mismatch)
         {var _bbm_=string_of_fmtty(fmtty);
          return caml_call2(failwith_message(_c7_),str,_bbm_)}
        throw _bbo_}}
    function kfprintf(k,o,param)
     {var fmt=param[1],_bbk_=0;
      return make_printf
              (function(acc){output_acc(o,acc);return caml_call1(k,o)},
               _bbk_,
               fmt)}
    function fprintf(oc,fmt)
     {return kfprintf(function(_bbj_){return 0},oc,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function kprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var _bbi_=64,buf=create$1(_bbi_);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return kprintf(function(s){return s},fmt)}
    var _c8_=0,printers=make(_c8_);
    function field(x,i)
     {var f=x[1 + i];
      return is_block(f)
              ?caml_obj_tag(f) === 252
                ?caml_call1(sprintf(_c9_),f)
                :caml_obj_tag(f) === 253?to_string$0(f):_c__
              :caml_call1(sprintf(_c$_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _da_;
      var _bbf_=i + 1 | 0,_bbg_=other_fields(x,_bbf_),_bbh_=field(x,i);
      return caml_call2(sprintf(_db_),_bbh_,_bbg_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _ba$_=2,_bba_=other_fields(x,_ba$_),_bbb_=1,_bbc_=field(x,_bbb_);
        return caml_call2(sprintf(_dc_),_bbc_,_bba_)}
      switch(match)
       {case 0:return _dd_;
        case 1:return _de_;
        default:
         var _bbd_=1,_bbe_=field(x,_bbd_);
         return caml_call1(sprintf(_df_),_bbe_)}}
    function use_printers(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,x);switch$0 = 1}
            catch(_ba__){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      return conv(get(printers))}
    function to_string_default(x)
     {if(x === Out_of_memory)return _dg_;
      if(x === Stack_overflow)return _dh_;
      if(x[1] === Match_failure)
       {var match=x[2],char$0=match[3],line=match[2],file=match[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_di_)}
      if(x[1] === Assert_failure)
       {var
         match$0=x[2],
         char$1=match$0[3],
         line$0=match$0[2],
         file$0=match$0[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_dj_)}
      if(x[1] === Undefined_recursive_module)
       {var
         match$1=x[2],
         char$2=match$1[3],
         line$1=match$1[2],
         file$1=match$1[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_dk_)}
      if(0 === caml_obj_tag(x))
       {var _ba6_=0,_ba7_=0,_ba8_=x[1 + _ba7_],constructor=_ba8_[1 + _ba6_];
        return cat(constructor,fields(x))}
      var _ba9_=0;
      return x[1 + _ba9_]}
    function to_string$5(e)
     {var match=use_printers(e);
      if(match){var s=match[1];return s}
      return to_string_default(e)}
    function convert_raw_backtrace(bt)
     {var _ba5_=[0,caml_convert_raw_backtrace(bt)];return _ba5_}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise?0 === pos?_dl_:_dm_:0 === pos?_dn_:_do_}
      if(0 === slot[0])
       {var
         _baV_=slot[5],
         _baW_=slot[4],
         _baX_=slot[3],
         _baY_=slot[6]?_dp_:_dr_,
         _baZ_=slot[2],
         _ba0_=slot[7],
         _ba1_=slot[1],
         _ba2_=info(_ba1_);
        return [0,
                caml_call7
                 (sprintf(_dq_),_ba2_,_ba0_,_baZ_,_baY_,_baX_,_baW_,_baV_)]}
      if(slot[1])return 0;
      var _ba3_=0,_ba4_=info(_ba3_);
      return [0,caml_call1(sprintf(_ds_),_ba4_)]}
    function print_exception_backtrace(outchan,backtrace)
     {if(backtrace)
       {var a=backtrace[1],_baS_=a.length - 1 - 1 | 0,_baR_=0;
        if(! (_baS_ < 0))
         {var i=_baR_;
          for(;;)
           {var
             _baT_=caml_check_bound(a,i)[1 + i],
             match=format_backtrace_slot(i,_baT_);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_dt_),str)}
            var _baU_=i + 1 | 0;
            if(_baS_ !== i){var i=_baU_;continue}
            break}}
        return 0}
      return fprintf(outchan,_du_)}
    function print_raw_backtrace(outchan,raw_backtrace)
     {return print_exception_backtrace
              (outchan,convert_raw_backtrace(raw_backtrace))}
    function print_backtrace(outchan)
     {return print_raw_backtrace(outchan,caml_get_exception_raw_backtrace(0))}
    function register_printer(fn)
     {for(;;)
       {var
         old_printers=get(printers),
         new_printers=[0,fn,old_printers],
         success=compare_and_set(printers,old_printers,new_printers),
         _baQ_=1 - success;
        if(_baQ_)continue;
        return _baQ_}}
    var errors=_dv_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _baN_=to_string$5(exn);
      caml_call1(eprintf(_dw_),_baN_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=caml_ml_debug_info_status(0);
      if(status < 0)
       {var _baO_=abs(status),_baP_=caml_check_bound(errors,_baO_)[1 + _baO_];
        prerr_endline(_baP_)}
      return flush(stderr)}
    var empty_backtrace=[0];
    function try_get_raw_backtrace(param)
     {var _baM_=caml_get_exception_raw_backtrace(0);return _baM_}
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {if(debugger_in_use)
         var raw_backtrace=empty_backtrace;
        else
         var _baJ_=0,raw_backtrace=try_get_raw_backtrace(_baJ_);
        try {var _baI_=0;do_at_exit(_baI_)}catch(_baL_){}
        try
         {var
           _baH_=default_uncaught_exception_han(exn,raw_backtrace),
           _baG_=_baH_}
        catch(exn$0)
         {exn$0 = caml_wrap_exception(exn$0);
          var
           _baD_=0,
           raw_backtrace$0=try_get_raw_backtrace(_baD_),
           _baE_=to_string$5(exn);
          caml_call1(eprintf(_dy_),_baE_);
          print_raw_backtrace(stderr,raw_backtrace);
          var _baF_=to_string$5(exn$0);
          caml_call1(eprintf(_dz_),_baF_);
          print_raw_backtrace(stderr,raw_backtrace$0);
          var _baG_=flush(stderr)}
        return _baG_}
      catch(_baK_)
       {_baK_ = caml_wrap_exception(_baK_);
        if(_baK_ === Out_of_memory)return prerr_endline(_dx_);
        throw _baK_}}
    function handle_uncaught_exception$0(exn,debugger_in_use)
     {try
       {var _baB_=handle_uncaught_exception(exn,debugger_in_use);return _baB_}
      catch(_baC_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception$0);
    var Finally_raised=[248,_dA_,caml_fresh_oo_id(0)];
    function _dB_(param)
     {if(param[1] === Finally_raised)
       {var exn=param[2],_baA_=to_string$5(exn);return [0,cat(_dC_,_baA_)]}
      return 0}
    register_printer(_dB_);
    function _dD_(_baz_,_bay_){return caml_final_register(_baz_,_bay_)}
    function string(str)
     {var _bax_=caml_ml_string_length(str);
      return caml_md5_string(str,0,_bax_)}
    function new_state(param)
     {var _baw_=0;return [0,caml_make_vect(55,0),_baw_]}
    function full_init(s,seed)
     {function combine(accu,x)
       {var _bav_=to_string$1(x);return string(cat(accu,_bav_))}
      function extract(d)
       {var
         _bas_=caml_string_get(d,3) << 24,
         _bat_=caml_string_get(d,2) << 16,
         _bau_=caml_string_get(d,1) << 8;
        return ((caml_string_get(d,0) + _bau_ | 0) + _bat_ | 0) + _bas_ | 0}
      var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {var _baq_=s[1];
        caml_check_bound(_baq_,i$0)[1 + i$0] = i$0;
        var _bar_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_bar_;continue}
        var accu=[0,_dE_],_baf_=0,_bag_=55,_bah_=54 + max$0(_bag_,l) | 0;
        if(! (_bah_ < 0))
         {var i=_baf_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             _bai_=caml_check_bound(seed$0,k)[1 + k],
             _baj_=accu[1];
            accu[1] = combine(_baj_,_bai_);
            var
             _bak_=accu[1],
             _bal_=extract(_bak_),
             _bam_=s[1],
             _ban_=(caml_check_bound(_bam_,j)[1 + j] ^ _bal_) & 1073741823,
             _bao_=s[1];
            caml_check_bound(_bao_,j)[1 + j] = _ban_;
            var _bap_=i + 1 | 0;
            if(_bah_ !== i){var i=_bap_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$2(seed)
     {var _bae_=0,result=new_state(_bae_);
      full_init(result,seed);
      return result}
    function make_self_init(param){return make$2(caml_sys_random_seed(0))}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _a$9_=s[2],
       _a$__=s[1],
       curval=caml_check_bound(_a$__,_a$9_)[1 + _a$9_],
       _baa_=(s[2] + 24 | 0) % 55 | 0,
       _a$$_=curval ^ (curval >>> 25 | 0) & 31,
       _bab_=s[1],
       newval=caml_check_bound(_bab_,_baa_)[1 + _baa_] + _a$$_ | 0,
       newval30=newval & 1073741823,
       _bac_=s[2],
       _bad_=s[1];
      caml_check_bound(_bad_,_bac_)[1 + _bac_] = newval30;
      return newval30}
    function ongoing_traversal(h)
     {var _a$7_=h.length - 1 < 4?1:0,_a$8_=_a$7_ || (h[4] < 0?1:0);
      return _a$8_}
    function flip_ongoing_traversal(h){h[4] = - h[4] | 0;return 0}
    try
     {var _wL_=caml_sys_getenv(_wK_),params=_wL_}
    catch(_a$5_)
     {_a$5_ = caml_wrap_exception(_a$5_);
      if(_a$5_ !== Not_found)throw _a$5_;
      try
       {var _wJ_=caml_sys_getenv(_wI_),_dG_=_wJ_}
      catch(_a$6_)
       {_a$6_ = caml_wrap_exception(_a$6_);
        if(_a$6_ !== Not_found)throw _a$6_;
        var _dG_=_dF_}
      var params=_dG_}
    var
     _dH_=82,
     randomized_default=contains(params,_dH_),
     prng=[246,function(_a$4_){return make_self_init(0)}];
    function power_2_above(x,n)
     {var x$0=x;
      for(;;)
       {if(n <= x$0)return x$0;
        if(max_array_length < (x$0 * 2 | 0))return x$0;
        var x$1=x$0 * 2 | 0,x$0=x$1;
        continue}}
    function create$2(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var _a$1_=16,s=power_2_above(_a$1_,initial_size);
      if(random)
       var
        _a$2_=caml_obj_tag(prng),
        _a$3_=250 === _a$2_?prng[1]:246 === _a$2_?force_lazy_block(prng):prng,
        seed=bits(_a$3_);
      else
       var seed=0;
      return [0,0,caml_make_vect(s,0),seed,s]}
    function clear$2(h)
     {var _a$0_=0 < h[1]?1:0;
      return _a$0_?(h[1] = 0,fill(h[2],0,h[2].length - 1,0)):_a$0_}
    function reset$0(h)
     {var len=h[2].length - 1;
      if(4 <= h.length - 1)
       {var _a$X_=h[4];
        if(len !== abs(_a$X_))
         {h[1] = 0;
          var _a$Y_=h[4],_a$Z_=abs(_a$Y_);
          h[2] = caml_make_vect(_a$Z_,0);
          return 0}}
      return clear$2(h)}
    function copy_bucketlist(param)
     {if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         loop=
          function(prec,param)
           {var prec$0=prec,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 key=param$0[1],
                 data=param$0[2],
                 next=param$0[3],
                 r=[0,key,data,next];
                if(prec$0){prec$0[3] = r;var prec$0=r,param$0=next;continue}
                throw [0,Assert_failure,_dI_]}
              return 0}},
         r=[0,key,data,next];
        loop(r,next);
        return r}
      return 0}
    function copy$0(init)
     {var
       _a$T_=init[4],
       _a$U_=init[3],
       _a$V_=init[2],
       _a$W_=map$2(copy_bucketlist,_a$V_);
      return [0,init[1],_a$W_,_a$U_,_a$T_]}
    function length$1(h){return h[1]}
    function insert_all_buckets(indexfun,inplace,odata,ndata)
     {var nsize=ndata.length - 1,ndata_tail=caml_make_vect(nsize,0);
      function insert_bucket(cell)
       {var cell$0=cell;
        for(;;)
         {if(cell$0)
           {var
             key=cell$0[1],
             data=cell$0[2],
             next=cell$0[3],
             cell$1=inplace?cell$0:[0,key,data,0],
             nidx=caml_call1(indexfun,key),
             match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
            if(match)
             match[3] = cell$1;
            else
             caml_check_bound(ndata,nidx)[1 + nidx] = cell$1;
            caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$1;
            var cell$0=next;
            continue}
          return 0}}
      var _a$M_=odata.length - 1 - 1 | 0,_a$L_=0;
      if(! (_a$M_ < 0))
       {var i$0=_a$L_;
        for(;;)
         {var _a$R_=caml_check_bound(odata,i$0)[1 + i$0];
          insert_bucket(_a$R_);
          var _a$S_=i$0 + 1 | 0;
          if(_a$M_ !== i$0){var i$0=_a$S_;continue}
          break}}
      if(inplace)
       {var _a$O_=nsize - 1 | 0,_a$N_=0;
        if(! (_a$O_ < 0))
         {var i=_a$N_;
          for(;;)
           {var match=caml_check_bound(ndata_tail,i)[1 + i];
            if(match)match[3] = 0;
            var _a$Q_=i + 1 | 0;
            if(_a$O_ !== i){var i=_a$Q_;continue}
            break}}
        var _a$P_=0}
      else
       var _a$P_=inplace;
      return _a$P_}
    function resize$0(indexfun,h)
     {var
       odata=h[2],
       osize=odata.length - 1,
       nsize=osize * 2 | 0,
       _a$K_=nsize < max_array_length?1:0;
      if(_a$K_)
       {var ndata=caml_make_vect(nsize,0),inplace=1 - ongoing_traversal(h);
        h[2] = ndata;
        return insert_all_buckets(caml_call1(indexfun,h),inplace,odata,ndata)}
      return _a$K_}
    function iter$4(f,h)
     {function do_bucket(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var key=param$0[1],data=param$0[2],next=param$0[3];
            caml_call2(f,key,data);
            var param$0=next;
            continue}
          return 0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],_a$F_=d.length - 1 - 1 | 0,_a$E_=0;
        if(! (_a$F_ < 0))
         {var i=_a$E_;
          for(;;)
           {var _a$I_=caml_check_bound(d,i)[1 + i];
            do_bucket(_a$I_);
            var _a$J_=i + 1 | 0;
            if(_a$F_ !== i){var i=_a$J_;continue}
            break}}
        var _a$G_=1 - old_trav,_a$H_=_a$G_?flip_ongoing_traversal(h):_a$G_;
        return _a$H_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function filter_map_inplace_bucket(f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         {var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
           match=caml_call2(f,key,data);
          if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
             {var _a$B_=h[2];caml_check_bound(_a$B_,i)[1 + i] = slot$0}
            slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
          h[1] = h[1] - 1 | 0;
          var slot$0=next;
          continue}
        if(prec$0){prec$0[3] = 0;return 0}
        var _a$C_=0,_a$D_=h[2];
        caml_check_bound(_a$D_,i)[1 + i] = _a$C_;
        return 0}}
    function filter_map_inplace(f,h)
     {var d=h[2],old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var _a$u_=d.length - 1 - 1 | 0,_a$t_=0;
        if(! (_a$u_ < 0))
         {var i=_a$t_;
          for(;;)
           {var _a$x_=h[2],_a$y_=caml_check_bound(_a$x_,i)[1 + i],_a$z_=0;
            filter_map_inplace_bucket(f,h,i,_a$z_,_a$y_);
            var _a$A_=i + 1 | 0;
            if(_a$u_ !== i){var i=_a$A_;continue}
            break}}
        var _a$v_=1 - old_trav,_a$w_=_a$v_?flip_ongoing_traversal(h):_a$v_;
        return _a$w_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function fold$0(f,h,init)
     {function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
        for(;;)
         {if(b$0)
           {var
             key=b$0[1],
             data=b$0[2],
             next=b$0[3],
             accu$1=caml_call3(f,key,data,accu$0),
             b$0=next,
             accu$0=accu$1;
            continue}
          return accu$0}}
      var old_trav=ongoing_traversal(h);
      if(1 - old_trav)flip_ongoing_traversal(h);
      try
       {var d=h[2],accu=[0,init],_a$o_=d.length - 1 - 1 | 0,_a$n_=0;
        if(! (_a$o_ < 0))
         {var i=_a$n_;
          for(;;)
           {var _a$q_=accu[1],_a$r_=caml_check_bound(d,i)[1 + i];
            accu[1] = do_bucket(_a$r_,_a$q_);
            var _a$s_=i + 1 | 0;
            if(_a$o_ !== i){var i=_a$s_;continue}
            break}}
        if(1 - old_trav)flip_ongoing_traversal(h);
        var _a$p_=accu[1];
        return _a$p_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(old_trav)throw exn;
        flip_ongoing_traversal(h);
        throw exn}}
    function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         {var
           param$1=param$0[3],
           accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
        return accu$0}}
    function stats(h)
     {var _a$e_=h[2],_a$f_=0;
      function _a$g_(m,b){var _a$m_=0;return max$0(m,bucket_length(_a$m_,b))}
      var
       mbl=fold_left$0(_a$g_,_a$f_,_a$e_),
       _a$h_=mbl + 1 | 0,
       histo=caml_make_vect(_a$h_,0),
       _a$i_=h[2];
      function _a$j_(b)
       {var
         _a$k_=0,
         l=bucket_length(_a$k_,b),
         _a$l_=caml_check_bound(histo,l)[1 + l] + 1 | 0;
        caml_check_bound(histo,l)[1 + l] = _a$l_;
        return 0}
      iter$2(_a$j_,_a$i_);
      return [0,h[1],h[2].length - 1,mbl,histo]}
    function to_seq(tbl)
     {var tbl_data=tbl[2];
      function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
        for(;;)
         {if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
            return [0,
                    [0,key,data],
                    function(_a$d_){return aux(i$0,next,_a$d_)}]}
          if(i$0 === tbl_data.length - 1)return 0;
          var
           buck$1=caml_check_bound(tbl_data,i$0)[1 + i$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue}}
      var _a$a_=0,_a$b_=0;
      return function(_a$c_){return aux(_a$b_,_a$a_,_a$c_)}}
    function to_seq_keys(m)
     {var _a_8_=to_seq(m);
      function _a_9_(_a_$_){return _a_$_[1]}
      return function(_a___){return map(_a_9_,_a_8_,_a___)}}
    function to_seq_values(m)
     {var _a_4_=to_seq(m);
      function _a_5_(_a_7_){return _a_7_[2]}
      return function(_a_6_){return map(_a_5_,_a_4_,_a_6_)}}
    function MakeSeeded(H)
     {function key_index(h,key)
       {var _a_1_=h[2].length - 1 - 1 | 0,_a_2_=h[3],_a_3_=H[2];
        return caml_call2(_a_3_,_a_2_,key) & _a_1_}
      function add(h,key,data)
       {var
         i=key_index(h,key),
         _a_Y_=h[2],
         bucket=[0,key,data,caml_check_bound(_a_Y_,i)[1 + i]],
         _a_Z_=h[2];
        caml_check_bound(_a_Z_,i)[1 + i] = bucket;
        h[1] = h[1] + 1 | 0;
        var _a_0_=h[2].length - 1 << 1 < h[1]?1:0;
        return _a_0_?resize$0(key_index,h):_a_0_}
      function remove_bucket(h,i,key,prec,c)
       {var prec$0=prec,c$0=c;
        for(;;)
         {if(c$0)
           {var k=c$0[1],next=c$0[3],_a_W_=H[1];
            if(caml_call2(_a_W_,k,key))
             {h[1] = h[1] - 1 | 0;
              if(prec$0){prec$0[3] = next;return 0}
              var _a_X_=h[2];
              caml_check_bound(_a_X_,i)[1 + i] = next;
              return 0}
            var prec$0=c$0,c$0=next;
            continue}
          return 0}}
      function remove(h,key)
       {var i=key_index(h,key),_a_V_=h[2];
        return remove_bucket(h,i,key,0,caml_check_bound(_a_V_,i)[1 + i])}
      function find_rec(key,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3],_a_U_=H[1];
            if(caml_call2(_a_U_,key,k))return data;
            var param$0=next;
            continue}
          throw Not_found}}
      function find(h,key)
       {var
         _a_P_=key_index(h,key),
         _a_Q_=h[2],
         match=caml_check_bound(_a_Q_,_a_P_)[1 + _a_P_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3],_a_R_=H[1];
          if(caml_call2(_a_R_,key,k1))return d1;
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3],_a_S_=H[1];
            if(caml_call2(_a_S_,key,k2))return d2;
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3],_a_T_=H[1];
              return caml_call2(_a_T_,key,k3)?d3:find_rec(key,next3)}
            throw Not_found}
          throw Not_found}
        throw Not_found}
      function find_rec_opt(key,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],data=param$0[2],next=param$0[3],_a_O_=H[1];
            if(caml_call2(_a_O_,key,k))return [0,data];
            var param$0=next;
            continue}
          return 0}}
      function find_opt(h,key)
       {var
         _a_J_=key_index(h,key),
         _a_K_=h[2],
         match=caml_check_bound(_a_K_,_a_J_)[1 + _a_J_];
        if(match)
         {var k1=match[1],d1=match[2],next1=match[3],_a_L_=H[1];
          if(caml_call2(_a_L_,key,k1))return [0,d1];
          if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3],_a_M_=H[1];
            if(caml_call2(_a_M_,key,k2))return [0,d2];
            if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3],_a_N_=H[1];
              return caml_call2(_a_N_,key,k3)?[0,d3]:find_rec_opt(key,next3)}
            return 0}
          return 0}
        return 0}
      function find_all(h,key)
       {function find_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3],_a_I_=H[1];
              if(caml_call2(_a_I_,k,key))return [0,d,find_in_bucket(next)];
              var param$0=next;
              continue}
            return 0}}
        var _a_G_=key_index(h,key),_a_H_=h[2];
        return find_in_bucket(caml_check_bound(_a_H_,_a_G_)[1 + _a_G_])}
      function replace_bucket(key,data,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var k=param$0[1],next=param$0[3],_a_F_=H[1];
            if(caml_call2(_a_F_,k,key))
             {param$0[1] = key;param$0[2] = data;return 0}
            var param$0=next;
            continue}
          return 1}}
      function replace(h,key,data)
       {var
         i=key_index(h,key),
         _a_z_=h[2],
         l=caml_check_bound(_a_z_,i)[1 + i],
         _a_A_=replace_bucket(key,data,l);
        if(_a_A_)
         {var _a_B_=[0,key,data,l],_a_C_=h[2];
          caml_check_bound(_a_C_,i)[1 + i] = _a_B_;
          h[1] = h[1] + 1 | 0;
          var _a_D_=h[2].length - 1 << 1 < h[1]?1:0;
          if(_a_D_)return resize$0(key_index,h);
          var _a_E_=_a_D_}
        else
         var _a_E_=_a_A_;
        return _a_E_}
      function mem(h,key)
       {function mem_in_bucket(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               k=param$0[1],
               next=param$0[3],
               _a_x_=H[1],
               _a_y_=caml_call2(_a_x_,k,key);
              if(_a_y_)return _a_y_;
              var param$0=next;
              continue}
            return 0}}
        var _a_v_=key_index(h,key),_a_w_=h[2];
        return mem_in_bucket(caml_check_bound(_a_w_,_a_v_)[1 + _a_v_])}
      function add_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return add(tbl,k,v)},
                 i)}
      function replace_seq(tbl,i)
       {return iter
                (function(param)
                  {var v=param[2],k=param[1];return replace(tbl,k,v)},
                 i)}
      function of_seq(i)
       {var _a_t_=16,_a_u_=0,tbl=create$2(_a_u_,_a_t_);
        replace_seq(tbl,i);
        return tbl}
      return [0,
              create$2,
              clear$2,
              reset$0,
              copy$0,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$4,
              filter_map_inplace,
              fold$0,
              length$1,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function Make$1(H)
     {var equal=H[1];
      function hash(seed,x){return caml_call1(H[2],x)}
      var
       include=MakeSeeded([0,equal,hash]),
       clear=include[2],
       reset=include[3],
       copy=include[4],
       add=include[5],
       remove=include[6],
       find=include[7],
       find_opt=include[8],
       find_all=include[9],
       replace=include[10],
       mem=include[11],
       iter=include[12],
       filter_map_inplace=include[13],
       fold=include[14],
       length=include[15],
       stats=include[16],
       to_seq=include[17],
       to_seq_keys=include[18],
       to_seq_values=include[19],
       add_seq=include[20],
       replace_seq=include[21],
       _a_r_=include[1];
      function create(sz){return caml_call2(_a_r_,_dJ_,sz)}
      function of_seq(i)
       {var _a_s_=16,tbl=create(_a_s_);
        caml_call2(replace_seq,tbl,i);
        return tbl}
      return [0,
              create,
              clear,
              reset,
              copy,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
    function hash(x){return caml_hash(10,100,0,x)}
    function key_index(h,key)
     {if(4 <= h.length - 1)
       {var _a_p_=h[2].length - 1 - 1 | 0,_a_q_=h[3];
        return caml_hash(10,100,_a_q_,key) & _a_p_}
      return invalid_arg(_dK_)}
    function add$0(h,key,data)
     {var
       i=key_index(h,key),
       _a_m_=h[2],
       bucket=[0,key,data,caml_check_bound(_a_m_,i)[1 + i]],
       _a_n_=h[2];
      caml_check_bound(_a_n_,i)[1 + i] = bucket;
      h[1] = h[1] + 1 | 0;
      var _a_o_=h[2].length - 1 << 1 < h[1]?1:0;
      return _a_o_?resize$0(key_index,h):_a_o_}
    function find_rec(key,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var k=param$0[1],data=param$0[2],next=param$0[3];
          if(0 === caml_compare(key,k))return data;
          var param$0=next;
          continue}
        throw Not_found}}
    function find(h,key)
     {var
       _a_k_=key_index(h,key),
       _a_l_=h[2],
       match=caml_check_bound(_a_l_,_a_k_)[1 + _a_k_];
      if(match)
       {var k1=match[1],d1=match[2],next1=match[3];
        if(0 === caml_compare(key,k1))return d1;
        if(next1)
         {var k2=next1[1],d2=next1[2],next2=next1[3];
          if(0 === caml_compare(key,k2))return d2;
          if(next2)
           {var k3=next2[1],d3=next2[2],next3=next2[3];
            return 0 === caml_compare(key,k3)?d3:find_rec(key,next3)}
          throw Not_found}
        throw Not_found}
      throw Not_found}
    function weak_create(l)
     {var _a_i_=0 <= l?1:0,_a_j_=_a_i_?l <= max_ephe_length?1:0:_a_i_;
      if(1 - _a_j_)invalid_arg(_dL_);
      return caml_weak_create(l)}
    function length$2(x){return x.length - 1 - 2 | 0}
    function raise_if_invalid_offset(e,o,msg)
     {var
       _a_f_=0 <= o?1:0,
       _a_g_=_a_f_?o < length$2(e)?1:0:_a_f_,
       _a_h_=1 - _a_g_;
      return _a_h_?invalid_arg(msg):_a_h_}
    function set(e,o,x)
     {raise_if_invalid_offset(e,o,_dM_);
      if(x){var x$0=x[1];return caml_ephe_set_key(e,o,x$0)}
      return caml_ephe_unset_key(e,o)}
    function get$0(e,o)
     {raise_if_invalid_offset(e,o,_dN_);return caml_weak_get(e,o)}
    function get_copy(e,o)
     {raise_if_invalid_offset(e,o,_dO_);return caml_weak_get_copy(e,o)}
    function check(e,o)
     {raise_if_invalid_offset(e,o,_dP_);return caml_weak_check(e,o)}
    function blit$2(e1,o1,e2,o2,l)
     {if
       (0
        <=
        l
        &&
        0
        <=
        o1
        &&
        !
        ((length$2(e1) - l | 0) < o1)
        &&
        0
        <=
        o2
        &&
        !
        ((length$2(e2) - l | 0) < o2))
       {var _a_d_=0 !== l?1:0,_a_e_=_a_d_?caml_weak_blit(e1,o1,e2,o2,l):_a_d_;
        return _a_e_}
      return invalid_arg(_dQ_)}
    function Make$2(H)
     {var _a8B_=0,emptybucket=weak_create(_a8B_);
      function get_index(t,h){return caml_mod(h & 2147483647,t[1].length - 1)}
      var limit=7;
      function create(sz)
       {var
         sz$0=7 <= sz?sz:7,
         sz$1=max_array_length < sz$0?max_array_length:sz$0,
         _a9$_=0,
         _a_a_=0,
         _a_b_=[0],
         _a_c_=caml_make_vect(sz$1,_a_b_);
        return [0,caml_make_vect(sz$1,emptybucket),_a_c_,limit,_a_a_,_a9$_]}
      function clear(t)
       {var _a96_=t[1].length - 1 - 1 | 0,_a95_=0;
        if(! (_a96_ < 0))
         {var i=_a95_;
          for(;;)
           {var _a97_=t[1];
            caml_check_bound(_a97_,i)[1 + i] = emptybucket;
            var _a98_=[0],_a99_=t[2];
            caml_check_bound(_a99_,i)[1 + i] = _a98_;
            var _a9__=i + 1 | 0;
            if(_a96_ !== i){var i=_a9__;continue}
            break}}
        t[3] = limit;
        t[4] = 0;
        return 0}
      function fold(f,t,init)
       {function fold_bucket(i,b,accu)
         {var i$0=i,accu$0=accu;
          for(;;)
           {if(length$2(b) <= i$0)return accu$0;
            var match=get$0(b,i$0);
            if(match)
             {var
               v=match[1],
               accu$1=caml_call2(f,v,accu$0),
               i$1=i$0 + 1 | 0,
               i$0=i$1,
               accu$0=accu$1;
              continue}
            var i$2=i$0 + 1 | 0,i$0=i$2;
            continue}}
        var _a91_=t[1],_a92_=0;
        return fold_right$0
                (function(_a93_,_a94_){return fold_bucket(_a92_,_a93_,_a94_)},
                 _a91_,
                 init)}
      function iter(f,t)
       {function iter_bucket(i,b)
         {var i$0=i;
          for(;;)
           {if(length$2(b) <= i$0)return 0;
            var match=get$0(b,i$0);
            if(match)
             {var v=match[1];
              caml_call1(f,v);
              var i$1=i$0 + 1 | 0,i$0=i$1;
              continue}
            var i$2=i$0 + 1 | 0,i$0=i$2;
            continue}}
        var _a9Y_=t[1],_a9Z_=0;
        return iter$2(function(_a90_){return iter_bucket(_a9Z_,_a90_)},_a9Y_)}
      function iter_weak(f,t)
       {function iter_bucket(i,j,b)
         {var i$0=i;
          for(;;)
           {if(length$2(b) <= i$0)return 0;
            var match=check(b,i$0);
            if(match)
             {var _a9W_=t[2],_a9X_=caml_check_bound(_a9W_,j)[1 + j];
              caml_call3(f,b,_a9X_,i$0);
              var i$1=i$0 + 1 | 0,i$0=i$1;
              continue}
            var i$2=i$0 + 1 | 0,i$0=i$2;
            continue}}
        var _a9S_=t[1],_a9T_=0;
        return iteri
                (function(_a9U_,_a9V_){return iter_bucket(_a9T_,_a9U_,_a9V_)},
                 _a9S_)}
      function count_bucket(i,b,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(length$2(b) <= i$0)return accu$0;
          var
           _a9R_=check(b,i$0)?1:0,
           accu$1=accu$0 + _a9R_ | 0,
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function count(t)
       {var _a9M_=0,_a9N_=t[1],_a9O_=0;
        return fold_right$0
                (function(_a9P_,_a9Q_){return count_bucket(_a9O_,_a9P_,_a9Q_)},
                 _a9N_,
                 _a9M_)}
      function next_sz(n)
       {return min$0(((3 * n | 0) / 2 | 0) + 3 | 0,max_array_length)}
      function prev_sz(n){return (((n - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0}
      function test_shrink_bucket(t)
       {var
         _a9m_=t[5],
         _a9n_=t[1],
         bucket=caml_check_bound(_a9n_,_a9m_)[1 + _a9m_],
         _a9o_=t[5],
         _a9p_=t[2],
         hbucket=caml_check_bound(_a9p_,_a9o_)[1 + _a9o_],
         len=length$2(bucket),
         prev_len=prev_sz(len),
         _a9q_=0,
         _a9r_=0,
         live=count_bucket(_a9r_,bucket,_a9q_);
        if(live <= prev_len)
         {var
           loop=
            function(i,j)
             {var i$0=i,j$0=j;
              for(;;)
               {var _a9J_=prev_len <= j$0?1:0;
                if(_a9J_)
                 {if(check(bucket,i$0)){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
                  if(check(bucket,j$0))
                   {var _a9K_=1;
                    blit$2(bucket,j$0,bucket,i$0,_a9K_);
                    var _a9L_=caml_check_bound(hbucket,j$0)[1 + j$0];
                    caml_check_bound(hbucket,i$0)[1 + i$0] = _a9L_;
                    var j$1=j$0 - 1 | 0,i$2=i$0 + 1 | 0,i$0=i$2,j$0=j$1;
                    continue}
                  var j$2=j$0 - 1 | 0,j$0=j$2;
                  continue}
                return _a9J_}},
           _a9s_=length$2(bucket) - 1 | 0,
           _a9t_=0;
          loop(_a9t_,_a9s_);
          if(0 === prev_len)
           {var _a9u_=t[5],_a9v_=t[1];
            caml_check_bound(_a9v_,_a9u_)[1 + _a9u_] = emptybucket;
            var _a9x_=t[5],_a9w_=[0],_a9y_=t[2];
            caml_check_bound(_a9y_,_a9x_)[1 + _a9x_] = _a9w_}
          else
           {var newbucket=weak_create(prev_len),_a9B_=0,_a9C_=0;
            blit$2(bucket,_a9C_,newbucket,_a9B_,prev_len);
            var _a9D_=t[5],_a9E_=t[1];
            caml_check_bound(_a9E_,_a9D_)[1 + _a9D_] = newbucket;
            var
             _a9F_=0,
             _a9G_=sub$1(hbucket,_a9F_,prev_len),
             _a9H_=t[5],
             _a9I_=t[2];
            caml_check_bound(_a9I_,_a9H_)[1 + _a9H_] = _a9G_}
          var _a9z_=t[3] < len?1:0,_a9A_=_a9z_?prev_len <= t[3]?1:0:_a9z_;
          if(_a9A_)t[4] = t[4] - 1 | 0}
        t[5] = caml_mod(t[5] + 1 | 0,t[1].length - 1);
        return 0}
      function add_aux(t,setter,d,h,index)
       {var
         _a8__=t[1],
         bucket=caml_check_bound(_a8__,index)[1 + index],
         _a8$_=t[2],
         hashes=caml_check_bound(_a8$_,index)[1 + index],
         sz=length$2(bucket);
        function loop(i)
         {var i$0=i;
          for(;;)
           {if(sz <= i$0)
             {var
               _a9a_=max_array_length - 2 | 0,
               _a9b_=((3 * sz | 0) / 2 | 0) + 3 | 0,
               newsz=min$0(_a9b_,_a9a_);
              if(newsz <= sz)failwith(_dR_);
              var
               newbucket=weak_create(newsz),
               newhashes=caml_make_vect(newsz,0),
               _a9c_=0,
               _a9d_=0;
              blit$2(bucket,_a9d_,newbucket,_a9c_,sz);
              var _a9e_=0,_a9f_=0;
              blit$1(hashes,_a9f_,newhashes,_a9e_,sz);
              caml_call3(setter,newbucket,sz,d);
              caml_check_bound(newhashes,sz)[1 + sz] = h;
              var _a9g_=t[1];
              caml_check_bound(_a9g_,index)[1 + index] = newbucket;
              var _a9h_=t[2];
              caml_check_bound(_a9h_,index)[1 + index] = newhashes;
              var _a9i_=sz <= t[3]?1:0,_a9j_=_a9i_?t[3] < newsz?1:0:_a9i_;
              if(_a9j_)
               {t[4] = t[4] + 1 | 0;
                var i$1=0;
                for(;;)
                 {test_shrink_bucket(t);
                  var _a9l_=i$1 + 1 | 0;
                  if(2 !== i$1){var i$1=_a9l_;continue}
                  break}}
              var _a9k_=((t[1].length - 1) / 2 | 0) < t[4]?1:0;
              return _a9k_?resize(t):_a9k_}
            if(check(bucket,i$0)){var i$2=i$0 + 1 | 0,i$0=i$2;continue}
            caml_call3(setter,bucket,i$0,d);
            caml_check_bound(hashes,i$0)[1 + i$0] = h;
            return 0}}
        return loop(0)}
      function resize(t)
       {var oldlen=t[1].length - 1,newlen=next_sz(oldlen);
        if(oldlen < newlen)
         {var
           newt=create(newlen),
           add_weak=
            function(ob,oh,oi)
             {function setter(nb,ni,param){return blit$2(ob,oi,nb,ni,1)}
              var h=caml_check_bound(oh,oi)[1 + oi];
              return add_aux(newt,setter,0,h,get_index(newt,h))};
          iter_weak(add_weak,t);
          t[1] = newt[1];
          t[2] = newt[2];
          t[3] = newt[3];
          t[4] = newt[4];
          t[5] = caml_mod(t[5],newt[1].length - 1);
          return 0}
        t[3] = max_num;
        t[4] = 0;
        return 0}
      function add(t,d)
       {var _a89_=H[2],h=caml_call1(_a89_,d);
        return add_aux(t,set,[0,d],h,get_index(t,h))}
      function find_or(t,d,ifnotfound)
       {var
         _a85_=H[2],
         h=caml_call1(_a85_,d),
         index=get_index(t,h),
         _a86_=t[1],
         bucket=caml_check_bound(_a86_,index)[1 + index],
         _a87_=t[2],
         hashes=caml_check_bound(_a87_,index)[1 + index],
         sz=length$2(bucket);
        function loop(i)
         {var i$0=i;
          for(;;)
           {if(sz <= i$0)return caml_call2(ifnotfound,h,index);
            if(h === caml_check_bound(hashes,i$0)[1 + i$0])
             {var match=get_copy(bucket,i$0);
              if(match)
               {var v=match[1],_a88_=H[1];
                if(caml_call2(_a88_,v,d))
                 {var match$0=get$0(bucket,i$0);
                  if(match$0){var v$0=match$0[1];return v$0}
                  var i$1=i$0 + 1 | 0,i$0=i$1;
                  continue}}
              var i$2=i$0 + 1 | 0,i$0=i$2;
              continue}
            var i$3=i$0 + 1 | 0,i$0=i$3;
            continue}}
        return loop(0)}
      function merge(t,d)
       {return find_or
                (t,
                 d,
                 function(h,index)
                  {var _a84_=[0,d];add_aux(t,set,_a84_,h,index);return d})}
      function find(t,d)
       {return find_or(t,d,function(h,index){throw Not_found})}
      function find_opt(t,d)
       {var
         _a80_=H[2],
         h=caml_call1(_a80_,d),
         index=get_index(t,h),
         _a81_=t[1],
         bucket=caml_check_bound(_a81_,index)[1 + index],
         _a82_=t[2],
         hashes=caml_check_bound(_a82_,index)[1 + index],
         sz=length$2(bucket);
        function loop(i)
         {var i$0=i;
          for(;;)
           {if(sz <= i$0)return 0;
            if(h === caml_check_bound(hashes,i$0)[1 + i$0])
             {var match=get_copy(bucket,i$0);
              if(match)
               {var v=match[1],_a83_=H[1];
                if(caml_call2(_a83_,v,d))
                 {var v$0=get$0(bucket,i$0);
                  if(v$0)return v$0;
                  var i$1=i$0 + 1 | 0,i$0=i$1;
                  continue}}
              var i$2=i$0 + 1 | 0,i$0=i$2;
              continue}
            var i$3=i$0 + 1 | 0,i$0=i$3;
            continue}}
        return loop(0)}
      function find_shadow(t,d,iffound,ifnotfound)
       {var
         _a8W_=H[2],
         h=caml_call1(_a8W_,d),
         index=get_index(t,h),
         _a8X_=t[1],
         bucket=caml_check_bound(_a8X_,index)[1 + index],
         _a8Y_=t[2],
         hashes=caml_check_bound(_a8Y_,index)[1 + index],
         sz=length$2(bucket);
        function loop(i)
         {var i$0=i;
          for(;;)
           {if(sz <= i$0)return ifnotfound;
            if(h === caml_check_bound(hashes,i$0)[1 + i$0])
             {var match=get_copy(bucket,i$0);
              if(match)
               {var v=match[1],_a8Z_=H[1];
                if(caml_call2(_a8Z_,v,d))return caml_call2(iffound,bucket,i$0)}
              var i$1=i$0 + 1 | 0,i$0=i$1;
              continue}
            var i$2=i$0 + 1 | 0,i$0=i$2;
            continue}}
        return loop(0)}
      function remove(t,d)
       {var _a8V_=0;
        return find_shadow(t,d,function(w,i){return set(w,i,0)},_a8V_)}
      function mem(t,d)
       {var _a8U_=0;return find_shadow(t,d,function(w,i){return 1},_a8U_)}
      function find_all(t,d)
       {var
         _a8Q_=H[2],
         h=caml_call1(_a8Q_,d),
         index=get_index(t,h),
         _a8R_=t[1],
         bucket=caml_check_bound(_a8R_,index)[1 + index],
         _a8S_=t[2],
         hashes=caml_check_bound(_a8S_,index)[1 + index],
         sz=length$2(bucket);
        function loop(i,accu)
         {var i$0=i,accu$0=accu;
          for(;;)
           {if(sz <= i$0)return accu$0;
            if(h === caml_check_bound(hashes,i$0)[1 + i$0])
             {var match=get_copy(bucket,i$0);
              if(match)
               {var v=match[1],_a8T_=H[1];
                if(caml_call2(_a8T_,v,d))
                 {var match$0=get$0(bucket,i$0);
                  if(match$0)
                   {var
                     v$0=match$0[1],
                     accu$1=[0,v$0,accu$0],
                     i$1=i$0 + 1 | 0,
                     i$0=i$1,
                     accu$0=accu$1;
                    continue}
                  var i$2=i$0 + 1 | 0,i$0=i$2;
                  continue}}
              var i$3=i$0 + 1 | 0,i$0=i$3;
              continue}
            var i$4=i$0 + 1 | 0,i$0=i$4;
            continue}}
        return loop(0,0)}
      function stats(t)
       {var len=t[1].length - 1,_a8C_=t[1],lens=map$2(length$2,_a8C_);
        function _a8D_(_a8P_,_a8O_){return caml_int_compare(_a8P_,_a8O_)}
        sort(_a8D_,lens);
        var _a8E_=0;
        function _a8F_(_a8N_,_a8M_){return _a8N_ + _a8M_ | 0}
        var
         totlen=fold_left$0(_a8F_,_a8E_,lens),
         _a8G_=len - 1 | 0,
         _a8I_=len / 2 | 0,
         _a8H_=caml_check_bound(lens,_a8G_)[1 + _a8G_],
         _a8J_=caml_check_bound(lens,_a8I_)[1 + _a8I_],
         _a8K_=0,
         _a8L_=caml_check_bound(lens,0)[1 + _a8K_];
        return [0,len,count(t),totlen,_a8L_,_a8J_,_a8H_]}
      return [0,
              create,
              clear,
              merge,
              add,
              remove,
              find,
              find_opt,
              find_all,
              mem,
              iter,
              fold,
              count,
              stats]}
    function id(x){return x}
    var size=0,unknown=-1;
    function is_known(n){return 0 <= n?1:0}
    var String_tag=[248,_dS_,caml_fresh_oo_id(0)];
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    function pp_clear_queue(state)
     {state[12] = 1;state[13] = 1;return clear$0(state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function pp_output_indent(state,n){return caml_call1(state[21],n)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _a8A_=caml_string_notequal(s,_dT_);
      return _a8A_?format_pp_text(state,caml_ml_string_length(s),s):_a8A_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       _a8y_=state[8],
       real_indent=min$0(_a8y_,indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      var _a8z_=state[10];
      pp_output_indent(state,_a8z_);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_dU_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      pp_output_spaces(state,width);
      return format_string(state,after)}
    function pp_force_break_line(state)
     {var _a8w_=state[2],match=top_opt(_a8w_);
      if(match)
       {var
         match$0=match[1],
         width=match$0[2],
         box_type=match$0[1],
         _a8x_=state[9] < width?1:0;
        return _a8x_?3 < box_type - 1 >>> 0?0:break_line(state,width):_a8x_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var _a8u_=state[28],match=take_opt(_a8u_);
      if(match)
       {var match$0=match[1],size=match$0[1],length=match$0[3];
        state[12] = state[12] - length | 0;
        var _a8v_=id(size);
        state[9] = state[9] + _a8v_ | 0;
        return 0}
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _a8g_=state[3],match=top_opt(_a8g_);
          if(match)
           {var
             match$0=match[1],
             tabs=match$0[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]},
             _a8h_=tabs[1],
             _a8i_=state[6] - state[9] | 0;
            tabs[1] = add_tab(_a8i_,_a8h_);
            return 0}
          return 0;
         case 1:var _a8j_=state[2];pop_opt(_a8j_);return 0;
         case 2:var _a8k_=state[3];pop_opt(_a8k_);return 0;
         case 3:
          var _a8l_=state[2],match$1=top_opt(_a8l_);
          if(match$1)
           {var match$2=match$1[1],width=match$2[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _a8m_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _a8m_?pp_skip_token(state):_a8m_;
         default:
          var _a8n_=state[5],match$3=pop_opt(_a8n_);
          if(match$3)
           {var
             tag_name=match$3[1],
             _a8o_=state[25],
             marker=caml_call1(_a8o_,tag_name);
            return pp_output_string(state,marker)}
          return 0}
      else
       switch(param[0])
        {case 0:var s=param[1];return format_pp_text(state,size,s);
         case 1:
          var
           breaks=param[2],
           fits=param[1],
           off=breaks[2],
           before=breaks[1],
           _a8p_=state[2],
           match$4=top_opt(_a8p_);
          if(match$4)
           {var match$5=match$4[1],width$0=match$5[2],box_type=match$5[1];
            switch(box_type)
             {case 0:return break_same_line(state,fits);
              case 1:return break_new_line(state,breaks,width$0);
              case 2:return break_new_line(state,breaks,width$0);
              case 3:
               return state[9] < (size + caml_ml_string_length(before) | 0)
                       ?break_new_line(state,breaks,width$0)
                       :break_same_line(state,fits);
              case 4:
               return state[11]
                       ?break_same_line(state,fits)
                       :state[9] < (size + caml_ml_string_length(before) | 0)
                         ?break_new_line(state,breaks,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,breaks,width$0)
                           :break_same_line(state,fits);
              default:return break_same_line(state,fits)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n=param[1],
           insertion_point=state[6] - state[9] | 0,
           _a8q_=state[3],
           match$6=top_opt(_a8q_);
          if(match$6)
           {var match$7=match$6[1],tabs$0=match$7[1],_a8r_=tabs$0[1];
            if(_a8r_)
             var
              first=_a8r_[1],
              find=
               function(param)
                {var param$0=param;
                 for(;;)
                  {if(param$0)
                    {var tail=param$0[2],head=param$0[1];
                     if(insertion_point <= head)return head;
                     var param$0=tail;
                     continue}
                   return first}},
              _a8s_=tabs$0[1],
              tab=find(_a8s_);
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,[0,_dW_,offset + n | 0,_dV_])
                    :break_new_line
                      (state,[0,_dY_,tab + off$0 | 0,_dX_],state[6])}
          return 0;
         case 3:
          var
           ty=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           width$1=state[9] - off$1 | 0,
           box_type$0=1 === ty?1:state[9] < size?ty:5;
          return push([0,box_type$0,width$1],state[2]);
         case 4:var tbox=param[1];return push(tbox,state[3]);
         default:
          var
           tag_name$0=param[1],
           _a8t_=state[24],
           marker$0=caml_call1(_a8t_,tag_name$0);
          pp_output_string(state,marker$0);
          return push(tag_name$0,state[5])}}
    function advance_left(state)
     {for(;;)
       {var _a8c_=state[28],match=peek_opt(_a8c_);
        if(match)
         {var
           match$0=match[1],
           size=match$0[1],
           length=match$0[3],
           token=match$0[2],
           pending_count=state[13] - state[12] | 0,
           _a8d_=is_known(size),
           _a8e_=_a8d_ || (state[9] <= pending_count?1:0);
          if(_a8e_)
           {var _a8f_=state[28];
            take(_a8f_);
            var size$0=is_known(size)?id(size):pp_infinity;
            format_pp_token(state,size$0,token);
            state[12] = length + state[12] | 0;
            continue}
          return _a8e_}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],id(size)])}
    function enqueue_string(state,s)
     {var _a8b_=caml_ml_string_length(s);
      return enqueue_string_as(state,id(_a8b_),s)}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_dZ_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var _a73_=state[1],match=top_opt(_a73_);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _a74_=queue_elem[1],
         size=id(_a74_);
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _a75_=queue_elem[2];
        if(typeof _a75_ !== "number")
         switch(_a75_[0])
          {case 3:
            var _a79_=1 - ty;
            if(_a79_)
             {var _a7__=state[13] + size | 0;
              queue_elem[1] = id(_a7__);
              var _a7$_=state[1];
              pop_opt(_a7$_);
              var _a8a_=0}
            else
             var _a8a_=_a79_;
            return _a8a_;
           case 1:
           case 2:
            if(ty)
             {var _a76_=state[13] + size | 0;
              queue_elem[1] = id(_a76_);
              var _a77_=state[1];
              pop_opt(_a77_);
              var _a78_=0}
            else
             var _a78_=ty;
            return _a78_
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b){var _a72_=1;set_size(state,_a72_)}
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var
         _a70_=- state[13] | 0,
         size=id(_a70_),
         elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _a71_=state[14] === state[15]?1:0;
      return _a71_?enqueue_string(state,state[16]):_a71_}
    function pp_open_sys_box(state){return pp_open_box_gen(state,0,3)}
    function pp_close_box(state,param)
     {var _a7V_=1 < state[14]?1:0;
      if(_a7V_)
       {if(state[14] < state[15])
         {var _a7W_=[0,size,1,0];
          pp_enqueue(state,_a7W_);
          var _a7X_=1;
          set_size(state,_a7X_);
          var _a7Y_=0;
          set_size(state,_a7Y_)}
        state[14] = state[14] - 1 | 0;
        var _a7Z_=0}
      else
       var _a7Z_=_a7V_;
      return _a7Z_}
    function pp_open_stag(state,tag_name)
     {if(state[22])
       {var _a7S_=state[4];
        push(tag_name,_a7S_);
        var _a7T_=state[26];
        caml_call1(_a7T_,tag_name)}
      var _a7U_=state[23];
      if(_a7U_)
       {var token=[5,tag_name];return pp_enqueue(state,[0,size,token,0])}
      return _a7U_}
    function pp_close_stag(state,param)
     {if(state[23]){var _a7O_=[0,size,5,0];pp_enqueue(state,_a7O_)}
      var _a7P_=state[22];
      if(_a7P_)
       {var _a7Q_=state[4],match=pop_opt(_a7Q_);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _a7R_=0}
      else
       var _a7R_=_a7P_;
      return _a7R_}
    function pp_close_tag(state,param){return pp_close_stag(state,0)}
    function pp_rinit(state)
     {pp_clear_queue(state);
      var _a7J_=state[1];
      initialize_scan_stack(_a7J_);
      var _a7K_=state[2];
      clear(_a7K_);
      var _a7L_=state[3];
      clear(_a7L_);
      var _a7M_=state[4];
      clear(_a7M_);
      var _a7N_=state[5];
      clear(_a7N_);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_sys_box(state)}
    function clear_tag_stack(state)
     {var _a7I_=state[4];
      return iter$3(function(param){return pp_close_tag(state,0)},_a7I_)}
    function pp_flush_queue(state,b)
     {clear_tag_stack(state);
      for(;;)
       {if(1 < state[14]){var _a7H_=0;pp_close_box(state,_a7H_);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _a7G_=state[14] < state[15]?1:0;
      return _a7G_?enqueue_string_as(state,size,s):_a7G_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,id(isize),s)}
    function str(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp(state,i){return str(state,to_string$1(i))}
    function pp_print_char(state,c)
     {var _a7F_=1;return pp_print_as(state,1,make$1(_a7F_,c))}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_newline(state,param)
     {var _a7E_=1;pp_flush_queue(state,_a7E_);return caml_call1(state[18],0)}
    function pp_print_flush(state,param)
     {var _a7D_=0;pp_flush_queue(state,_a7D_);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _a7C_=state[14] < state[15]?1:0;
      return _a7C_?enqueue_advance(state,[0,size,3,0]):_a7C_}
    function pp_print_custom_break(state,fits,breaks)
     {var
       after=fits[3],
       width=fits[2],
       before=fits[1],
       _a7A_=state[14] < state[15]?1:0;
      if(_a7A_)
       {var
         _a7B_=- state[13] | 0,
         size=id(_a7B_),
         token=[1,fits,breaks],
         length=
          (caml_ml_string_length(before) + width | 0)
          +
          caml_ml_string_length(after)
          |
          0,
         elem=[0,size,token,length];
        return scan_push(state,1,elem)}
      return _a7A_}
    function pp_print_break(state,width,offset)
     {return pp_print_custom_break
              (state,[0,_d3_,width,_d2_],[0,_d1_,offset,_d0_])}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function display_newline(state,param)
     {return caml_call3(state[17],_d4_,0,1)}
    var _d5_=32,_d6_=80,blank_line=make$1(_d6_,_d5_);
    function display_indent(state,n)
     {var n$0=n;
      for(;;)
       {var _a7w_=0 < n$0?1:0;
        if(_a7w_)
         {if(80 < n$0)
           {var _a7x_=80,_a7y_=0,_a7z_=state[17];
            caml_call3(_a7z_,blank_line,_a7y_,_a7x_);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _a7w_}}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag){var s=param[2];return cat(_d8_,cat(s,_d7_))}
      return _d9_}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag){var s=param[2];return cat(_d$_,cat(s,_d__))}
      return _ea_}
    function default_pp_print_open_tag(_a7v_){return 0}
    function default_pp_print_close_tag(_a7u_){return 0}
    function pp_make_formatter(f,g,h,i,j)
     {var _a7c_=0,pp_queue=create$0(_a7c_),sys_tok=[0,unknown,_eb_,0];
      add(sys_tok,pp_queue);
      var _a7d_=0,scan_stack=create(_a7d_);
      initialize_scan_stack(scan_stack);
      var _a7e_=[0,1,sys_tok];
      push(_a7e_,scan_stack);
      var
       pp_margin=78,
       pp_min_space_left=10,
       _a7f_=0,
       _a7g_=0,
       _a7h_=1,
       _a7i_=1,
       _a7j_=1,
       _a7k_=1,
       _a7l_=0,
       _a7m_=68,
       _a7n_=0,
       _a7o_=create(_a7n_),
       _a7p_=0,
       _a7q_=create(_a7p_),
       _a7r_=0,
       _a7s_=create(_a7r_),
       _a7t_=0;
      return [0,
              scan_stack,
              create(_a7t_),
              _a7s_,
              _a7q_,
              _a7o_,
              pp_margin,
              pp_min_space_left,
              _a7m_,
              pp_margin,
              _a7l_,
              _a7k_,
              _a7j_,
              _a7i_,
              _a7h_,
              max_num,
              _ec_,
              f,
              g,
              h,
              i,
              j,
              _a7g_,
              _a7f_,
              default_pp_mark_open_tag,
              default_pp_mark_close_tag,
              default_pp_print_open_tag,
              default_pp_print_close_tag,
              pp_queue]}
    function make_formatter(output,flush)
     {function _a65_(_a7b_){return 0}
      function _a66_(_a7a_){return 0}
      function _a67_(_a6$_){return 0}
      var ppf=pp_make_formatter(output,flush,_a67_,_a66_,_a65_);
      ppf[19] = function(_a6__){return display_newline(ppf,_a6__)};
      ppf[20] = function(_a69_){return display_indent(ppf,_a69_)};
      ppf[21] = function(_a68_){return display_indent(ppf,_a68_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _a61_(param){return flush(oc)}
      return make_formatter
              (function(_a62_,_a63_,_a64_)
                {return output_substring(oc,_a62_,_a63_,_a64_)},
               _a61_)}
    function formatter_of_buffer(b)
     {function _a6W_(_a60_){return 0}
      return make_formatter
              (function(_a6X_,_a6Y_,_a6Z_)
                {return add_substring(b,_a6X_,_a6Y_,_a6Z_)},
               _a6W_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$1(pp_buffer_size)}
    var
     _ed_=0,
     stdbuf=pp_make_buffer(_ed_),
     std_formatter=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr);
    formatter_of_buffer(stdbuf);
    function flush_buffer_formatter(buf,ppf)
     {var _a6V_=0;
      pp_flush_queue(ppf,_a6V_);
      var s=contents(buf);
      reset(buf);
      return s}
    function list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _a6T_=param$0[1];
          if(param$0[2])
           {var vs=param$0[2];
            caml_call2(pp_v,ppf,_a6T_);
            var _a6U_=0;
            caml_call2(pp_sep,ppf,_a6U_);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=vs;
            continue}
          return caml_call2(pp_v,ppf,_a6T_)}
        return 0}}
    function pp_print_text(ppf,s)
     {var len=caml_ml_string_length(s),left=[0,0],right=[0,0];
      function flush(param)
       {var
         _a6Q_=right[1] - left[1] | 0,
         _a6R_=left[1],
         _a6S_=sub$0(s,_a6R_,_a6Q_);
        str(ppf,_a6S_);
        right[1]++;
        left[1] = right[1];
        return 0}
      for(;;)
       {if(right[1] !== len)
         {var _a6K_=right[1],match=caml_string_get(s,_a6K_);
          if(10 === match)
           {var _a6L_=0;flush(_a6L_);var _a6M_=0;pp_force_newline(ppf,_a6M_)}
          else
           if(32 === match)
            {var _a6N_=0;flush(_a6N_);var _a6O_=0;pp_print_space(ppf,_a6O_)}
           else
            right[1]++;
          continue}
        var _a6P_=left[1] !== len?1:0;
        return _a6P_?flush(0):_a6P_}}
    function compute_tag(output,tag_acc)
     {var _a6I_=16,buf=create$1(_a6I_),ppf=formatter_of_buffer(buf);
      caml_call2(output,ppf,tag_acc);
      var _a6J_=0;
      pp_print_flush(ppf,_a6J_);
      var len=length$0(buf);
      return 2 <= len?sub$2(buf,1,len - 2 | 0):contents(buf)}
    function output_formatting_lit(ppf,fmting_lit)
     {if(typeof fmting_lit === "number")
       switch(fmting_lit)
        {case 0:return pp_close_box(ppf,0);
         case 1:return pp_close_tag(ppf,0);
         case 2:return pp_print_flush(ppf,0);
         case 3:return pp_force_newline(ppf,0);
         case 4:return pp_print_newline(ppf,0);
         case 5:return pp_print_char(ppf,64);
         default:return pp_print_char(ppf,37)}
      else
       switch(fmting_lit[0])
        {case 0:
          var offset=fmting_lit[3],width=fmting_lit[2];
          return pp_print_break(ppf,width,offset);
         case 1:return 0;
         default:
          var c=fmting_lit[1],_a6H_=64;
          pp_print_char(ppf,_a6H_);
          return pp_print_char(ppf,c)}}
    function output_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _a6e_=acc[2],_a6f_=acc[1];
          if(0 === _a6e_[0])
           {var acc$0=_a6e_[1];
            output_acc$0(ppf,_a6f_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(output_acc$0,acc$0)])}
          var acc$1=_a6e_[1];
          output_acc$0(ppf,_a6f_);
          var
           _a6g_=compute_tag(output_acc$0,acc$1),
           match=open_box_of_string(_a6g_),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _a6h_=acc[1],switch$1=0;
          if(typeof _a6h_ !== "number" && 0 === _a6h_[0])
           {var _a6j_=_a6h_[2],switch$2=0;
            if(typeof _a6j_ !== "number" && 1 === _a6j_[0])
             {var
               _a6k_=acc[2],
               _a6l_=_a6j_[2],
               _a6m_=_a6h_[1],
               s$0=_a6k_,
               size=_a6l_,
               p$1=_a6m_;
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var _a6i_=acc[2],s=_a6i_,p$0=_a6h_;switch$0 = 2}
          break;
         case 3:
          var _a6n_=acc[1],switch$3=0;
          if(typeof _a6n_ !== "number" && 0 === _a6n_[0])
           {var _a6p_=_a6n_[2],switch$4=0;
            if(typeof _a6p_ !== "number" && 1 === _a6p_[0])
             {var
               _a6q_=acc[2],
               _a6r_=_a6p_[2],
               _a6s_=_a6n_[1],
               c$0=_a6q_,
               size$0=_a6r_,
               p$3=_a6s_;
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var _a6o_=acc[2],c=_a6o_,p$2=_a6n_;switch$0 = 3}
          break;
         case 4:
          var _a6v_=acc[1],switch$5=0;
          if(typeof _a6v_ !== "number" && 0 === _a6v_[0])
           {var _a6x_=_a6v_[2],switch$6=0;
            if(typeof _a6x_ !== "number" && 1 === _a6x_[0])
             {var
               _a6y_=acc[2],
               _a6z_=_a6x_[2],
               _a6A_=_a6v_[1],
               s$0=_a6y_,
               size=_a6z_,
               p$1=_a6A_;
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var _a6w_=acc[2],s=_a6w_,p$0=_a6v_;switch$0 = 2}
          break;
         case 5:
          var _a6B_=acc[1],switch$7=0;
          if(typeof _a6B_ === "number" || ! (0 === _a6B_[0]))
           switch$7 = 1;
          else
           {var _a6D_=_a6B_[2],switch$8=0;
            if(typeof _a6D_ !== "number" && 1 === _a6D_[0])
             {var
               _a6E_=acc[2],
               _a6F_=_a6D_[2],
               _a6G_=_a6B_[1],
               c$0=_a6E_,
               size$0=_a6F_,
               p$3=_a6G_;
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var _a6C_=acc[2],c=_a6C_,p$2=_a6B_;switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:
         output_acc$0(ppf,p$1);return pp_print_as_size(ppf,id(size),s$0);
        case 1:
         output_acc$0(ppf,p$3);
         var _a6t_=1,_a6u_=make$1(_a6t_,c$0);
         return pp_print_as_size(ppf,id(size$0),_a6u_);
        case 2:output_acc$0(ppf,p$0);return str(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function strput_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          strput_acc$0(ppf,p);
          return output_formatting_lit(ppf,f);
         case 1:
          var _a5I_=acc[2],_a5J_=acc[1];
          if(0 === _a5I_[0])
           {var acc$0=_a5I_[1];
            strput_acc$0(ppf,_a5J_);
            return pp_open_stag
                    (ppf,[0,String_tag,compute_tag(strput_acc$0,acc$0)])}
          var acc$1=_a5I_[1];
          strput_acc$0(ppf,_a5J_);
          var
           _a5K_=compute_tag(strput_acc$0,acc$1),
           match=open_box_of_string(_a5K_),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _a5L_=acc[1],switch$1=0;
          if(typeof _a5L_ !== "number" && 0 === _a5L_[0])
           {var _a5N_=_a5L_[2],switch$2=0;
            if(typeof _a5N_ !== "number" && 1 === _a5N_[0])
             {var
               _a5O_=acc[2],
               _a5P_=_a5N_[2],
               _a5Q_=_a5L_[1],
               s$0=_a5O_,
               size=_a5P_,
               p$1=_a5Q_;
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var _a5M_=acc[2],s=_a5M_,p$0=_a5L_;switch$0 = 2}
          break;
         case 3:
          var _a5R_=acc[1],switch$3=0;
          if(typeof _a5R_ !== "number" && 0 === _a5R_[0])
           {var _a5T_=_a5R_[2],switch$4=0;
            if(typeof _a5T_ !== "number" && 1 === _a5T_[0])
             {var
               _a5U_=acc[2],
               _a5V_=_a5T_[2],
               _a5W_=_a5R_[1],
               c$0=_a5U_,
               size$0=_a5V_,
               p$3=_a5W_;
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var _a5S_=acc[2],c=_a5S_,p$2=_a5R_;switch$0 = 3}
          break;
         case 4:
          var _a5Z_=acc[1],switch$5=0;
          if(typeof _a5Z_ !== "number" && 0 === _a5Z_[0])
           {var _a51_=_a5Z_[2],switch$6=0;
            if(typeof _a51_ !== "number" && 1 === _a51_[0])
             {var
               _a52_=acc[2],
               _a53_=_a51_[2],
               _a54_=_a5Z_[1],
               s$0=_a52_,
               size=_a53_,
               p$1=_a54_;
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var _a50_=acc[2],s=_a50_,p$0=_a5Z_;switch$0 = 2}
          break;
         case 5:
          var _a55_=acc[1],switch$7=0;
          if(typeof _a55_ === "number" || ! (0 === _a55_[0]))
           switch$7 = 1;
          else
           {var _a57_=_a55_[2],switch$8=0;
            if(typeof _a57_ !== "number" && 1 === _a57_[0])
             {var
               _a58_=acc[2],
               _a59_=_a57_[2],
               _a5__=_a55_[1],
               c$0=_a58_,
               size$0=_a59_,
               p$3=_a5__;
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var _a56_=acc[2],c=_a56_,p$2=_a55_;switch$0 = 3}
          break;
         case 6:
          var _a5$_=acc[1];
          if(typeof _a5$_ !== "number" && 0 === _a5$_[0])
           {var _a6b_=_a5$_[2];
            if(typeof _a6b_ !== "number" && 1 === _a6b_[0])
             {var f$1=acc[2],size$1=_a6b_[2],p$4=_a5$_[1];
              strput_acc$0(ppf,p$4);
              var _a6c_=0,_a6d_=caml_call1(f$1,_a6c_);
              return pp_print_as_size(ppf,id(size$1),_a6d_)}}
          var f$0=acc[2];
          strput_acc$0(ppf,_a5$_);
          var _a6a_=0;
          return str(ppf,caml_call1(f$0,_a6a_));
         case 7:
          var p$5=acc[1];strput_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          strput_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:
         strput_acc$0(ppf,p$1);return pp_print_as_size(ppf,id(size),s$0);
        case 1:
         strput_acc$0(ppf,p$3);
         var _a5X_=1,_a5Y_=make$1(_a5X_,c$0);
         return pp_print_as_size(ppf,id(size$0),_a5Y_);
        case 2:strput_acc$0(ppf,p$0);return str(ppf,s);
        default:strput_acc$0(ppf,p$2);return pp_print_char(ppf,c)}}
    function kfprintf$0(k,ppf,param)
     {var fmt=param[1],_a5H_=0;
      return make_printf
              (function(acc){output_acc$0(ppf,acc);return caml_call1(k,ppf)},
               _a5H_,
               fmt)}
    function pp$0(ppf)
     {function _a5E_(_a5G_){return 0}
      return function(_a5F_){return kfprintf$0(_a5E_,ppf,_a5F_)}}
    function kprintf$0(k,param)
     {var
       fmt=param[1],
       _a5D_=0,
       b=pp_make_buffer(_a5D_),
       ppf=formatter_of_buffer(b);
      function k$0(acc)
       {strput_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function sprintf$0(fmt){return kprintf$0(id,fmt)}
    function kasprintf(k,param)
     {var
       fmt=param[1],
       _a5C_=0,
       b=pp_make_buffer(_a5C_),
       ppf=formatter_of_buffer(b);
      function k$0(acc)
       {output_acc$0(ppf,acc);
        return caml_call1(k,flush_buffer_formatter(b,ppf))}
      return make_printf(k$0,0,fmt)}
    function asprintf(fmt){return kasprintf(id,fmt)}
    function flush_standard_formatters(param)
     {var _a5B_=0;
      pp_print_flush(std_formatter,_a5B_);
      return pp_print_flush(err_formatter,0)}
    at_exit(flush_standard_formatters);
    var null_char=0;
    function next_char(ib)
     {try
       {var _a5y_=0,_a5z_=ib[7],c=caml_call1(_a5z_,_a5y_);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_a5A_)
       {_a5A_ = caml_wrap_exception(_a5A_);
        if(_a5A_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _a5A_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function eof(ib){return ib[1]}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function line_count(ib){return ib[5]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      clear$1(token_buffer);
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function token_count(ib){return ib[6]}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {var _a5x_=ib[8];add_char(_a5x_,c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$3(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$1(default_token_buffer_size),
              iname]}
    function from_string$0(s)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var _a5w_=i[1],c=caml_string_get(s,_a5w_);
        i[1]++;
        return c}
      return create$3(1,next)}
    var len=1024;
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var buf=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1])
         {var _a5u_=i[1],c=caml_bytes_get(buf,_a5u_);i[1]++;return c}
        if(eof[1])throw End_of_file;
        var _a5v_=0;
        lim[1] = input(ic,buf,_a5v_,len);
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(buf,0))}
      return create$3(iname,next)}
    var _ef_=[1,_ee_,stdin];
    from_ic(scan_raise_at_end,_ef_,stdin);
    var Scan_failure=[248,_eg_,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_eh_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_ei_),message))}
    function bad_end_of_input(message)
     {return bad_input(caml_call1(sprintf(_ej_),message))}
    function bad_float(param){return bad_input(_ek_)}
    function bad_hex_float(param){return bad_input(_el_)}
    function character_mismatch_err(c,ci)
     {return caml_call2(sprintf(_em_),c,ci)}
    function character_mismatch(c,ci)
     {return bad_input(character_mismatch_err(c,ci))}
    function skip_whites(ib)
     {for(;;)
       {var c=peek_char(ib),_a5s_=1 - eof(ib);
        if(_a5s_)
         {var _a5t_=c - 9 | 0,switch$0=0;
          if(4 < _a5t_ >>> 0)
           {if(23 === _a5t_)switch$0 = 1}
          else
           if(1 < _a5t_ - 2 >>> 0)switch$0 = 1;
          if(switch$0){invalidate_current_char(ib);continue}
          return 0}
        return _a5s_}}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_newline(ib)
     {var ci=checked_peek_char(ib);
      return 10 === ci
              ?invalidate_current_char(ib)
              :13 === ci
                ?(invalidate_current_char(ib),check_this_char(ib,10))
                :character_mismatch(10,ci)}
    function check_char(ib,c)
     {return 10 === c
              ?check_newline(ib)
              :32 === c?skip_whites(ib):check_this_char(ib,c)}
    function token_char(ib)
     {var _a5r_=token_string(ib);return caml_string_get(_a5r_,0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,_en_)
              ?caml_string_notequal(s,_eo_)
                ?bad_input(caml_call1(sprintf(_ep_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_eq_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var _a5n_=token_string(ib),tok=cat(_er_,_a5n_);break;
        case 3:var _a5o_=token_string(ib),tok=cat(_es_,_a5o_);break;
        case 4:var _a5p_=token_string(ib),tok=cat(_et_,_a5p_);break;
        case 5:var _a5q_=token_string(ib),tok=cat(_eu_,_a5q_);break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_int(conv,ib)
     {var _a5m_=token_int_literal(conv,ib);return caml_int_of_string(_a5m_)}
    function token_float(ib)
     {var _a5l_=token_string(ib);return caml_float_of_string(_a5l_)}
    function token_nativeint(conv,ib)
     {var _a5k_=token_int_literal(conv,ib);return caml_int_of_string(_a5k_)}
    function token_int32(conv,ib)
     {var _a5j_=token_int_literal(conv,ib);return caml_int_of_string(_a5j_)}
    function token_int64(conv,ib)
     {var _a5i_=token_int_literal(conv,ib);return caml_int64_of_string(_a5i_)}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(eof(ib))return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_unsigned_decimal_int(width,ib)
     {if(0 === width)return bad_token_length(_ev_);
      var c=checked_peek_char(ib);
      if(9 < c - 48 >>> 0)return bad_input(caml_call1(sprintf(_ew_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_star(digitp,width,ib)
     {function scan_digits(width,ib)
       {var width$0=width;
        for(;;)
         {if(0 === width$0)return width$0;
          var c=peek_char(ib);
          if(eof(ib))return width$0;
          if(caml_call1(digitp,c))
           {var width$1=store_char(width$0,ib,c),width$0=width$1;continue}
          if(95 === c)
           {var width$2=ignore_char(width$0,ib),width$0=width$2;continue}
          return width$0}}
      return scan_digits(width,ib)}
    function scan_digit_plus(basis,digitp,width,ib)
     {if(0 === width)return bad_token_length(_ex_);
      var c=checked_peek_char(ib);
      if(caml_call1(digitp,c))
       {var width$0=store_char(width,ib,c);
        return scan_digit_star(digitp,width$0,ib)}
      return bad_input(caml_call2(sprintf(_ey_),c,basis))}
    function is_binary_digit(param){return 1 < param - 48 >>> 0?0:1}
    function scan_binary_int(_a5g_,_a5h_)
     {return scan_digit_plus(_ez_,is_binary_digit,_a5g_,_a5h_)}
    function is_octal_digit(param){return 7 < param - 48 >>> 0?0:1}
    function scan_octal_int(_a5e_,_a5f_)
     {return scan_digit_plus(_eA_,is_octal_digit,_a5e_,_a5f_)}
    function is_hexa_digit(param)
     {var _a5d_=param - 48 | 0,switch$0=0;
      if(22 < _a5d_ >>> 0)
       {if(! (5 < _a5d_ - 49 >>> 0))switch$0 = 1}
      else
       if(6 < _a5d_ - 10 >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_a5b_,_a5c_)
     {return scan_digit_plus(_eB_,is_hexa_digit,_a5b_,_a5c_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_unsigned_decimal_int(width$0,ib)}
    function scan_unsigned_int(width,ib)
     {var c=checked_peek_char(ib);
      if(48 === c)
       {var width$0=store_char(width,ib,c);
        if(0 === width$0)return width$0;
        var c$0=peek_char(ib);
        if(eof(ib))return width$0;
        var switch$0=0;
        if(99 <= c$0)
         {if(111 === c$0)return scan_octal_int(store_char(width$0,ib,c$0),ib);
          if(120 === c$0)switch$0 = 1}
        else
         if(88 === c$0)
          switch$0 = 1;
         else
          if(98 <= c$0)return scan_binary_int(store_char(width$0,ib,c$0),ib);
        return switch$0
                ?scan_hexadecimal_int(store_char(width$0,ib,c$0),ib)
                :scan_decimal_digit_star(width$0,ib)}
      return scan_unsigned_decimal_int(width,ib)}
    function scan_optionally_signed_int(width,ib)
     {var width$0=scan_sign(width,ib);return scan_unsigned_int(width$0,ib)}
    function scan_int_conversion(conv,width,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width,ib);
        case 1:return scan_optionally_signed_decimal(width,ib);
        case 2:return scan_optionally_signed_int(width,ib);
        case 3:return scan_octal_int(width,ib);
        case 4:return scan_unsigned_decimal_int(width,ib);
        default:return scan_hexadecimal_int(width,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      return eof(ib)
              ?width
              :9 < c - 48 >>> 0
                ?width
                :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(eof(ib))return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_integer_part(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_float(width,precision,ib)
     {var width$0=scan_integer_part(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(eof(ib))return [0,width$0,precision];
      if(46 === c)
       {var
         width$1=store_char(width$0,ib,c),
         precision$0=min$0(width$1,precision),
         width$2=
          width$1
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$2,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {return 25 < c - 65 >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _a46_=len - 1 | 0,
       _a45_=0;
      if(! (_a46_ < 0))
       {var i=_a45_;
        for(;;)
         {var
           c=peek_char(ib),
           _a47_=caml_string_get(str,i),
           _a48_=lowercase(_a47_);
          if(lowercase(c) !== _a48_){var _a49_=0;caml_call1(error,_a49_)}
          if(0 === width$0[1]){var _a4__=0;caml_call1(error,_a4__)}
          var _a4$_=width$0[1];
          width$0[1] = store_char(_a4$_,ib,c);
          var _a5a_=i + 1 | 0;
          if(_a46_ !== i){var i=_a5a_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _a4M_=0 === width?1:0,_a4N_=_a4M_ || end_of_input(ib);
      if(_a4N_){var _a4O_=0;bad_hex_float(_a4O_)}
      var
       width$0=scan_sign(width,ib),
       _a4P_=0 === width$0?1:0,
       _a4Q_=_a4P_ || end_of_input(ib);
      if(_a4Q_){var _a4R_=0;bad_hex_float(_a4R_)}
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _a4S_=0 === width$1?1:0,
             _a4T_=_a4S_ || end_of_input(ib);
            if(_a4T_){var _a4U_=0;bad_hex_float(_a4U_)}
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,_eC_)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _a4Y_=0 === width$3?1:0,
           _a4Z_=_a4Y_ || end_of_input(ib);
          if(_a4Z_){var _a40_=0;bad_hex_float(_a40_)}
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,_eE_);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_a41_=match - 46 | 0,switch$1=0;
            if(34 < _a41_ >>> 0)
             {if(66 === _a41_)switch$1 = 1}
            else
             if(32 < _a41_ - 1 >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min$0(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _a42_=0 === width$9?1:0,
                 _a43_=_a42_ || end_of_input(ib);
                if(_a43_){var _a44_=0;bad_hex_float(_a44_)}
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _a4V_=0 === width$2?1:0,
         _a4W_=_a4V_ || end_of_input(ib);
        if(_a4W_){var _a4X_=0;bad_hex_float(_a4X_)}
        return check_case_insensitive_string(width$2,ib,bad_hex_float,_eD_)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _a4G_=0 === width?1:0,_a4H_=_a4G_ || end_of_input(ib);
      if(_a4H_){var _a4I_=0;bad_float(_a4I_)}
      var
       width$0=scan_decimal_digit_star(width,ib),
       _a4J_=0 === width$0?1:0,
       _a4K_=_a4J_ || end_of_input(ib);
      if(_a4K_){var _a4L_=0;bad_float(_a4L_)}
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min$0(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       if(30 < switcher - 1 >>> 0)return scan_exponent_part(width$0,ib);
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _a4k_=0 === width?1:0,_a4l_=_a4k_ || end_of_input(ib);
      if(_a4l_){var _a4m_=0;bad_float(_a4m_)}
      var
       width$0=scan_sign(width,ib),
       _a4n_=0 === width$0?1:0,
       _a4o_=_a4n_ || end_of_input(ib);
      if(_a4o_){var _a4p_=0;bad_float(_a4p_)}
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _a4q_=0 === width$1?1:0,
           _a4r_=_a4q_ || end_of_input(ib);
          if(_a4r_){var _a4s_=0;bad_float(_a4s_)}
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _a4t_=0 === width$2?1:0,
          _a4u_=_a4t_ || end_of_input(ib);
         if(_a4u_){var _a4v_=0;bad_float(_a4v_)}
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _a4w_=0 === width$3?1:0,
          _a4x_=_a4w_ || end_of_input(ib);
         if(_a4x_){var _a4y_=0;bad_float(_a4y_)}
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _a4z_=0 === width$4?1:0,
          _a4A_=_a4z_ || end_of_input(ib);
         if(_a4A_){var _a4B_=0;bad_float(_a4B_)}
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min$0(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          if(30 < switcher - 1 >>> 0)var width$7=width$4;else switch$0 = 1;
         if(switch$0)
          var _a4F_=0,width$8=bad_float(_a4F_);
         else
          var width$8=width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _a4C_=0 === width$9?1:0,
            _a4D_=_a4C_ || end_of_input(ib);
           if(_a4D_){var _a4E_=0;bad_hex_float(_a4E_)}
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {function loop(width)
       {var width$0=width;
        for(;;)
         {if(0 === width$0)return width$0;
          var c=peek_char(ib);
          if(eof(ib))return width$0;
          if(stp)
           {var c$0=stp[1];
            if(c === c$0)return skip_char(width$0,ib);
            var width$1=store_char(width$0,ib,c),width$0=width$1;
            continue}
          var _a4j_=c - 9 | 0,switch$0=0;
          if(4 < _a4j_ >>> 0)
           {if(23 === _a4j_)switch$0 = 1}
          else
           if(1 < _a4j_ - 2 >>> 0)switch$0 = 1;
          if(switch$0)return width$0;
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      return loop(width)}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function char_for_backslash(c)
     {if(110 <= c)
       {if(! (117 <= c))
         switch(c - 110 | 0)
          {case 0:return 10;case 4:return 13;case 6:return 9}}
      else
       if(98 === c)return 8;
      return c}
    function decimal_value_of_char(c){return c - 48 | 0}
    function char_for_decimal_code(c0,c1,c2)
     {var
       _a4h_=decimal_value_of_char(c2),
       _a4i_=10 * decimal_value_of_char(c1) | 0,
       c=((100 * decimal_value_of_char(c0) | 0) + _a4i_ | 0) + _a4h_ | 0;
      if(0 <= c && ! (255 < c))return char_of_int(c);
      return bad_input(caml_call3(sprintf(_eF_),c0,c1,c2))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function char_for_hexadecimal_code(c1,c2)
     {var
       _a4g_=hexadecimal_value_of_char(c2),
       c=(16 * hexadecimal_value_of_char(c1) | 0) + _a4g_ | 0;
      if(0 <= c && ! (255 < c))return char_of_int(c);
      return bad_input(caml_call2(sprintf(_eG_),c1,c2))}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return eof(ib)?bad_end_of_input(message):c}
    function check_next_char_for_char(_a4e_,_a4f_)
     {return check_next_char(_eH_,_a4e_,_a4f_)}
    function check_next_char_for_string(_a4c_,_a4d_)
     {return check_next_char(_eI_,_a4c_,_a4d_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher=c0 - 92 | 0;
          if(! (28 < switcher >>> 0))
           switch(switcher)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_a4b_=c - 48 | 0,switch$0=0;
                  if(22 < _a4b_ >>> 0)
                   {if(! (5 < _a4b_ - 49 >>> 0))switch$0 = 1}
                  else
                   if(6 < _a4b_ - 10 >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               _a39_=0,
               c1=get_digit(_a39_),
               _a3__=0,
               c2=get_digit(_a3__);
              return store_char
                      (width - 2 | 0,ib,char_for_hexadecimal_code(c1,c2));
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib);
               return 9 < c - 48 >>> 0?bad_input_escape(c):c},
            _a3$_=0,
            c1$0=get_digit$0(_a3$_),
            _a4a_=0,
            c2$0=get_digit$0(_a4a_);
           return store_char
                   (width - 2 | 0,ib,char_for_decimal_code(c0,c1$0,c2$0))}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      return switch$0
              ?store_char(width,ib,char_for_backslash(c0))
              :bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      function find_char(width)
       {var c=check_next_char_for_char(width,ib);
        if(92 === c)
         {var _a38_=ignore_char(width,ib);
          return find_stop(scan_backslash_char(_a38_,ib))}
        return find_stop(store_char(width,ib,c))}
      function find_start(width)
       {var c=checked_peek_char(ib);
        return 39 === c
                ?find_char(ignore_char(width,ib))
                :character_mismatch(39,c)}
      return find_start(width)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var _a37_=ignore_char(width$0,ib);
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return scan_backslash(counter$0,_a37_)}
            return caml_trampoline_return(scan_backslash,[0,_a37_])}
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}}
      function scan_backslash(counter,width)
       {var match=check_next_char_for_string(width,ib);
        if(10 === match)
         {var _a34_=ignore_char(width,ib);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return skip_spaces(counter$0,_a34_)}
          return caml_trampoline_return(skip_spaces,[0,_a34_])}
        if(13 === match)
         {var _a35_=ignore_char(width,ib);
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return skip_newline(counter$1,_a35_)}
          return caml_trampoline_return(skip_newline,[0,_a35_])}
        var _a36_=scan_backslash_char(width,ib);
        if(counter < 50)
         {var counter$2=counter + 1 | 0;return find_stop$0(counter$2,_a36_)}
        return caml_trampoline_return(find_stop$0,[0,_a36_])}
      function skip_newline(counter,width)
       {var match=check_next_char_for_string(width,ib);
        if(10 === match)
         {var _a31_=ignore_char(width,ib);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return skip_spaces(counter$0,_a31_)}
          return caml_trampoline_return(skip_spaces,[0,_a31_])}
        var _a32_=13,_a33_=store_char(width,ib,_a32_);
        if(counter < 50)
         {var counter$1=counter + 1 | 0;return find_stop$0(counter$1,_a33_)}
        return caml_trampoline_return(find_stop$0,[0,_a33_])}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      function find_start(width)
       {var c=checked_peek_char(ib);
        return 34 === c
                ?find_stop(ignore_char(width,ib))
                :character_mismatch(34,c)}
      return find_start(width)}
    function scan_bool(ib)
     {var c=checked_peek_char(ib);
      if(102 === c)
       var m=5;
      else
       if(116 === c)
        var m=4;
       else
        var _a30_=caml_call1(sprintf(_eJ_),c),m=bad_input(_a30_);
      return scan_string(0,m,ib)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_a3W_=0 < i$0?1:0;
          if(_a3W_)
           {var _a3X_=1 - eof(ib);
            if(_a3X_)
             var
              _a3Y_=is_in_char_set(char_set,c),
              _a3Z_=_a3Y_?c !== stp?1:0:_a3Y_;
            else
             var _a3Z_=_a3X_}
          else
           var _a3Z_=_a3W_;
          if(_a3Z_)
           {store_char(max_num,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _a3Z_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _a3V_=1 - eof(ib);
        if(_a3V_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _a3V_}
      return scan_chars(width,-1)}
    function scanf_bad_input(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_eK_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return line_count(ib);
        case 1:return char_count(ib);
        default:return token_count(ib)}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max_num}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _eL_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       _a3T_=caml_ml_string_length(str) - 2 | 0,
       _a3U_=2,
       sub_str=sub$0(str,_a3U_,_a3T_);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var
            rest=fmt$0[3],
            fmtty=fmt$0[2],
            _a3Q_=symm(fmtty),
            _a3R_=erase_rel(_a3Q_);
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$1,k,_a3R_,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_a3R_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _a3S_=fmt$0[1];
           if(0 === _a3S_[0])
            {var
              rest$0=fmt$0[2],
              match=_a3S_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_a3S_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_ignored_format_readers(counter$0,k,ign,rest$2)}
           return caml_trampoline_return
                   (take_ignored_format_readers,[0,k,ign,rest$2]);
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            _a3P_=symm(ty1),
            ty=trans(_a3P_,ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_ignored_format_readers(counter,k,ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:
          if(counter < 50)
           {var counter$1=counter + 1 | 0;
            return take_format_readers$0(counter$1,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 1:
          if(counter < 50)
           {var counter$2=counter + 1 | 0;
            return take_format_readers$0(counter$2,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 2:
          return function(reader)
           {function new_k(readers_rest)
             {return caml_call1(k,[0,reader,readers_rest])}
            return take_format_readers(new_k,fmt)};
         default:
          if(counter < 50)
           {var counter$3=counter + 1 | 0;
            return take_format_readers$0(counter$3,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
      else
       switch(ign[0])
        {case 0:
          if(counter < 50)
           {var counter$4=counter + 1 | 0;
            return take_format_readers$0(counter$4,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 1:
          if(counter < 50)
           {var counter$5=counter + 1 | 0;
            return take_format_readers$0(counter$5,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 2:
          if(counter < 50)
           {var counter$6=counter + 1 | 0;
            return take_format_readers$0(counter$6,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 3:
          if(counter < 50)
           {var counter$7=counter + 1 | 0;
            return take_format_readers$0(counter$7,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 4:
          if(counter < 50)
           {var counter$8=counter + 1 | 0;
            return take_format_readers$0(counter$8,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 5:
          if(counter < 50)
           {var counter$9=counter + 1 | 0;
            return take_format_readers$0(counter$9,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 6:
          if(counter < 50)
           {var counter$10=counter + 1 | 0;
            return take_format_readers$0(counter$10,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 7:
          if(counter < 50)
           {var counter$11=counter + 1 | 0;
            return take_format_readers$0(counter$11,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 8:
          if(counter < 50)
           {var counter$12=counter + 1 | 0;
            return take_format_readers$0(counter$12,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         case 9:
          var fmtty=ign[2];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return take_fmtty_format_readers$0(counter$0,k,fmtty,fmt)}
          return caml_trampoline_return
                  (take_fmtty_format_readers$0,[0,k,fmtty,fmt]);
         case 10:
          if(counter < 50)
           {var counter$13=counter + 1 | 0;
            return take_format_readers$0(counter$13,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt]);
         default:
          if(counter < 50)
           {var counter$14=counter + 1 | 0;
            return take_format_readers$0(counter$14,k,fmt)}
          return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function make_scanf(ib,fmt,readers)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return 0;
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1],_a29_=0;
           scan_char(_a29_,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$0[1],_a2__=0;
           scan_caml_char(_a2__,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _a2$_=fmt$0[1],_a3a_=fmt$0[2];
           if(typeof _a3a_ !== "number")
            switch(_a3a_[0])
             {case 17:
               var
                rest$2=_a3a_[2],
                fmting_lit=_a3a_[1],
                match=stopper_of_formatting_lit(fmting_lit),
                str=match[2],
                stp=match[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$2];
               return pad_prec_scanf
                       (ib,str_rest,readers,_a2$_,0,scan$0,token_string);
              case 18:
               var _a3b_=_a3a_[1];
               if(0 === _a3b_[0])
                {var
                  rest$3=_a3a_[2],
                  match$0=_a3b_[1],
                  fmt$1=match$0[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_eM_,width,ib)},
                  _a3c_=0;
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$1,rest$3),
                          readers,
                          _a2$_,
                          _a3c_,
                          scan$1,
                          token_string)}
               var
                rest$4=_a3a_[2],
                match$1=_a3b_[1],
                fmt$2=match$1[1],
                scan$2=
                 function(width,param,ib){return scan_string(_eN_,width,ib)},
                _a3d_=0;
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$2,rest$4),
                        readers,
                        _a2$_,
                        _a3d_,
                        scan$2,
                        token_string)
              }
           var
            rest$1=fmt$0[2],
            scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,rest$1,readers,_a2$_,0,scan,token_string);
          case 3:
           var
            rest$5=fmt$0[2],
            pad=fmt$0[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$5,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$6=fmt$0[4],
            prec=fmt$0[3],
            pad$0=fmt$0[2],
            iconv=fmt$0[1],
            _a3e_=char_of_iconv(iconv),
            c$1=integer_conversion_of_char(_a3e_),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(c$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(_a3O_){return token_int(c$1,_a3O_)});
          case 5:
           var
            rest$7=fmt$0[4],
            prec$0=fmt$0[3],
            pad$1=fmt$0[2],
            iconv$0=fmt$0[1],
            _a3f_=char_of_iconv(iconv$0),
            c$2=integer_conversion_of_char(_a3f_),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(c$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(_a3N_){return token_int32(c$2,_a3N_)});
          case 6:
           var
            rest$8=fmt$0[4],
            prec$1=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$1=fmt$0[1],
            _a3g_=char_of_iconv(iconv$1),
            c$3=integer_conversion_of_char(_a3g_),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(c$3,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(_a3M_){return token_nativeint(c$3,_a3M_)});
          case 7:
           var
            rest$9=fmt$0[4],
            prec$2=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$2=fmt$0[1],
            _a3h_=char_of_iconv(iconv$2),
            c$4=integer_conversion_of_char(_a3h_),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(c$4,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$9,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(_a3L_){return token_int64(c$4,_a3L_)});
          case 8:
           switch(fmt$0[1][2])
            {case 5:
             case 8:
              var rest$11=fmt$0[4],prec$4=fmt$0[3],pad$5=fmt$0[2];
              return pad_prec_scanf
                      (ib,
                       rest$11,
                       readers,
                       pad$5,
                       prec$4,
                       scan_caml_float,
                       token_float);
             case 6:
             case 7:
              var rest$12=fmt$0[4],prec$5=fmt$0[3],pad$6=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$12,readers,pad$6,prec$5,scan_hex_float,token_float);
             default:
              var rest$10=fmt$0[4],prec$3=fmt$0[3],pad$4=fmt$0[2];
              return pad_prec_scanf
                      (ib,rest$10,readers,pad$4,prec$3,scan_float,token_float)}
          case 9:
           var
            rest$13=fmt$0[2],
            pad$7=fmt$0[1],
            scan$8=function(param,_a3K_,ib){return scan_bool(ib)};
           return pad_prec_scanf(ib,rest$13,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$14=fmt$0[1];
           if(end_of_input(ib)){var fmt$0=rest$14;continue}
           return bad_input(_eO_);
          case 11:
           var
            rest$15=fmt$0[2],
            str$0=fmt$0[1],
            _a3i_=function(_a3J_){return check_char(ib,_a3J_)};
           iter$1(_a3i_,str$0);
           var fmt$0=rest$15;
           continue;
          case 12:
           var rest$16=fmt$0[2],chr=fmt$0[1];
           check_char(ib,chr);
           var fmt$0=rest$16;
           continue;
          case 13:
           var
            rest$17=fmt$0[3],
            fmtty=fmt$0[2],
            pad_opt=fmt$0[1],
            _a3j_=width_of_pad_opt(pad_opt);
           scan_caml_string(_a3j_,ib);
           var s=token_string(ib);
           try
            {var _a3l_=format_of_string_fmtty(s,fmtty),fmt$3=_a3l_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],_a3k_=bad_input(msg),fmt$3=_a3k_}
           return [0,fmt$3,make_scanf(ib,rest$17,readers)];
          case 14:
           var
            rest$18=fmt$0[3],
            fmtty$0=fmt$0[2],
            pad_opt$0=fmt$0[1],
            _a3m_=width_of_pad_opt(pad_opt$0);
           scan_caml_string(_a3m_,ib);
           var s$0=token_string(ib);
           try
            {var
              _a3r_=0,
              match$2=fmt_ebb_of_string(_a3r_,s$0),
              fmt$6=match$2[1],
              _a3s_=0,
              match$3=fmt_ebb_of_string(_a3s_,s$0),
              fmt$7=match$3[1],
              _a3t_=symm(fmtty$0),
              _a3u_=erase_rel(_a3t_),
              fmt$8=type_format(fmt$7,_a3u_),
              _a3v_=erase_rel(fmtty$0),
              _a3w_=type_format(fmt$6,_a3v_),
              fmt$5=fmt$8,
              fmt$4=_a3w_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _a3n_=bad_input(msg$0),
              _a3o_=_a3n_[2],
              _a3p_=_a3n_[1],
              fmt$5=_a3o_,
              fmt$4=_a3p_}
           var _a3q_=concat_fmt(fmt$5,rest$18);
           return [0,[0,fmt$4,s$0],make_scanf(ib,_a3q_,readers)];
          case 15:return invalid_arg(_eP_);
          case 16:return invalid_arg(_eQ_);
          case 17:
           var
            rest$19=fmt$0[2],
            formatting_lit=fmt$0[1],
            _a3x_=string_of_formatting_lit(formatting_lit),
            _a3y_=function(_a3I_){return check_char(ib,_a3I_)};
           iter$1(_a3y_,_a3x_);
           var fmt$0=rest$19;
           continue;
          case 18:
           var _a3z_=fmt$0[1];
           if(0 === _a3z_[0])
            {var rest$20=fmt$0[2],match$4=_a3z_[1],fmt$9=match$4[1],_a3A_=64;
             check_char(ib,_a3A_);
             var _a3B_=123;
             check_char(ib,_a3B_);
             var fmt$10=concat_fmt(fmt$9,rest$20),fmt$0=fmt$10;
             continue}
           var rest$21=fmt$0[2],match$5=_a3z_[1],fmt$11=match$5[1],_a3C_=64;
           check_char(ib,_a3C_);
           var _a3D_=91;
           check_char(ib,_a3D_);
           var fmt$12=concat_fmt(fmt$11,rest$21),fmt$0=fmt$12;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(_eR_);
          case 20:
           var _a3E_=fmt$0[1],_a3F_=fmt$0[3];
           if(typeof _a3F_ !== "number" && 17 === _a3F_[0])
            {var
              rest$23=_a3F_[2],
              fmting_lit$0=_a3F_[1],
              char_set$0=fmt$0[2],
              match$6=stopper_of_formatting_lit(fmting_lit$0),
              str$1=match$6[2],
              stp$0=match$6[1],
              width$0=width_of_pad_opt(_a3E_),
              _a3H_=[0,stp$0];
             scan_chars_in_char_set(char_set$0,_a3H_,width$0,ib);
             var s$2=token_string(ib),str_rest$0=[11,str$1,rest$23];
             return [0,s$2,make_scanf(ib,str_rest$0,readers)]}
           var
            rest$22=fmt$0[3],
            char_set=fmt$0[2],
            width=width_of_pad_opt(_a3E_),
            _a3G_=0;
           scan_chars_in_char_set(char_set,_a3G_,width,ib);
           var s$1=token_string(ib);
           return [0,s$1,make_scanf(ib,rest$22,readers)];
          case 21:
           var
            rest$24=fmt$0[2],
            counter=fmt$0[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$24,readers)];
          case 22:
           var rest$25=fmt$0[1],c$5=checked_peek_char(ib);
           return [0,c$5,make_scanf(ib,rest$25,readers)];
          case 23:
           var
            rest$26=fmt$0[2],
            ign=fmt$0[1],
            match$7=param_format_of_ignored_format(ign,rest$26),
            fmt$13=match$7[1],
            match$8=make_scanf(ib,fmt$13,readers);
           if(match$8){var arg_rest=match$8[2];return arg_rest}
           throw [0,Assert_failure,_eS_];
          default:return invalid_arg(_eT_)}}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)return invalid_arg(_eU_);
          caml_call3(scan,max_num,max_num,ib);
          var x=caml_call1(token,ib);
          return [0,x,make_scanf(ib,fmt,readers)]}
        var p=prec[1];
        caml_call3(scan,max_num,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(pad[1])
           {var _a28_=pad[2];
            if(typeof prec === "number")
             {if(prec)return invalid_arg(_eV_);
              caml_call3(scan,_a28_,max_num,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            var p$0=prec[1];
            caml_call3(scan,_a28_,p$0,ib);
            var x$2=caml_call1(token,ib);
            return [0,x$2,make_scanf(ib,fmt,readers)]}
          return invalid_arg(_eW_)}
        return invalid_arg(_eX_)}}
    function kscanf(ib,ef,param)
     {var str=param[2],fmt=param[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             r=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=r;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _a27_=[0,make_scanf(ib,fmt,readers)],_a21_=_a27_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          var switch$0=0;
          if
           (exc[1]
            !==
            Scan_failure
            &&
            exc[1]
            !==
            Failure
            &&
            exc
            !==
            End_of_file)
           {if(exc[1] !== Invalid_argument)throw exc;
            var
             msg=exc[2],
             _a22_=escaped$1(str),
             _a23_=cat(_a22_,_eY_),
             _a24_=cat(_eZ_,_a23_),
             _a25_=cat(msg,_a24_),
             _a26_=invalid_arg(_a25_),
             _a20_=_a26_;
            switch$0 = 1}
          if(! switch$0)var _a20_=[1,exc];
          var _a21_=_a20_}
        if(0 === _a21_[0]){var args=_a21_[1];return apply(f,args)}
        var exc=_a21_[1];
        return caml_call2(ef,ib,exc)}
      return take_format_readers(k,fmt)}
    function sscanf(s,fmt)
     {return kscanf(from_string$0(s),scanf_bad_input,fmt)}
    function register_exception(name,exn)
     {if(caml_obj_tag(exn) === 248)
       var slot=exn;
      else
       var _a2Z_=0,slot=exn[1 + _a2Z_];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function public_method_label(s)
     {var accu=[0,0],_a2W_=caml_ml_string_length(s) - 1 | 0,_a2V_=0;
      if(! (_a2W_ < 0))
       {var i=_a2V_;
        for(;;)
         {var _a2X_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _a2X_ | 0;
          var _a2Y_=i + 1 | 0;
          if(_a2W_ !== i){var i=_a2Y_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    function compare$4(x,y){return caml_string_compare(x,y)}
    var Vars=_af_([0,compare$4]);
    function compare$5(x,y){return caml_string_compare(x,y)}
    var Meths=_af_([0,compare$5]);
    function compare$6(x,y){return caml_int_compare(x,y)}
    var
     Labs=_af_([0,compare$6]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n)
     {if(2 < n){var _a2U_=(n + 1 | 0) / 2 | 0;return fit_size(_a2U_) * 2 | 0}
      return n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       _a2L_=(len * 2 | 0) + 2 | 0,
       methods=caml_make_vect(_a2L_,dummy_met),
       _a2M_=0;
      caml_check_bound(methods,0)[1 + _a2M_] = len;
      var _a2N_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0,_a2O_=1;
      caml_check_bound(methods,1)[1 + _a2O_] = _a2N_;
      var _a2Q_=len - 1 | 0,_a2P_=0;
      if(! (_a2Q_ < 0))
       {var i=_a2P_;
        for(;;)
         {var
           _a2S_=(i * 2 | 0) + 3 | 0,
           _a2R_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_a2S_)[1 + _a2S_] = _a2R_;
          var _a2T_=i + 1 | 0;
          if(_a2Q_ !== i){var i=_a2T_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$1(array,new_size)
     {var old_size=array[2].length - 1,_a2G_=old_size < new_size?1:0;
      if(_a2G_)
       {var
         new_buck=caml_make_vect(new_size,dummy_met),
         _a2H_=0,
         _a2I_=0,
         _a2J_=array[2];
        blit$1(_a2J_,_a2I_,new_buck,_a2H_,old_size);
        array[2] = new_buck;
        var _a2K_=0}
      else
       var _a2K_=_a2G_;
      return _a2K_}
    function put(array,label,element)
     {var _a2E_=label + 1 | 0;
      resize$1(array,_a2E_);
      var _a2F_=array[2];
      caml_check_bound(_a2F_,label)[1 + label] = element;
      return 0}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1,_a2D_=index + 1 | 0;
      resize$1(table,_a2D_);
      return index}
    function get_method_label(table,name)
     {try
       {var _a2z_=table[3],_a2A_=Meths[28],_a2B_=caml_call2(_a2A_,name,_a2z_);
        return _a2B_}
      catch(_a2C_)
       {_a2C_ = caml_wrap_exception(_a2C_);
        if(_a2C_ === Not_found)
         {var label=new_method(table),_a2u_=table[3],_a2v_=Meths[4];
          table[3] = caml_call3(_a2v_,name,label,_a2u_);
          var _a2w_=table[4],_a2x_=1,_a2y_=Labs[4];
          table[4] = caml_call3(_a2y_,label,_a2x_,_a2w_);
          return label}
        throw _a2C_}}
    function get_method_labels(table,names)
     {return map$2
              (function(_a2t_){return get_method_label(table,_a2t_)},names)}
    function set_method(table,label,element)
     {method_count[1]++;
      var _a2r_=table[4],_a2s_=Labs[28];
      return caml_call2(_a2s_,label,_a2r_)
              ?put(table,label,element)
              :(table[6] = [0,[0,label,element],table[6]],0)}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _a2n_=table[7],_a2o_=Vars[28],_a2p_=caml_call2(_a2o_,name,_a2n_);
        return _a2p_}
      catch(_a2q_)
       {_a2q_ = caml_wrap_exception(_a2q_);
        if(_a2q_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_e0_))
           {var _a2l_=table[7],_a2m_=Vars[4];
            table[7] = caml_call3(_a2m_,name,index,_a2l_)}
          return index}
        throw _a2q_}}
    function create_table(public_methods)
     {if(0 === public_methods)return new_table([0]);
      var
       tags=map$2(public_method_label,public_methods),
       table=new_table(tags);
      function _a2f_(i,met)
       {var lab=(i * 2 | 0) + 2 | 0,_a2g_=table[3],_a2h_=Meths[4];
        table[3] = caml_call3(_a2h_,met,lab,_a2g_);
        var _a2i_=table[4],_a2j_=1,_a2k_=Labs[4];
        table[4] = caml_call3(_a2k_,lab,_a2j_,_a2i_);
        return 0}
      iteri(_a2f_,public_methods);
      return table}
    function init_class(table)
     {inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
      var _a2c_=table[8];
      table[8] = rev(_a2c_);
      var _a2d_=1,_a2e_=table[2];
      return resize$1
              (table,
               3
               +
               ((caml_check_bound(_a2e_,1)[1 + _a2d_] * 16 | 0) / 32 | 0)
               |
               0)}
    function make_class(pub_meths,class_init)
     {var table=create_table(pub_meths),env_init=caml_call1(class_init,table);
      init_class(table);
      var _a2a_=0,_a2b_=0;
      return [0,caml_call1(env_init,_a2b_),class_init,env_init,_a2a_]}
    function create_object_opt(obj_0,table)
     {if(obj_0)return obj_0;
      var _a19_=table[1],obj=caml_obj_block(248,_a19_),_a1__=table[2],_a1$_=0;
      obj[1 + _a1$_] = _a1__;
      return caml_set_oo_id(obj)}
    function get_const(x){return function(obj){return x}}
    function get_var(n){return function(obj){return obj[1 + n]}}
    function get_env(e,n){return function(obj){return obj[1 + e][1 + n]}}
    function get_meth(n)
     {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
    function set_var(n){return function(obj,x){obj[1 + n] = x;return 0}}
    function app_const(f,x){return function(obj){return caml_call1(f,x)}}
    function app_var(f,n)
     {return function(obj){return caml_call1(f,obj[1 + n])}}
    function app_env(f,e,n)
     {return function(obj){return caml_call1(f,obj[1 + e][1 + n])}}
    function app_meth(f,n)
     {return function(obj)
       {var _a18_=obj[1][1 + n];return caml_call1(f,caml_call1(_a18_,obj))}}
    function app_const_const(f,x,y)
     {return function(obj){return caml_call2(f,x,y)}}
    function app_const_var(f,x,n)
     {return function(obj){return caml_call2(f,x,obj[1 + n])}}
    function app_const_meth(f,x,n)
     {return function(obj)
       {var _a17_=obj[1][1 + n];return caml_call2(f,x,caml_call1(_a17_,obj))}}
    function app_var_const(f,n,x)
     {return function(obj){return caml_call2(f,obj[1 + n],x)}}
    function app_meth_const(f,n,x)
     {return function(obj)
       {var _a16_=obj[1][1 + n];return caml_call2(f,caml_call1(_a16_,obj),x)}}
    function app_const_env(f,x,e,n)
     {return function(obj){return caml_call2(f,x,obj[1 + e][1 + n])}}
    function app_env_const(f,e,n,x)
     {return function(obj){return caml_call2(f,obj[1 + e][1 + n],x)}}
    function meth_app_const(n,x)
     {return function(obj){return caml_call2(obj[1][1 + n],obj,x)}}
    function meth_app_var(n,m)
     {return function(obj){return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
    function meth_app_env(n,e,m)
     {return function(obj)
       {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
    function meth_app_meth(n,m)
     {return function(obj)
       {var _a14_=obj[1][1 + m],_a15_=caml_call1(_a14_,obj);
        return caml_call2(obj[1][1 + n],obj,_a15_)}}
    function send_const(m,x,c)
     {return function(obj){return caml_call1(caml_get_public_method(x,m,0),x)}}
    function send_var(m,n,c)
     {return function(obj)
       {var _a13_=obj[1 + n];
        return caml_call1(caml_get_public_method(_a13_,m,0),_a13_)}}
    function send_env(m,e,n,c)
     {return function(obj)
       {var _a12_=obj[1 + e][1 + n];
        return caml_call1(caml_get_public_method(_a12_,m,0),_a12_)}}
    function send_meth(m,n,c)
     {return function(obj)
       {var _a10_=obj[1][1 + n],_a11_=caml_call1(_a10_,obj);
        return caml_call1(caml_get_public_method(_a11_,m,0),_a11_)}}
    function new_cache(table)
     {var n=new_method(table),switch$0=0;
      if(0 !== (n % 2 | 0))
       {var _a1Y_=1,_a1Z_=table[2];
        if
         (!
          ((2
            +
            ((caml_check_bound(_a1Z_,1)[1 + _a1Y_] * 16 | 0) / 32 | 0)
            |
            0)
           <
           n))
         {var n$0=new_method(table);switch$0 = 1}}
      if(! switch$0)var n$0=n;
      var _a1W_=0,_a1X_=table[2];
      caml_check_bound(_a1X_,n$0)[1 + n$0] = _a1W_;
      return n$0}
    function method_impl(table,i,arr)
     {function next(param)
       {i[1]++;var _a1V_=i[1];return caml_check_bound(arr,_a1V_)[1 + _a1V_]}
      var _a02_=0,clo=next(_a02_);
      if(typeof clo === "number")
       switch(clo)
        {case 0:var _a03_=0,x=next(_a03_);return get_const(x);
         case 1:var _a04_=0,n=next(_a04_);return get_var(n);
         case 2:
          var _a05_=0,e=next(_a05_),_a06_=0,n$0=next(_a06_);
          return get_env(e,n$0);
         case 3:var _a07_=0,n$1=next(_a07_);return get_meth(n$1);
         case 4:var _a08_=0,n$2=next(_a08_);return set_var(n$2);
         case 5:
          var _a09_=0,f=next(_a09_),_a0__=0,x$0=next(_a0__);
          return app_const(f,x$0);
         case 6:
          var _a0$_=0,f$0=next(_a0$_),_a1a_=0,n$3=next(_a1a_);
          return app_var(f$0,n$3);
         case 7:
          var
           _a1b_=0,
           f$1=next(_a1b_),
           _a1c_=0,
           e$0=next(_a1c_),
           _a1d_=0,
           n$4=next(_a1d_);
          return app_env(f$1,e$0,n$4);
         case 8:
          var _a1e_=0,f$2=next(_a1e_),_a1f_=0,n$5=next(_a1f_);
          return app_meth(f$2,n$5);
         case 9:
          var
           _a1g_=0,
           f$3=next(_a1g_),
           _a1h_=0,
           x$1=next(_a1h_),
           _a1i_=0,
           y=next(_a1i_);
          return app_const_const(f$3,x$1,y);
         case 10:
          var
           _a1j_=0,
           f$4=next(_a1j_),
           _a1k_=0,
           x$2=next(_a1k_),
           _a1l_=0,
           n$6=next(_a1l_);
          return app_const_var(f$4,x$2,n$6);
         case 11:
          var
           _a1m_=0,
           f$5=next(_a1m_),
           _a1n_=0,
           x$3=next(_a1n_),
           _a1o_=0,
           e$1=next(_a1o_),
           _a1p_=0,
           n$7=next(_a1p_);
          return app_const_env(f$5,x$3,e$1,n$7);
         case 12:
          var
           _a1q_=0,
           f$6=next(_a1q_),
           _a1r_=0,
           x$4=next(_a1r_),
           _a1s_=0,
           n$8=next(_a1s_);
          return app_const_meth(f$6,x$4,n$8);
         case 13:
          var
           _a1t_=0,
           f$7=next(_a1t_),
           _a1u_=0,
           n$9=next(_a1u_),
           _a1v_=0,
           x$5=next(_a1v_);
          return app_var_const(f$7,n$9,x$5);
         case 14:
          var
           _a1w_=0,
           f$8=next(_a1w_),
           _a1x_=0,
           e$2=next(_a1x_),
           _a1y_=0,
           n$10=next(_a1y_),
           _a1z_=0,
           x$6=next(_a1z_);
          return app_env_const(f$8,e$2,n$10,x$6);
         case 15:
          var
           _a1A_=0,
           f$9=next(_a1A_),
           _a1B_=0,
           n$11=next(_a1B_),
           _a1C_=0,
           x$7=next(_a1C_);
          return app_meth_const(f$9,n$11,x$7);
         case 16:
          var _a1D_=0,n$12=next(_a1D_),_a1E_=0,x$8=next(_a1E_);
          return meth_app_const(n$12,x$8);
         case 17:
          var _a1F_=0,n$13=next(_a1F_),_a1G_=0,m=next(_a1G_);
          return meth_app_var(n$13,m);
         case 18:
          var
           _a1H_=0,
           n$14=next(_a1H_),
           _a1I_=0,
           e$3=next(_a1I_),
           _a1J_=0,
           m$0=next(_a1J_);
          return meth_app_env(n$14,e$3,m$0);
         case 19:
          var _a1K_=0,n$15=next(_a1K_),_a1L_=0,m$1=next(_a1L_);
          return meth_app_meth(n$15,m$1);
         case 20:
          var _a1M_=0,m$2=next(_a1M_),_a1N_=0,x$9=next(_a1N_);
          return send_const(m$2,x$9,new_cache(table));
         case 21:
          var _a1O_=0,m$3=next(_a1O_),_a1P_=0,n$16=next(_a1P_);
          return send_var(m$3,n$16,new_cache(table));
         case 22:
          var
           _a1Q_=0,
           m$4=next(_a1Q_),
           _a1R_=0,
           e$4=next(_a1R_),
           _a1S_=0,
           n$17=next(_a1S_);
          return send_env(m$4,e$4,n$17,new_cache(table));
         default:
          var _a1T_=0,m$5=next(_a1T_),_a1U_=0,n$18=next(_a1U_);
          return send_meth(m$5,n$18,new_cache(table))}
      return clo}
    function set_methods(table,methods)
     {var len=methods.length - 1,i=[0,0];
      for(;;)
       {if(i[1] < len)
         {var
           _a01_=i[1],
           label=caml_check_bound(methods,_a01_)[1 + _a01_],
           clo=method_impl(table,i,methods);
          set_method(table,label,clo);
          i[1]++;
          continue}
        return 0}}
    try
     {caml_sys_getenv(_wH_)}
    catch(_a00_)
     {_a00_ = caml_wrap_exception(_a00_);if(_a00_ !== Not_found)throw _a00_}
    try
     {caml_sys_getenv(_wG_)}
    catch(_a0Z_)
     {_a0Z_ = caml_wrap_exception(_a0Z_);if(_a0Z_ !== Not_found)throw _a0Z_}
    if(caml_string_notequal(os_type$0,_e1_))
     caml_string_notequal(os_type$0,_e2_);
    function traditional2revised
     (get_raw_token,get_startp,get_endp,parser,lexer)
     {var _a0X_=0,lexbuf=from_string(_a0X_,_e3_);
      function lexer$0(lexbuf)
       {var _a0Y_=0,token=caml_call1(lexer,_a0Y_);
        lexbuf[11] = caml_call1(get_startp,token);
        lexbuf[12] = caml_call1(get_endp,token);
        return caml_call1(get_raw_token,token)}
      return caml_call2(parser,lexer$0,lexbuf)}
    function traditional2revised$0(parser)
     {function _a0T_(param){var endp=param[3];return endp}
      function _a0U_(param){var startp=param[2];return startp}
      function _a0V_(param){var token=param[1];return token}
      return function(_a0W_)
       {return traditional2revised(_a0V_,_a0U_,_a0T_,parser,_a0W_)}}
    function Make$3(T)
     {var
       number=T[1],
       token2terminal=T[2],
       token2value=T[3],
       error_terminal=T[4],
       error_value=T[5],
       foreach_terminal=T[6],
       production_index=T[7],
       find_production=T[8],
       default_reduction=T[9],
       action=T[10],
       goto_nt=T[11],
       goto_prod=T[12],
       maybe_goto_nt=T[13],
       is_start=T[14],
       Error=T[15],
       semantic_action=T[16],
       may_reduce=T[17],
       log=T[18],
       Log=T[19];
      function check_for_default_reduction(env)
       {return caml_call4
                (T[9],env[4],announce_reduce,check_for_error_token,env)}
      function run(env,please_discard)
       {if(log){var _a0R_=env[4],_a0S_=Log[1];caml_call1(_a0S_,_a0R_)}
        return please_discard?[0,env]:check_for_default_reduction(env)}
      function discard(env,triple)
       {if(log)
         {var
           endp=triple[3],
           startp=triple[2],
           token=triple[1],
           _a0O_=T[2],
           _a0P_=caml_call1(_a0O_,token),
           _a0Q_=Log[4];
          caml_call3(_a0Q_,_a0P_,startp,endp)}
        var env$0=[0,0,triple,env[3],env[4]];
        return check_for_default_reduction(env$0)}
      function check_for_error_token(env)
       {if(env[1])
         {if(log){var _a0I_=0,_a0J_=Log[6];caml_call1(_a0J_,_a0I_)}
          return [3,env]}
        var
         match=env[2],
         token=match[1],
         _a0K_=T[3],
         _a0L_=caml_call1(_a0K_,token),
         _a0M_=T[2],
         _a0N_=caml_call1(_a0M_,token);
        return caml_call7
                (T[10],env[4],_a0N_,_a0L_,shift,announce_reduce,initiate,env)}
      function shift(env,please_discard,terminal,value,s)
       {if(log){var _a0H_=Log[2];caml_call2(_a0H_,terminal,s)}
        var
         match=env[2],
         endp=match[3],
         startp=match[2],
         stack=[0,env[4],value,startp,endp,env[3]],
         new_env=[0,env[1],env[2],stack,s];
        return [1,env,new_env,please_discard]}
      function accept(env,prod)
       {if(log){var _a0G_=Log[3];caml_call1(_a0G_,prod)}
        var v=env[3][2];
        return [4,v]}
      function announce_reduce(env,prod)
       {var _a0F_=T[14];
        return caml_call1(_a0F_,prod)?accept(env,prod):[2,env,prod]}
      function reduce(env,prod)
       {if(log){var _a0B_=Log[3];caml_call1(_a0B_,prod)}
        var
         _a0C_=T[16],
         stack=caml_call2(_a0C_,prod,env),
         _a0D_=stack[1],
         _a0E_=T[12],
         current=caml_call2(_a0E_,_a0D_,prod),
         env$0=[0,env[1],env[2],stack,current];
        return run(env$0,0)}
      function initiate(env)
       {if(log){var _a0z_=0,_a0A_=Log[5];caml_call1(_a0A_,_a0z_)}
        var env$0=[0,1,env[2],env[3],env[4]];
        return [3,env$0]}
      function error_fail(strategy,env)
       {if(-798940232 <= strategy)return 0;
        var cell=env[3],next=cell[5];
        if(next === cell)return 0;
        var env$0=[0,env[1],env[2],next,cell[1]];
        return [3,env$0]}
      function error_reduce(strategy,env,prod)
       {if(log){var _a0x_=env[4],_a0y_=Log[7];caml_call1(_a0y_,_a0x_)}
        return -798940232 <= strategy
                ?announce_reduce(env,prod)
                :reduce(env,prod)}
      function error_shift(strategy,env,please_discard,terminal,value,s)
       {var _a0t_=T[4];
        if(caml_equal(terminal,_a0t_))
         {var _a0u_=T[5];
          if(caml_equal(value,_a0u_))
           {if(log){var _a0v_=env[4],_a0w_=Log[7];caml_call1(_a0w_,_a0v_)}
            var please_discard$0=-798940232 <= strategy?0:please_discard;
            return shift(env,please_discard$0,terminal,value,s)}}
        throw [0,Assert_failure,_e5_]}
      function error(strategy,env)
       {if(env[1])
         {var
           _a0i_=function(_a0s_){return error_fail(strategy,_a0s_)},
           _a0j_=
            function(_a0q_,_a0r_){return error_reduce(strategy,_a0q_,_a0r_)},
           _a0k_=
            function(_a0l_,_a0m_,_a0n_,_a0o_,_a0p_)
             {return error_shift(strategy,_a0l_,_a0m_,_a0n_,_a0o_,_a0p_)};
          return caml_call7(T[10],env[4],T[4],T[5],_a0k_,_a0j_,_a0i_,env)}
        throw [0,Assert_failure,_e4_]}
      function start(s,initial)
       {var empty=[],_a0h_=[0,s,T[5],initial,initial,empty];
        caml_update_dummy(empty,_a0h_);
        var env=[0,0,[0,0,initial,initial],empty,s];
        return run(env,1)}
      function offer(param)
       {if(typeof param !== "number" && 0 === param[0])
         {var env=param[1];return function(_a0g_){return discard(env,_a0g_)}}
        return invalid_arg(_e6_)}
      function resume(opt,checkpoint)
       {if(opt)var sth=opt[1],strategy=sth;else var strategy=-822677911;
        if(typeof checkpoint !== "number")
         switch(checkpoint[0])
          {case 1:
            var please_discard=checkpoint[3],env=checkpoint[2];
            return run(env,please_discard);
           case 2:
            var prod=checkpoint[2],env$0=checkpoint[1];
            return reduce(env$0,prod);
           case 3:var env$1=checkpoint[1];return error(strategy,env$1)
           }
        return invalid_arg(_e7_)}
      function lexer_lexbuf_to_supplier(lexer,lexbuf,param)
       {var token=caml_call1(lexer,lexbuf),startp=lexbuf[11],endp=lexbuf[12];
        return [0,token,startp,endp]}
      function loop(opt,read,checkpoint)
       {var opt$0=opt,checkpoint$0=checkpoint;
        for(;;)
         {if(opt$0)var sth=opt$0[1],strategy=sth;else var strategy=-822677911;
          if(typeof checkpoint$0 === "number")
           throw Error;
          else
           switch(checkpoint$0[0])
            {case 0:
              var
               _a0e_=0,
               triple=caml_call1(read,_a0e_),
               checkpoint$1=caml_call1(offer(checkpoint$0),triple),
               opt$1=[0,strategy],
               opt$0=opt$1,
               checkpoint$0=checkpoint$1;
              continue;
             case 4:var v=checkpoint$0[1];return v;
             default:
              var
               _a0f_=[0,strategy],
               checkpoint$2=resume(_a0f_,checkpoint$0),
               opt$2=[0,strategy],
               opt$0=opt$2,
               checkpoint$0=checkpoint$2;
              continue}}}
      function entry(strategy,s,lexer,lexbuf)
       {var initial=lexbuf[12],_a0c_=start(s,initial);
        return loop
                ([0,strategy],
                 function(_a0d_)
                  {return lexer_lexbuf_to_supplier(lexer,lexbuf,_a0d_)},
                 _a0c_)}
      function loop_handle(succeed,fail,read,checkpoint)
       {var checkpoint$0=checkpoint;
        for(;;)
         {if(typeof checkpoint$0 !== "number")
           switch(checkpoint$0[0])
            {case 0:
              var
               _a0a_=0,
               triple=caml_call1(read,_a0a_),
               checkpoint$1=caml_call1(offer(checkpoint$0),triple),
               checkpoint$0=checkpoint$1;
              continue;
             case 4:var v=checkpoint$0[1];return caml_call1(succeed,v);
             case 3:break;
             default:
              var
               _a0b_=0,
               checkpoint$2=resume(_a0b_,checkpoint$0),
               checkpoint$0=checkpoint$2;
              continue}
          return caml_call1(fail,checkpoint$0)}}
      function _aZR_(succeed,fail,read,param)
       {var param$0=param;
        for(;;)
         {var checkpoint=param$0[2],inputneeded=param$0[1];
          if(typeof checkpoint !== "number")
           switch(checkpoint[0])
            {case 0:
              var
               _aZ__=0,
               triple=caml_call1(read,_aZ__),
               checkpoint$0=caml_call1(offer(checkpoint),triple),
               param$1=[0,checkpoint,checkpoint$0],
               param$0=param$1;
              continue;
             case 4:var v=checkpoint[1];return caml_call1(succeed,v);
             case 3:break;
             default:
              var
               _aZ$_=0,
               checkpoint$1=resume(_aZ$_,checkpoint),
               param$2=[0,inputneeded,checkpoint$1],
               param$0=param$2;
              continue}
          return caml_call2(fail,inputneeded,checkpoint)}}
      function loop_handle_undo(succeed,fail,read,checkpoint)
       {var switch$0=0;
        if(typeof checkpoint !== "number" && 0 === checkpoint[0])
         {var _aZ9_=1;switch$0 = 1}
        if(! switch$0)var _aZ9_=0;
        if(_aZ9_)return _aZR_(succeed,fail,read,[0,checkpoint,checkpoint]);
        throw [0,Assert_failure,_e8_]}
      function shifts(checkpoint)
       {var checkpoint$0=checkpoint;
        for(;;)
         {if(typeof checkpoint$0 !== "number")
           switch(checkpoint$0[0])
            {case 1:var env=checkpoint$0[1];return [0,env];
             case 2:
              var
               _aZ8_=0,
               checkpoint$1=resume(_aZ8_,checkpoint$0),
               checkpoint$0=checkpoint$1;
              continue;
             case 3:return 0
             }
          throw [0,Assert_failure,_e9_]}}
      function acceptable(checkpoint,token,pos)
       {var
         triple=[0,token,pos,pos],
         checkpoint$0=caml_call1(offer(checkpoint),triple),
         match=shifts(checkpoint$0);
        return match?1:0}
      function _aZS_(cell,current)
       {return [246,
                function(param)
                 {var next=cell[5];
                  if(next === cell)return 0;
                  var
                   element=[0,current,cell[2],cell[3],cell[4]],
                   _aZ7_=cell[1];
                  return [0,element,_aZS_(next,_aZ7_)]}]}
      function stack(env){return _aZS_(env[3],env[4])}
      function top(env)
       {var cell=env[3],next=cell[5];
        return next === cell?0:[0,[0,env[4],cell[2],cell[3],cell[4]]]}
      function equal(env1,env2)
       {var _aZ2_=env1[3] === env2[3]?1:0;
        if(_aZ2_)
         var
          _aZ3_=env2[4],
          _aZ4_=caml_call1(number,_aZ3_),
          _aZ5_=env1[4],
          _aZ6_=caml_call1(number,_aZ5_) === _aZ4_?1:0;
        else
         var _aZ6_=_aZ2_;
        return _aZ6_}
      function current_state_number(env){return caml_call1(number,env[4])}
      function positions(param)
       {var match=param[2],endp=match[3],startp=match[2];
        return [0,startp,endp]}
      function state_has_default_reduction(state)
       {var _aZZ_=0;
        function _aZ0_(env){return 0}
        function _aZ1_(env,prod){return 1}
        return caml_call4(T[9],state,_aZ1_,_aZ0_,_aZZ_)}
      function env_has_default_reduction(env)
       {return state_has_default_reduction(env[4])}
      function pop(env)
       {var cell=env[3],next=cell[5];
        return next === cell?0:[0,[0,env[1],env[2],next,cell[1]]]}
      function force_reduction(prod,env)
       {var _aZT_=env[4],_aZU_=T[17];
        if(caml_call2(_aZU_,_aZT_,prod))
         {var _aZV_=T[14];
          if(caml_call1(_aZV_,prod))throw [0,Assert_failure,_e__];
          var
           _aZW_=T[16],
           stack=caml_call2(_aZW_,prod,env),
           _aZX_=stack[1],
           _aZY_=T[12],
           current=caml_call2(_aZY_,_aZX_,prod);
          return [0,env[1],env[2],stack,current]}
        return invalid_arg(_e$_)}
      function input_needed(env){return [0,env]}
      function pop_many(i,env)
       {var i$0=i,env$0=env;
        for(;;)
         {if(0 === i$0)return [0,env$0];
          var match=pop(env$0);
          if(match)
           {var env$1=match[1],i$1=i$0 - 1 | 0,i$0=i$1,env$0=env$1;continue}
          return 0}}
      function get(i,env)
       {var match=pop_many(i,env);
        if(match){var env$0=match[1];return top(env$0)}
        return 0}
      return [0,
              number,
              token2terminal,
              token2value,
              error_terminal,
              error_value,
              foreach_terminal,
              production_index,
              find_production,
              default_reduction,
              action,
              goto_nt,
              goto_prod,
              maybe_goto_nt,
              is_start,
              Error,
              semantic_action,
              may_reduce,
              log,
              Log,
              run,
              discard,
              check_for_default_reduction,
              check_for_error_token,
              shift,
              announce_reduce,
              reduce,
              accept,
              initiate,
              error,
              error_shift,
              error_reduce,
              error_fail,
              start,
              offer,
              resume,
              lexer_lexbuf_to_supplier,
              loop,
              entry,
              loop_handle,
              loop_handle_undo,
              shifts,
              acceptable,
              stack,
              top,
              equal,
              current_state_number,
              positions,
              state_has_default_reduction,
              env_has_default_reduction,
              pop,
              force_reduction,
              input_needed,
              pop_many,
              get]}
    function read(s,i){return caml_string_unsafe_get(s,i)}
    function get1(s,i)
     {var
       _aZQ_=i >>> 3 | 0,
       c=read(s,_aZQ_),
       c$0=c >>> (lnot(i) & 7) | 0,
       c$1=c$0 & 1;
      return c$1}
    function get$1(param,i)
     {var s=param[2],k=param[1],switcher=k - 1 | 0;
      if(! (15 < switcher >>> 0))
       switch(switcher)
        {case 0:return get1(s,i);
         case 1:
          var
           _aZM_=i >>> 2 | 0,
           c=read(s,_aZM_),
           c$0=c >>> (2 * (lnot(i) & 3) | 0) | 0,
           c$1=c$0 & 3;
          return c$1;
         case 3:
          var
           _aZN_=i >>> 1 | 0,
           c$2=read(s,_aZN_),
           c$3=c$2 >>> (4 * (lnot(i) & 1) | 0) | 0,
           c$4=c$3 & 15;
          return c$4;
         case 7:return read(s,i);
         case 15:
          var j$0=2 * i | 0,_aZO_=j$0 + 1 | 0,_aZP_=read(s,_aZO_);
          return (read(s,j$0) << 8) + _aZP_ | 0
         }
      if(32 === k)
       {var
         j=4 * i | 0,
         _aZG_=j + 3 | 0,
         _aZH_=read(s,_aZG_),
         _aZI_=j + 2 | 0,
         _aZJ_=read(s,_aZI_),
         _aZK_=j + 1 | 0,
         _aZL_=read(s,_aZK_);
        return (((((read(s,j) << 8) + _aZL_ | 0) << 8) + _aZJ_ | 0) << 8)
               +
               _aZH_
               |
               0}
      throw [0,Assert_failure,_fa_]}
    function unflatten1(param,i,j)
     {var data=param[2],n=param[1];return get1(data,caml_mul(n,i) + j | 0)}
    function decode(displacement)
     {return 0 === (displacement & 1)
              ?displacement >>> 1 | 0
              :- (displacement >>> 1 | 0) | 0}
    function getget(get_displacement,get_data,param,i,j)
     {var
       data=param[2],
       displacement=param[1],
       _aZF_=caml_call2(get_displacement,displacement,i),
       k=decode(_aZF_);
      return caml_call2(get_data,data,k + j | 0)}
    function read_interval_via(get_data,i,j)
     {if(i === j)return 0;
      var _aZD_=i + 1 | 0,_aZE_=read_interval_via(get_data,_aZD_,j);
      return [0,caml_call1(get_data,i),_aZE_]}
    function read_row_via(get_data,get_entry,i)
     {var _aZB_=i + 1 | 0,_aZC_=caml_call1(get_entry,_aZB_);
      return read_interval_via(get_data,caml_call1(get_entry,i),_aZC_)}
    function Make$4(TT,IT,ET,E)
     {var
       terminal=IT[1],
       nonterminal=IT[2],
       lr0_core=IT[4],
       lr0_items=IT[5],
       lr0_incoming=IT[6];
      function read_packed_linearized(param,i)
       {var entry=param[2],data=param[1];
        function _aZy_(_aZA_){return get$1(entry,_aZA_)}
        return read_row_via(function(_aZz_){return get$1(data,_aZz_)},_aZy_,i)}
      function decode_symbol(symbol)
       {if(0 < symbol)
         {var kind=symbol & 1,symbol$0=symbol >>> 1 | 0;
          return 0 === kind
                  ?caml_call1(IT[1],symbol$0 - 1 | 0)
                  :caml_call1(IT[2],symbol$0)}
        throw [0,Assert_failure,_fb_]}
      function n2i(nt)
       {var
         answer=TT[9] + nt | 0,
         _aZv_=[0,[1,nt]],
         _aZw_=IT[2],
         _aZx_=caml_call1(_aZw_,answer);
        if(caml_equal(_aZx_,_aZv_))return answer;
        throw [0,Assert_failure,_fc_]}
      function t2i(answer)
       {var _aZs_=[0,[0,answer]],_aZt_=IT[1],_aZu_=caml_call1(_aZt_,answer);
        if(caml_equal(_aZu_,_aZs_))return answer;
        throw [0,Assert_failure,_fd_]}
      function compare_terminals(t1,t2)
       {var _aZr_=t2i(t2);return t2i(t1) - _aZr_ | 0}
      function compare_nonterminals(nt1,nt2)
       {var _aZq_=n2i(nt2);return n2i(nt1) - _aZq_ | 0}
      function compare_symbols(symbol1,symbol2)
       {var _aZl_=symbol1[1];
        if(0 === _aZl_[0])
         {var _aZm_=symbol2[1],_aZn_=_aZl_[1];
          if(0 === _aZm_[0])
           {var t2=_aZm_[1];return compare_terminals(_aZn_,t2)}
          return -1}
        var _aZo_=symbol2[1],_aZp_=_aZl_[1];
        if(0 === _aZo_[0])return 1;
        var nt2=_aZo_[1];
        return compare_nonterminals(_aZp_,nt2)}
      function compare_productions(prod1,prod2){return prod1 - prod2 | 0}
      function compare_items(param,_aZk_)
       {var
         index2=_aZk_[2],
         prod2=_aZk_[1],
         index1=param[2],
         prod1=param[1],
         c=compare_productions(prod1,prod2);
        return 0 === c?index1 - index2 | 0:c}
      function incoming_symbol(s)
       {var
         _aZh_=IT[4],
         core=get$1(_aZh_,s),
         _aZi_=IT[6],
         _aZj_=get$1(_aZi_,core),
         symbol=decode_symbol(_aZj_),
         symbol$0=symbol[1];
        return symbol$0}
      function lhs(prod)
       {var _aZf_=TT[7],_aZg_=get$1(_aZf_,prod);
        return caml_call1(IT[2],_aZg_)}
      function rhs(prod)
       {var _aZe_=IT[3];
        return map$0(decode_symbol,read_packed_linearized(_aZe_,prod))}
      var low_bits=10,low_limit=1024;
      function export$0(t){return [0,t >>> 10 | 0,t % 1024 | 0]}
      function items(s)
       {var _aZc_=IT[4],core=get$1(_aZc_,s),_aZd_=IT[5];
        return map$0(export$0,read_packed_linearized(_aZd_,core))}
      function decode_bool(i)
       {if(0 !== i && 1 !== i)throw [0,Assert_failure,_fe_];
        return 1 === i?1:0}
      function nullable(nt)
       {var _aZa_=n2i(nt),_aZb_=IT[7];return decode_bool(get1(_aZb_,_aZa_))}
      function first(nt,t)
       {var _aY9_=t2i(t),_aY__=n2i(nt),_aY$_=IT[8];
        return decode_bool(unflatten1(_aY$_,_aY__,_aY9_))}
      function xfirst(symbol,t)
       {var _aY8_=symbol[1];
        if(0 === _aY8_[0])
         {var t$0=_aY8_[1];return 0 === compare_terminals(t,t$0)?1:0}
        var nt=_aY8_[1];
        return first(nt,t)}
      function foldij(i,j,f,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(i$0 === j)return accu$0;
          var
           accu$1=caml_call2(f,i$0,accu$0),
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function foreach_terminal(f,accu)
       {var match=TT[5],n=match[1];
        return foldij
                (0,
                 n,
                 function(i,accu)
                  {var _aY7_=IT[1];
                   return caml_call2(f,caml_call1(_aY7_,i),accu)},
                 accu)}
      function foreach_terminal_but_error(f,accu)
       {var match=TT[5],n=match[1];
        return foldij
                (0,
                 n,
                 function(i,accu)
                  {if(i === TT[2])return accu;
                   var _aY6_=IT[1];
                   return caml_call2(f,caml_call1(_aY6_,i),accu)},
                 accu)}
      function feed_failure(param){return invalid_arg(_ff_)}
      function feed_nonterminal(nt,startp,semv,endp,env)
       {var source=env[4],_aY5_=ET[13],match=caml_call2(_aY5_,source,nt);
        if(match)
         {var target=match[1],stack=[0,source,semv,startp,endp,env[3]];
          return [0,env[1],env[2],stack,target]}
        return feed_failure(0)}
      function reduce(env,prod){return feed_failure(0)}
      function initiate(env){return feed_failure(0)}
      function feed_terminal(terminal,startp,semv,endp,env)
       {var source=env[4];
        function _aY4_(env,please_discard,terminal,semv,target)
         {var stack=[0,source,semv,startp,endp,env[3]];
          return [0,env[1],env[2],stack,target]}
        return caml_call7
                (ET[10],source,terminal,semv,_aY4_,reduce,initiate,env)}
      function feed(symbol,startp,semv,endp,env)
       {if(0 === symbol[0])
         {var terminal=symbol[1];
          return feed_terminal(t2i(terminal),startp,semv,endp,env)}
        var nt=symbol[1];
        return feed_nonterminal(n2i(nt),startp,semv,endp,env)}
      return [0,
              terminal,
              nonterminal,
              lr0_core,
              lr0_items,
              lr0_incoming,
              read_packed_linearized,
              decode_symbol,
              n2i,
              t2i,
              compare_terminals,
              compare_nonterminals,
              compare_symbols,
              compare_productions,
              compare_items,
              incoming_symbol,
              lhs,
              rhs,
              low_bits,
              low_limit,
              export$0,
              items,
              decode_bool,
              nullable,
              first,
              xfirst,
              foldij,
              foreach_terminal,
              foreach_terminal_but_error,
              feed_failure,
              feed_nonterminal,
              reduce,
              initiate,
              feed_terminal,
              feed]}
    function MakeEngineTable(T)
     {function number(s){return s}
      var _aYA_=T[1],_aYB_=T[3],_aYC_=T[2],error_value=0;
      function foldij(i,j,f,accu)
       {var i$0=i,accu$0=accu;
        for(;;)
         {if(i$0 === j)return accu$0;
          var
           accu$1=caml_call2(f,i$0,accu$0),
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           accu$0=accu$1;
          continue}}
      function foreach_terminal(f,accu)
       {var match=T[5],n=match[1];
        return foldij(0,n,function(i,accu){return caml_call2(f,i,accu)},accu)}
      function non_start_production(i)
       {if(T[9] <= i && (i - T[9] | 0) < T[10].length - 1)return 0;
        throw [0,Assert_failure,_fg_]}
      function production_index(i){non_start_production(i);return i}
      function find_production(i){non_start_production(i);return i}
      function default_reduction(state,defred,nodefred,env)
       {var _aY3_=T[4],code=get$1(_aY3_,state);
        return 0 === code
                ?caml_call1(nodefred,env)
                :caml_call2(defred,env,code - 1 | 0)}
      function is_start(prod){return prod < T[9]?1:0}
      function unmarshal2(table,i,j){return getget(get$1,get$1,table,i,j)}
      function action(state,terminal,value,shift,reduce,fail,env)
       {var _aY1_=T[5],c=unflatten1(_aY1_,state,terminal);
        if(1 === c)
         {var
           _aY2_=T[6],
           action=unmarshal2(_aY2_,state,terminal),
           opcode=action & 3,
           param=action >>> 2 | 0;
          if(2 <= opcode)
           {var please_discard=2 === opcode?1:0;
            return caml_call5(shift,env,please_discard,terminal,value,param)}
          return caml_call2(reduce,env,param)}
        if(0 === c)return caml_call1(fail,env);
        throw [0,Assert_failure,_fh_]}
      function goto_nt(state,nt)
       {var _aY0_=T[8],code=unmarshal2(_aY0_,state,nt);return code - 1 | 0}
      function goto_prod(state,prod)
       {var _aYZ_=T[7];return goto_nt(state,get$1(_aYZ_,prod))}
      function maybe_goto_nt(state,nt)
       {var _aYY_=T[8],code=unmarshal2(_aYY_,state,nt);
        if(0 <= code)return 0 === code?0:[0,code - 1 | 0];
        throw [0,Assert_failure,_fi_]}
      var _aYD_=T[11];
      function semantic_action(prod)
       {var _aYW_=prod - T[9] | 0,_aYX_=T[10];
        return caml_check_bound(_aYX_,_aYW_)[1 + _aYW_]}
      function may_reduce(state,prod)
       {var _aYM_=0;
        function _aYN_(param)
         {var _aYO_=0;
          return foreach_terminal
                  (function(t,accu)
                    {if(accu)return accu;
                     var _aYP_=0;
                     function _aYQ_(param){return 0}
                     function _aYR_(param,prod$0){return prod === prod$0?1:0}
                     return action
                             (state,
                              t,
                              0,
                              function(param,_aYV_,_aYU_,_aYT_,_aYS_){return 0},
                              _aYR_,
                              _aYQ_,
                              _aYP_)},
                   _aYO_)}
        return default_reduction
                (state,
                 function(param,prod$0){return prod === prod$0?1:0},
                 _aYN_,
                 _aYM_)}
      var log=T[12]?1:0;
      function state(state)
       {return T[12]?caml_call1(fprintf(stderr,_fj_),state):0}
      function shift(terminal,state)
       {var _aYK_=T[12];
        if(_aYK_)
         {var
           match=_aYK_[1],
           terminals=match[1],
           _aYL_=caml_check_bound(terminals,terminal)[1 + terminal];
          return caml_call2(fprintf(stderr,_fk_),_aYL_,state)}
        return 0}
      function reduce_or_accept(prod)
       {var _aYI_=T[12];
        if(_aYI_)
         {var
           match=_aYI_[1],
           productions=match[2],
           _aYJ_=caml_check_bound(productions,prod)[1 + prod];
          return caml_call1(fprintf(stderr,_fl_),_aYJ_)}
        return 0}
      function lookahead_token(token,startp,endp)
       {var _aYE_=T[12];
        if(_aYE_)
         {var
           match=_aYE_[1],
           terminals=match[1],
           _aYF_=endp[4],
           _aYG_=startp[4],
           _aYH_=caml_check_bound(terminals,token)[1 + token];
          return caml_call3(fprintf(stderr,_fm_),_aYH_,_aYG_,_aYF_)}
        return 0}
      function initiating_error_handling(param)
       {return T[12]?fprintf(stderr,_fn_):0}
      function resuming_error_handling(param)
       {return T[12]?fprintf(stderr,_fo_):0}
      function handling_error(state)
       {return T[12]?caml_call1(fprintf(stderr,_fp_),state):0}
      var
       Log=
        [0,
         state,
         shift,
         reduce_or_accept,
         lookahead_token,
         initiating_error_handling,
         resuming_error_handling,
         handling_error];
      return [0,
              number,
              _aYA_,
              _aYB_,
              _aYC_,
              error_value,
              foldij,
              foreach_terminal,
              non_start_production,
              production_index,
              find_production,
              default_reduction,
              is_start,
              unmarshal2,
              action,
              goto_nt,
              goto_prod,
              maybe_goto_nt,
              _aYD_,
              semantic_action,
              may_reduce,
              log,
              Log]}
    function _fq_(_aYy_)
     {var _aYz_=MakeEngineTable(_aYy_);
      return [0,
              _aYz_[1],
              _aYz_[2],
              _aYz_[3],
              _aYz_[4],
              _aYz_[5],
              _aYz_[7],
              _aYz_[9],
              _aYz_[10],
              _aYz_[11],
              _aYz_[14],
              _aYz_[15],
              _aYz_[16],
              _aYz_[17],
              _aYz_[12],
              _aYz_[18],
              _aYz_[19],
              _aYz_[20],
              _aYz_[21],
              _aYz_[22]]}
    function _fr_(_aYw_,_aYv_,_aYu_,_aYt_)
     {var _aYx_=Make$4(_aYw_,_aYv_,_aYu_,_aYt_);
      return [0,
              _aYx_[10],
              _aYx_[11],
              _aYx_[12],
              _aYx_[13],
              _aYx_[14],
              _aYx_[15],
              _aYx_[21],
              _aYx_[16],
              _aYx_[17],
              _aYx_[23],
              _aYx_[24],
              _aYx_[25],
              _aYx_[27],
              _aYx_[28],
              _aYx_[34]]}
    function _fs_(_aYr_)
     {var _aYs_=Make$3(_aYr_);
      return [0,
              _aYs_[15],
              _aYs_[38],
              _aYs_[34],
              _aYs_[35],
              _aYs_[36],
              _aYs_[37],
              _aYs_[39],
              _aYs_[40],
              _aYs_[41],
              _aYs_[42],
              _aYs_[1],
              _aYs_[7],
              _aYs_[8],
              _aYs_[43],
              _aYs_[44],
              _aYs_[53],
              _aYs_[54],
              _aYs_[46],
              _aYs_[45],
              _aYs_[47],
              _aYs_[49],
              _aYs_[48],
              _aYs_[50],
              _aYs_[51],
              _aYs_[52],
              _aYs_[33]]}
    var
     Unix_error=[248,_ft_,caml_fresh_oo_id(0)],
     _fw_=[0,Unix_error,0,_fv_,_fu_];
    register_exception(_fx_,_fw_);
    function _fy_(param)
     {if(param[1] === Unix_error)
       {var s=param[4],s$0=param[3],e=param[2];
        if(typeof e === "number")
         {var _aYq_=e;
          if(34 <= _aYq_)
           switch(_aYq_)
            {case 34:var msg=_f8_;break;
             case 35:var msg=_f9_;break;
             case 36:var msg=_f__;break;
             case 37:var msg=_f$_;break;
             case 38:var msg=_ga_;break;
             case 39:var msg=_gb_;break;
             case 40:var msg=_gc_;break;
             case 41:var msg=_gd_;break;
             case 42:var msg=_ge_;break;
             case 43:var msg=_gf_;break;
             case 44:var msg=_gg_;break;
             case 45:var msg=_gh_;break;
             case 46:var msg=_gi_;break;
             case 47:var msg=_gj_;break;
             case 48:var msg=_gk_;break;
             case 49:var msg=_gl_;break;
             case 50:var msg=_gm_;break;
             case 51:var msg=_gn_;break;
             case 52:var msg=_go_;break;
             case 53:var msg=_gp_;break;
             case 54:var msg=_gq_;break;
             case 55:var msg=_gr_;break;
             case 56:var msg=_gs_;break;
             case 57:var msg=_gt_;break;
             case 58:var msg=_gu_;break;
             case 59:var msg=_gv_;break;
             case 60:var msg=_gw_;break;
             case 61:var msg=_gx_;break;
             case 62:var msg=_gy_;break;
             case 63:var msg=_gz_;break;
             case 64:var msg=_gA_;break;
             case 65:var msg=_gB_;break;
             case 66:var msg=_gC_;break;
             default:var msg=_gD_}
          else
           switch(_aYq_)
            {case 0:var msg=_fz_;break;
             case 1:var msg=_fB_;break;
             case 2:var msg=_fC_;break;
             case 3:var msg=_fD_;break;
             case 4:var msg=_fE_;break;
             case 5:var msg=_fF_;break;
             case 6:var msg=_fG_;break;
             case 7:var msg=_fH_;break;
             case 8:var msg=_fI_;break;
             case 9:var msg=_fJ_;break;
             case 10:var msg=_fK_;break;
             case 11:var msg=_fL_;break;
             case 12:var msg=_fM_;break;
             case 13:var msg=_fN_;break;
             case 14:var msg=_fO_;break;
             case 15:var msg=_fP_;break;
             case 16:var msg=_fQ_;break;
             case 17:var msg=_fR_;break;
             case 18:var msg=_fS_;break;
             case 19:var msg=_fT_;break;
             case 20:var msg=_fU_;break;
             case 21:var msg=_fV_;break;
             case 22:var msg=_fW_;break;
             case 23:var msg=_fX_;break;
             case 24:var msg=_fY_;break;
             case 25:var msg=_fZ_;break;
             case 26:var msg=_f0_;break;
             case 27:var msg=_f1_;break;
             case 28:var msg=_f2_;break;
             case 29:var msg=_f3_;break;
             case 30:var msg=_f4_;break;
             case 31:var msg=_f5_;break;
             case 32:var msg=_f6_;break;
             default:var msg=_f7_}}
        else
         var x=e[1],msg=caml_call1(sprintf(_gE_),x);
        return [0,caml_call3(sprintf(_fA_),msg,s$0,s)]}
      return 0}
    register_printer(_fy_);
    unix_inet_addr_of_string(_gF_);
    unix_inet_addr_of_string(_gG_);
    try
     {unix_inet_addr_of_string(_wF_)}
    catch(_aYp_)
     {_aYp_ = caml_wrap_exception(_aYp_);if(_aYp_[1] !== Failure)throw _aYp_}
    try
     {unix_inet_addr_of_string(_wE_)}
    catch(_aYo_)
     {_aYo_ = caml_wrap_exception(_aYo_);if(_aYo_[1] !== Failure)throw _aYo_}
    var _gH_=7,_gI_=0;
    create$2(_gI_,_gH_);
    function sign_int(i){return 0 === i?0:0 < i?1:-1}
    var monster_int=-2147483648,biggest_int=2147483647,least_int=-2147483647;
    initialize_nat(0);
    function make_nat(len)
     {if(0 <= len)
       {var res=create_nat(len);set_to_zero_nat(res,0,len);return res}
      return invalid_arg(_gJ_)}
    var _gK_=2;
    make_nat(_gK_);
    var _gL_=1;
    make_nat(_gL_);
    var _gM_=2;
    make_nat(_gM_);
    function nat_of_int(i)
     {if(0 <= i)
       {var _aYn_=1,res=make_nat(_aYn_);
        return 0 === i?res:(set_digit_nat(res,0,i),res)}
      return invalid_arg(_gN_)}
    var _gO_=2,power_base_max=make_nat(_gO_);
    set_digit_nat(power_base_max,0,1000000000);
    var _gP_=1000000000;
    nat_of_int(_gP_);
    var _gQ_=1;
    make_nat(_gQ_);
    var _gR_=1;
    nat_of_int(_gR_);
    function big_int_of_int(i)
     {var res=create_nat(1);
      if(i === -2147483648)
       {set_digit_nat(res,0,2147483647);incr_nat(res,0,1,1)}
      else
       {var _aYm_=abs(i);set_digit_nat(res,0,_aYm_)}
      return [0,sign_int(i),res]}
    big_int_of_int(monster_int);
    big_int_of_int(biggest_int);
    big_int_of_int(least_int);
    var _gS_=255,_gT_=32;
    make$0(_gT_,_gS_);
    function make_empty(param){return make$0(32,0)}
    function add$1(s,i)
     {var
       _aYh_=1 << (i & 7),
       _aYi_=i >>> 3 | 0,
       _aYj_=caml_bytes_get(s,_aYi_) | _aYh_,
       _aYk_=chr(_aYj_),
       _aYl_=i >>> 3 | 0;
      return caml_bytes_set(s,_aYl_,_aYk_)}
    function singleton(c){var _aYg_=0,s=make_empty(_aYg_);add$1(s,c);return s}
    function complement(s)
     {var r=caml_create_bytes(32),i=0;
      for(;;)
       {var _aYd_=caml_bytes_get(s,i) ^ 255,_aYe_=chr(_aYd_);
        caml_bytes_set(r,i,_aYe_);
        var _aYf_=i + 1 | 0;
        if(31 !== i){var i=_aYf_;continue}
        return r}}
    var t=caml_create_bytes(256),i=0;
    for(;;)
     {var _wB_=chr(i),_wC_=lowercase(_wB_);
      caml_bytes_set(t,i,_wC_);
      var _wD_=i + 1 | 0;
      if(255 !== i){var i=_wD_;continue}
      of_bytes(t);
      var _gU_=10,_gV_=singleton(_gU_);
      complement(_gV_);
      var
       nolock=[0,function(f,x){return caml_call1(f,x)}],
       sync=function(lock){return lock[1]},
       create$4=
        function(n)
         {var _aYb_=max_array_length - 1 | 0,len=min(n,_aYb_),_aYc_=0;
          return [0,weak_create(len),len,_aYc_]},
       iter$5=
        function(f,s)
         {var _aX__=s[3] - 1 | 0;
          if(! (_aX__ < 0))
           {var i=_aX__;
            for(;;)
             {var _aX$_=s[1],match=get$0(_aX$_,i);
              if(match){var x=match[1];caml_call1(f,x)}
              var _aYa_=i - 1 | 0;
              if(0 !== i){var i=_aYa_;continue}
              break}}
          return 0},
       length$3=
        function(s)
         {var flag=[0,0],pt=[0,0],_aX5_=s[3] - 1 | 0,_aX4_=0;
          if(! (_aX5_ < 0))
           {var i=_aX4_;
            for(;;)
             {var _aX6_=s[1],d=get$0(_aX6_,i);
              if(d)
               {if(flag[1]){var _aX7_=pt[1],_aX8_=s[1];set(_aX8_,_aX7_,d)}
                pt[1]++}
              else
               flag[1] = 1;
              var _aX9_=i + 1 | 0;
              if(_aX5_ !== i){var i=_aX9_;continue}
              break}}
          s[3] = pt[1];
          return s[3]},
       copy$1=
        function(s)
         {var
           _aXY_=s[2],
           s$0=create$4(_aXY_),
           _aXZ_=s[3],
           _aX0_=0,
           _aX1_=s$0[1],
           _aX2_=0,
           _aX3_=s[1];
          blit$2(_aX3_,_aX2_,_aX1_,_aX0_,_aXZ_);
          s$0[3] = s[3];
          return s$0},
       push$0=
        function(x,s)
         {for(;;)
           {if(s[3] < s[2])
             {var _aXP_=[0,x],_aXQ_=s[3],_aXR_=s[1];
              set(_aXR_,_aXQ_,_aXP_);
              s[3] = s[3] + 1 | 0;
              return 0}
            var len=length$3(s);
            if((s[2] / 3 | 0) <= len && len < ((s[2] * 2 | 0) / 3 | 0))
             continue;
            var
             _aXS_=max_array_length - 1 | 0,
             _aXT_=((len * 3 | 0) / 2 | 0) + 2 | 0,
             len$0=min(_aXT_,_aXS_);
            if(len$0 === len)return failwith(_gW_);
            var data=weak_create(len$0),_aXU_=s[3],_aXV_=0,_aXW_=0,_aXX_=s[1];
            blit$2(_aXX_,_aXW_,data,_aXV_,_aXU_);
            s[1] = data;
            s[2] = len$0;
            continue}},
       pop$0=
        function(s)
         {for(;;)
           {if(s[3] <= 0)throw Not_found;
            s[3] = s[3] - 1 | 0;
            var _aXN_=s[3],_aXO_=s[1],match=get$0(_aXO_,_aXN_);
            if(match){var x=match[1];return x}
            continue}},
       top$0=
        function(s)
         {for(;;)
           {if(s[3] <= 0)throw Not_found;
            var _aXL_=s[3] - 1 | 0,_aXM_=s[1],match=get$0(_aXM_,_aXL_);
            if(match){var x=match[1];return x}
            s[3] = s[3] - 1 | 0;
            continue}},
       Make$5=
        function(H)
         {function enbox(k)
           {var _aXI_=1,w=weak_create(_aXI_),_aXJ_=[0,k],_aXK_=0;
            set(w,_aXK_,_aXJ_);
            return w}
          function unbox(bk){return get$0(bk,0)}
          function bind_new(k,v){return [0,enbox(k),v]}
          function cls_new(bd)
           {var _aXH_=1,cls=create$4(_aXH_);push$0(bd,cls);return cls}
          function dummy(k){var _aXG_=0;return cls_new(bind_new(k,_aXG_))}
          function top_bind(cls)
           {for(;;)
             {var bind=top$0(cls),v=bind[2],bk=bind[1],match=unbox(bk);
              if(match){var k=match[1];return [0,k,v]}
              if(bind === pop$0(cls))continue;
              throw [0,Assert_failure,_gX_]}}
          function top_key(cls){return top_bind(cls)[1]}
          function top_value(cls){return top_bind(cls)[2]}
          function all_bind(cls)
           {var l=[0,0];
            function f(param)
             {var v=param[2],bk=param[1],match=unbox(bk);
              if(match){var k=match[1];l[1] = [0,[0,k,v],l[1]];return 0}
              return 0}
            iter$5(f,cls);
            return rev(l[1])}
          function all_value(cls)
           {var _aXE_=all_bind(cls);
            return map$0(function(_aXF_){return _aXF_[2]},_aXE_)}
          function hash(x)
           {try
             {var _aXA_=top_key(x),_aXB_=H[2],_aXC_=caml_call1(_aXB_,_aXA_);
              return _aXC_}
            catch(_aXD_)
             {_aXD_ = caml_wrap_exception(_aXD_);
              if(_aXD_ === Not_found)return 0;
              throw _aXD_}}
          function equal(x,y)
           {try
             {var
               _aXv_=top_key(y),
               _aXw_=top_key(x),
               _aXx_=H[1],
               _aXy_=caml_call2(_aXx_,_aXw_,_aXv_);
              return _aXy_}
            catch(_aXz_)
             {_aXz_ = caml_wrap_exception(_aXz_);
              if(_aXz_ === Not_found)return 0;
              throw _aXz_}}
          var W=Make$2([0,equal,hash]),create=W[1],clear=W[2];
          function find_all(tbl,key)
           {try
             {var
               _aXq_=dummy(key),
               _aXr_=W[6],
               _aXs_=caml_call2(_aXr_,tbl,_aXq_),
               _aXt_=all_value(_aXs_);
              return _aXt_}
            catch(_aXu_)
             {_aXu_ = caml_wrap_exception(_aXu_);
              if(_aXu_ === Not_found)return 0;
              throw _aXu_}}
          function find(tbl,key)
           {var _aXo_=dummy(key),_aXp_=W[6];
            return top_value(caml_call2(_aXp_,tbl,_aXo_))}
          function find_opt(tbl,key)
           {try
             {var _aXm_=[0,find(tbl,key)];return _aXm_}
            catch(_aXn_)
             {_aXn_ = caml_wrap_exception(_aXn_);
              if(_aXn_ === Not_found)return 0;
              throw _aXn_}}
          function add(tbl,key,data)
           {var bd=bind_new(key,data);
            try
             {var _aXi_=dummy(key),_aXj_=W[6],c$0=caml_call2(_aXj_,tbl,_aXi_);
              push$0(bd,c$0);
              var cls=c$0}
            catch(_aXl_)
             {_aXl_ = caml_wrap_exception(_aXl_);
              if(_aXl_ !== Not_found)throw _aXl_;
              var c=cls_new(bd),_aXg_=W[4];
              caml_call2(_aXg_,tbl,c);
              var cls=c}
            function final$0(param){return 0}
            try
             {var _aXh_=_dD_(final$0,key);return _aXh_}
            catch(_aXk_)
             {_aXk_ = caml_wrap_exception(_aXk_);
              if(_aXk_[1] === Invalid_argument)return _dD_(final$0,cls);
              throw _aXk_}}
          function remove(tbl,key)
           {try
             {var
               _aXb_=dummy(key),
               _aXc_=W[6],
               _aXd_=caml_call2(_aXc_,tbl,_aXb_);
              pop$0(_aXd_);
              var _aXe_=0;
              return _aXe_}
            catch(_aXf_)
             {_aXf_ = caml_wrap_exception(_aXf_);
              if(_aXf_ === Not_found)return 0;
              throw _aXf_}}
          function replace(tbl,key,data)
           {remove(tbl,key);return add(tbl,key,data)}
          function mem(tbl,key)
           {try
             {find(tbl,key);var _aW$_=1;return _aW$_}
            catch(_aXa_)
             {_aXa_ = caml_wrap_exception(_aXa_);
              if(_aXa_ === Not_found)return 0;
              throw _aXa_}}
          function iter(f,tbl)
           {function f$0(param)
             {var v=param[2],bk=param[1],match=unbox(bk);
              if(match){var k=match[1];return caml_call2(f,k,v)}
              return 0}
            function _aW9_(_aW__){return iter$5(f$0,_aW__)}
            return caml_call2(W[10],_aW9_,tbl)}
          function fold(f,tbl,accu)
           {var r=[0,accu];
            function f$0(k,v)
             {var _aW8_=r[1];r[1] = caml_call3(f,k,v,_aW8_);return 0}
            iter(f$0,tbl);
            return r[1]}
          function length(tbl)
           {var _aW1_=0;
            function _aW2_(cls)
             {var _aW3_=length$3(cls);
              function _aW4_(_aW7_,_aW6_){return _aW7_ + _aW6_ | 0}
              return function(_aW5_){return _aW4_(_aW3_,_aW5_)}}
            return caml_call3(W[11],_aW2_,tbl,_aW1_)}
          function copy(tbl)
           {var
             _aWV_=W[12],
             _aWW_=((caml_call1(_aWV_,tbl) * 3 | 0) / 2 | 0) + 2 | 0,
             _aWX_=W[1],
             tbl$0=caml_call1(_aWX_,_aWW_);
            function _aWY_(cls)
             {var _aW0_=copy$1(cls);return caml_call2(W[4],tbl$0,_aW0_)}
            var _aWZ_=W[10];
            caml_call2(_aWZ_,_aWY_,tbl);
            return tbl$0}
          function stats(param){throw [0,Assert_failure,_gY_]}
          function reset(param){throw [0,Assert_failure,_gZ_]}
          function filter_map_inplace(f,tbl)
           {var delta=[0,0];
            function _aWS_(k,v)
             {var other=caml_call2(f,k,v);
              if(other){var v$0=other[1];if(v$0 === v)return 0}
              delta[1] = [0,[0,k,other],delta[1]];
              return 0}
            iter(_aWS_,tbl);
            function handle_delta(param)
             {var _aWT_=param[2],_aWU_=param[1];
              if(_aWT_)
               {var v=_aWT_[1];remove(tbl,_aWU_);return add(tbl,_aWU_,v)}
              return remove(tbl,_aWU_)}
            return iter$0(handle_delta,delta[1])}
          return [0,
                  create,
                  clear,
                  reset,
                  copy,
                  add,
                  remove,
                  find,
                  find_opt,
                  find_all,
                  replace,
                  mem,
                  iter,
                  filter_map_inplace,
                  fold,
                  length,
                  stats]},
       equal=function(x,y){return 0 === caml_compare(x,y)?1:0},
       StdHash=Make$5([0,equal,hash]),
       create$5=StdHash[1],
       add$2=function(tbl,k){return caml_call2(StdHash[5],tbl,k)},
       iter$6=
        function(f)
         {function _aWR_(k,d){return caml_call2(f,k,d)}
          return caml_call1(StdHash[12],_aWR_)},
       weak_create$0=function(size){return caml_call1(create$5,size)},
       weak_add=function(set,element){return caml_call1(add$2(set,element),0)},
       weak_iter=
        function(f,s)
         {return caml_call1
                  (iter$6(function(x,param){return caml_call1(f,x)}),s)},
       hash$0=function(x){return x[4]},
       equal$0=function(x,y){return x[4] === y[4]?1:0},
       hash$1=function(x){return x[5]},
       equal$1=function(x,y){return x[5] === y[5]?1:0},
       Outputs=Make$2([0,equal$1,hash$1]),
       _g0_=32,
       _g1_=Outputs[1],
       outputs=caml_call1(_g1_,_g0_),
       outputs_add=
        function(out)
         {var _aWP_=Outputs[4],_aWQ_=caml_call1(_aWP_,outputs);
          return caml_call2(sync(nolock),_aWQ_,out)},
       outputs_remove=
        function(out)
         {var _aWN_=Outputs[5],_aWO_=caml_call1(_aWN_,outputs);
          return caml_call2(sync(nolock),_aWO_,out)},
       No_more_input=[248,_g2_,caml_fresh_oo_id(0)],
       Input_closed=[248,_g3_,caml_fresh_oo_id(0)],
       Output_closed=[248,_g4_,caml_fresh_oo_id(0)],
       post_incr=function(r){var result=r[1];r[1]++;return result},
       _g5_=[0,0],
       uid=function(param){return post_incr(_g5_)},
       close_in$0=
        function(i)
         {function f(param){throw Input_closed}
          var _aWK_=0,_aWL_=i[3];
          caml_call1(_aWL_,_aWK_);
          i[1] = f;
          i[2] = f;
          i[3] = function(_aWM_){return 0};
          return 0},
       wrap_in=
        function(read,input,close,underlying)
         {var
           _aWE_=2,
           _aWF_=weak_create$0(_aWE_),
           _aWG_=0,
           result=[0,read,input,close,uid(_aWG_),_aWF_];
          function _aWH_(x){return weak_add(x[5],result)}
          function _aWI_(_aWJ_){return iter$0(_aWH_,_aWJ_)}
          caml_call2(sync(nolock),_aWI_,underlying);
          return result},
       create_in=
        function(read,input,close){return wrap_in(read,input,close,0)},
       close_unit=
        function(o)
         {function forbidden(param){throw Output_closed}
          var _aWy_=0,_aWz_=o[4];
          caml_call1(_aWz_,_aWy_);
          var _aWA_=o[6];
          weak_iter(close_unit,_aWA_);
          var _aWB_=0,_aWC_=o[3],r=caml_call1(_aWC_,_aWB_);
          o[1] = forbidden;
          o[2] = forbidden;
          o[3] = function(param){return r};
          o[4] = function(_aWD_){return 0};
          return 0},
       close_out$0=function(o){close_unit(o);return caml_call1(o[3],0)},
       wrap_out=
        function(write,output,flush,close,underlying)
         {var
           out=[],
           _aWq_=2,
           _aWr_=weak_create$0(_aWq_),
           _aWs_=0,
           _aWt_=uid(_aWs_),
           _aWu_=
            [0,
             write,
             output,
             function(param){outputs_remove(out);return caml_call1(close,0)},
             flush,
             _aWt_,
             _aWr_];
          caml_update_dummy(out,_aWu_);
          function _aWv_(x){return weak_add(x[6],out)}
          function _aWw_(_aWx_){return iter$0(_aWv_,_aWx_)}
          caml_call2(sync(nolock),_aWw_,underlying);
          outputs_add(out);
          return out},
       create_out=
        function(write,output,flush,close)
         {return wrap_out(write,output,flush,close,0)},
       read$0=function(i){return caml_call1(i[1],0)},
       input$0=
        function(i,s,p,l)
         {var sl=caml_ml_bytes_length(s),_aWn_=sl < (p + l | 0)?1:0;
          if(_aWn_)
           var _aWo_=_aWn_;
          else
           var _aWp_=p < 0?1:0,_aWo_=_aWp_ || (l < 0?1:0);
          if(_aWo_)invalid_arg(_g6_);
          return 0 === l?0:caml_call3(i[2],s,p,l)},
       write=function(o,x){return caml_call1(o[1],x)},
       nwrite_bytes=
        function(o,s)
         {var p=[0,0],l=[0,caml_ml_bytes_length(s)];
          for(;;)
           {if(0 < l[1])
             {var
               _aWk_=l[1],
               _aWl_=p[1],
               _aWm_=o[2],
               w=caml_call3(_aWm_,s,_aWl_,_aWk_);
              if(0 === w)throw Sys_blocked_io;
              p[1] = p[1] + w | 0;
              l[1] = l[1] - w | 0;
              continue}
            return 0}},
       output_string$0=function(o,s){return nwrite_bytes(o,ubos(s))},
       output$0=
        function(o,s,p,l)
         {var sl=caml_ml_bytes_length(s),_aWh_=sl < (p + l | 0)?1:0;
          if(_aWh_)
           var _aWi_=_aWh_;
          else
           var _aWj_=p < 0?1:0,_aWi_=_aWj_ || (l < 0?1:0);
          if(_aWi_)invalid_arg(_g7_);
          return caml_call3(o[2],s,p,l)},
       flush$0=function(o){return caml_call1(o[4],0)},
       flush_all$0=
        function(param)
         {function _aWc_(o)
           {try {var _aWf_=flush$0(o);return _aWf_}catch(_aWg_){return 0}}
          var _aWd_=Outputs[10],_aWe_=caml_call1(_aWd_,_aWc_);
          return caml_call2(sync(nolock),_aWe_,outputs)},
       close_all=
        function(param)
         {var _aV8_=0;
          function _aV9_(o,os){return [0,o,os]}
          var
           _aV__=Outputs[11],
           _aV$_=caml_call2(_aV__,_aV9_,outputs),
           outs=caml_call2(sync(nolock),_aV$_,_aV8_);
          return iter$0
                  (function(o)
                    {try
                      {var _aWa_=close_out$0(o);return _aWa_}
                     catch(_aWb_){return 0}},
                   outs)},
       _g8_=0,
       _g9_=weak_create$0(_g8_),
       _g__=-1,
       _g$_=function(_aV7_){return 0},
       _ha_=function(param,_aV6_,_aV5_){return 0},
       placeholder_in=[0,function(param){return 32},_ha_,_g$_,_g__,_g9_],
       input_channel=
        function(opt,_aVW_,ch)
         {if(opt)var sth=opt[1],autoclose=sth;else var autoclose=1;
          if(_aVW_)var sth$0=_aVW_[1],cleanup=sth$0;else var cleanup=1;
          var
           me=[0,placeholder_in],
           _aVX_=
            cleanup
             ?function(param){return close_in(ch)}
             :function(_aV4_){return 0};
          function _aVY_(s,p,l)
           {var n=input(ch,s,p,l);
            if(0 === n)
             {if(autoclose){var _aV3_=me[1];close_in$0(_aV3_)}
              throw No_more_input}
            return n}
          function _aVZ_(param)
           {try
             {var _aV1_=input_char(ch);return _aV1_}
            catch(_aV2_)
             {_aV2_ = caml_wrap_exception(_aV2_);
              if(_aV2_ === End_of_file)
               {if(autoclose){var _aV0_=me[1];close_in$0(_aV0_)}
                throw No_more_input}
              throw _aV2_}}
          var result=create_in(_aVZ_,_aVY_,_aVX_);
          me[1] = result;
          return result},
       output_channel=
        function(opt,ch)
         {if(opt)var sth=opt[1],cleanup=sth;else var cleanup=0;
          var
           _aVT_=
            cleanup
             ?function(param){return close_out(ch)}
             :function(param){return flush(ch)};
          function _aVU_(param){return flush(ch)}
          function _aVV_(s,p,l){output(ch,s,p,l);return l}
          return create_out
                  (function(c){return output_char(ch,c)},_aVV_,_aVU_,_aVT_)},
       _hb_=0,
       _hc_=0,
       stdin$0=input_channel(_hc_,_hb_,stdin),
       _hd_=0,
       stdout$0=output_channel(_hd_,stdout),
       _he_=0,
       stderr$0=output_channel(_he_,stderr),
       _hf_=function(_aVS_){return 0},
       _hg_=function(_aVR_){return 0},
       _hh_=function(param,_aVQ_,l){return l},
       _hi_=function(_aVP_){return 0};
      create_out(_hi_,_hh_,_hg_,_hf_);
      var
       ord0=function(n){return 0 <= n?0 < n?2:1:0},
       No_more_elements=[248,_hk_,caml_fresh_oo_id(0)],
       make$3=function(next,count,clone){return [0,count,next,clone,1]},
       dummy=function(param){throw [0,Assert_failure,_hl_]},
       return_no_more_elements=function(param){throw No_more_elements},
       return_no_more_count=function(param){return 0},
       empty=
        function(param)
         {return [0,return_no_more_count,return_no_more_elements,empty,1]},
       close=
        function(e)
         {e[2] = return_no_more_elements;
          e[1] = return_no_more_count;
          e[3] = empty;
          return 0},
       force=
        function(t)
         {function clone(enum$0,count)
           {var enum$1=[0,enum$0[1]],count$0=[0,count[1]],_aVL_=1;
            function _aVM_(param)
             {var enum$0=[0,enum$1[1]],count=[0,count$0[1]];
              return clone(enum$0,count)}
            function _aVN_(param)
             {var _aVO_=enum$1[1];
              if(_aVO_)
               {var t=_aVO_[2],h=_aVO_[1];
                count$0[1] += -1;
                enum$1[1] = t;
                return h}
              throw No_more_elements}
            return [0,function(param){return count$0[1]},_aVN_,_aVM_,_aVL_]}
          var count=[0,0],empty=0;
          function loop(dst)
           {var dst$0=dst;
            for(;;)
             {var _aVJ_=0,_aVK_=t[2],dst$1=[0,caml_call1(_aVK_,_aVJ_),empty];
              count[1]++;
              dst$0[2] = dst$1;
              var dst$0=dst$1;
              continue}}
          var enum$0=[0,empty];
          try
           {var _aVF_=0,_aVG_=t[2];
            enum$0[1] = [0,caml_call1(_aVG_,_aVF_),empty];
            count[1]++;
            var _aVH_=enum$0[1];
            loop(_aVH_)}
          catch(_aVI_)
           {_aVI_ = caml_wrap_exception(_aVI_);
            if(_aVI_ !== No_more_elements)throw _aVI_}
          var tc=clone(enum$0,count);
          t[3] = tc[3];
          t[2] = tc[2];
          t[1] = tc[1];
          t[4] = 1;
          return 0},
       enum$0=
        function(l)
         {function aux(l)
           {var reference=[0,l];
            function _aVA_(param){return aux(reference[1])}
            function _aVB_(param)
             {var
               _aVC_=reference[1],
               _aVD_=caml_obj_tag(_aVC_),
               _aVE_=
                250 === _aVD_
                 ?_aVC_[1]
                 :246 === _aVD_?force_lazy_block(_aVC_):_aVC_;
              if(_aVE_){var t=_aVE_[2],x=_aVE_[1];reference[1] = t;return x}
              throw No_more_elements}
            var e=make$3(_aVB_,dummy,_aVA_);
            e[1] = function(param){force(e);return caml_call1(e[1],0)};
            e[4] = 0;
            return e}
          return aux(l)},
       from=
        function(f)
         {function aux(param)
           {return [246,
                    function(_aVu_)
                     {try
                       {var _aVx_=0,_aVy_=[0,caml_call1(f,_aVx_)],item=_aVy_}
                      catch(_aVz_)
                       {_aVz_ = caml_wrap_exception(_aVz_);
                        if(_aVz_ !== No_more_elements)throw _aVz_;
                        var _aVv_=0,item=_aVv_}
                      if(item){var x=item[1],_aVw_=0;return [0,x,aux(_aVw_)]}
                      return 0}]}
          return aux(0)},
       from$0=
        function(f)
         {var e=[0,dummy,dummy,dummy,0];
          e[2]
          =
          function(param)
           {try
             {var _aVr_=0,_aVs_=caml_call1(f,_aVr_);return _aVs_}
            catch(_aVt_)
             {_aVt_ = caml_wrap_exception(_aVt_);
              if(_aVt_ === No_more_elements){close(e);throw No_more_elements}
              throw _aVt_}};
          e[1] = function(param){force(e);return caml_call1(e[1],0)};
          e[3]
          =
          function(param)
           {var _aVq_=from(f),e$0=enum$0(_aVq_);
            e[2] = e$0[2];
            e[3] = e$0[3];
            e[1] = function(param){force(e);return caml_call1(e[1],0)};
            e[4] = e$0[4];
            return caml_call1(e[3],0)};
          return e},
       of_enum=
        function(t)
         {try
           {var _aVm_=0,_aVn_=t[2],_aVo_=[0,caml_call1(_aVn_,_aVm_)];
            return _aVo_}
          catch(_aVp_)
           {_aVp_ = caml_wrap_exception(_aVp_);
            if(_aVp_ === No_more_elements)return 0;
            throw _aVp_}},
       count=function(t){return caml_call1(t[1],0)},
       clone=function(t){return caml_call1(t[3],0)},
       fold$1=
        function(f,init,t)
         {var acc=[0,init];
          function loop(param)
           {for(;;)
             {var
               _aVi_=0,
               _aVj_=t[2],
               _aVk_=caml_call1(_aVj_,_aVi_),
               _aVl_=acc[1];
              acc[1] = caml_call2(f,_aVl_,_aVk_);
              continue}}
          try
           {var _aVf_=0,_aVg_=loop(_aVf_);return _aVg_}
          catch(_aVh_)
           {_aVh_ = caml_wrap_exception(_aVh_);
            if(_aVh_ === No_more_elements)return acc[1];
            throw _aVh_}},
       symbol=
        function(f,t)
         {var _aU__=t[4];
          function _aU$_(param)
           {var _aVd_=0,_aVe_=t[3];return symbol(f,caml_call1(_aVe_,_aVd_))}
          function _aVa_(param)
           {var _aVb_=0,_aVc_=t[2];
            return caml_call1(f,caml_call1(_aVc_,_aVb_))}
          return [0,t[1],_aVa_,_aU$_,_aU__]},
       seq=
        function(init,f,cond)
         {var acc=[0,init];
          function aux(param)
           {var _aU8_=acc[1];
            if(caml_call1(cond,_aU8_))
             {var result=acc[1],_aU9_=acc[1];
              acc[1] = caml_call1(f,_aU9_);
              return result}
            throw No_more_elements}
          return from$0(aux)},
       print_common=
        function(first,last,sep,limit,print_a,out,e)
         {output_string$0(out,first);
          var match=of_enum(e);
          if(match)
           {var x=match[1];
            caml_call2(print_a,out,x);
            var
             aux=
              function(limit)
               {var limit$0=limit;
                for(;;)
                 {var match=of_enum(e);
                  if(match)
                   {var _aU7_=match[1];
                    if(0 === limit$0)
                     {output_string$0(out,_hm_);return output_string$0(out,last)}
                    output_string$0(out,sep);
                    caml_call2(print_a,out,_aU7_);
                    var limit$1=limit$0 - 1 | 0,limit$0=limit$1;
                    continue}
                  return output_string$0(out,last)}};
            return aux(limit - 1 | 0)}
          return output_string$0(out,last)},
       print=
        function(opt,_aU6_,_aU5_,print_a,out,e)
         {if(opt)var sth=opt[1],first=sth;else var first=_hp_;
          if(_aU6_)var sth$0=_aU6_[1],last=sth$0;else var last=_ho_;
          if(_aU5_)var sth$1=_aU5_[1],sep=sth$1;else var sep=_hn_;
          return print_common(first,last,sep,max_num,print_a,out,e)},
       to_object=function _aU4_(_aU3_){return _aU4_.fun(_aU3_)},
       _hq_=[0,0,0,0];
      caml_update_dummy
       (to_object,
        function(t)
         {if(! _hq_[1])
           {var
             _aUR_=create_table(shared),
             _aUS_=new_variable(_aUR_,_hr_),
             _aUT_=get_method_labels(_aUR_,_hj_),
             _aUU_=_aUT_[1],
             _aUV_=_aUT_[2],
             _aUW_=_aUT_[3],
             _aUX_=
              function(self_1)
               {var env=self_1[1 + _aUS_],_aU2_=env[1];
                return caml_call1(to_object,clone(_aU2_))},
             _aUY_=
              function(self_1){var env=self_1[1 + _aUS_];return count(env[1])};
            set_methods
             (_aUR_,
              [0,
               _aUU_,
               function(self_1)
                {var env=self_1[1 + _aUS_];return caml_call1(env[1][2],0)},
               _aUV_,
               _aUY_,
               _aUW_,
               _aUX_]);
            var
             _aUZ_=
              function(_aU0_)
               {var _aU1_=create_object_opt(0,_aUR_);
                _aU1_[1 + _aUS_] = _aU0_;
                return _aU1_};
            init_class(_aUR_);
            _hq_[1] = _aUZ_}
          return caml_call1(_hq_[1],[0,t])});
      var
       is_whitespace=
        function(param)
         {var switch$0=0;
          if(14 <= param)
           {if(26 === param || 32 === param)switch$0 = 1}
          else
           if(11 !== param && 9 <= param)switch$0 = 1;
          return switch$0?1:0},
       equal$2=function(a,b){return 0 === compare$0(a,b)?1:0},
       split_on_char=
        function(sep,str)
         {if(caml_string_equal(str,_hs_))return _ht_;
          function loop(acc,ofs,limit)
           {var acc$0=acc,ofs$0=ofs,limit$0=limit;
            for(;;)
             {if(0 <= ofs$0)
               {if(caml_string_unsafe_get(str,ofs$0) !== sep)
                 {var ofs$1=ofs$0 - 1 | 0,ofs$0=ofs$1;continue}
                var
                 ofs$2=ofs$0 - 1 | 0,
                 _aUO_=(limit$0 - ofs$0 | 0) - 1 | 0,
                 _aUP_=ofs$0 + 1 | 0,
                 acc$1=[0,sub$0(str,_aUP_,_aUO_),acc$0],
                 acc$0=acc$1,
                 limit$0=ofs$0,
                 ofs$0=ofs$2;
                continue}
              var _aUQ_=0;
              return [0,sub$0(str,_aUQ_,limit$0),acc$0]}}
          var len=caml_ml_string_length(str);
          return loop(0,len - 1 | 0,len)},
       unsafe_slice=
        function(i,j,s)
         {if(! (j <= i) && i !== caml_ml_string_length(s))
           return sub$0(s,i,j - i | 0);
          return _hu_},
       trim=
        function(s)
         {var len=caml_ml_string_length(s);
          function aux_1(i)
           {var i$0=i;
            for(;;)
             {if(i$0 === len)return 0;
              var _aUN_=caml_string_unsafe_get(s,i$0);
              if(is_whitespace(_aUN_)){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
              return [0,i$0]}}
          var _aUK_=0,match=aux_1(_aUK_);
          if(match)
           {var
             last_leading_whitespace=match[1],
             aux_2=
              function(i)
               {var i$0=i;
                for(;;)
                 {if(0 <= i$0)
                   {var _aUM_=caml_string_unsafe_get(s,i$0);
                    if(is_whitespace(_aUM_))
                     {var i$1=i$0 - 1 | 0,i$0=i$1;continue}
                    return i$0}
                  throw [0,Assert_failure,_hv_]}},
             _aUL_=len - 1 | 0,
             first_trailing_whitespace=aux_2(_aUL_);
            return unsafe_slice
                    (last_leading_whitespace,
                     first_trailing_whitespace + 1 | 0,
                     s)}
          return _hw_},
       is_empty$1=function(s){return 0 === caml_ml_string_length(s)?1:0},
       index_of_int=
        function(i)
         {if(0 <= i)return i;
          var _aUJ_=to_string(i);
          return failwith(cat(_hx_,_aUJ_))},
       add_int_index=function(i,idx){return index_of_int(i + idx | 0)},
       _hy_=1,
       succ_index=function(_aUI_){return add_int_index(_hy_,_aUI_)},
       length$4=
        function(fmt){return caml_ml_string_length(unsafe_to_string(fmt))},
       get$2=
        function(fmt,i)
         {var _aUH_=unsafe_to_string(fmt);return caml_string_get(_aUH_,i)},
       unsafe_get=
        function(fmt,i)
         {return caml_string_unsafe_get(unsafe_to_string(fmt),i)},
       sub$3=
        function(fmt,idx,len){return sub$0(unsafe_to_string(fmt),idx,len)},
       to_string$6=function(fmt){return sub$3(fmt,0,length$4(fmt))},
       bad_conversion=
        function(sfmt,i,c)
         {var
           _aUz_=cat(sfmt,_hz_),
           _aUA_=cat(_hA_,_aUz_),
           _aUB_=to_string(i),
           _aUC_=cat(_aUB_,_aUA_),
           _aUD_=cat(_hB_,_aUC_),
           _aUE_=1,
           _aUF_=make$1(_aUE_,c),
           _aUG_=cat(_aUF_,_aUD_);
          return invalid_arg(cat(_hC_,_aUG_))},
       bad_conversion_format=
        function(fmt,i,c){return bad_conversion(to_string$6(fmt),i,c)},
       incomplete_format=
        function(fmt)
         {var _aUx_=to_string$6(fmt),_aUy_=cat(_aUx_,_hD_);
          return invalid_arg(cat(_hE_,_aUy_))},
       parse_string_conversion=
        function(sfmt)
         {function parse(neg,i)
           {var neg$0=neg,i$0=i;
            for(;;)
             {if(caml_ml_string_length(sfmt) <= i$0)return [0,0,neg$0];
              var match=caml_string_unsafe_get(sfmt,i$0);
              if(49 <= match)
               {if(! (58 <= match))
                 {var
                   _aUv_=(caml_ml_string_length(sfmt) - i$0 | 0) - 1 | 0,
                   _aUw_=sub$0(sfmt,i$0,_aUv_);
                  return [0,caml_int_of_string(_aUw_),neg$0]}}
              else
               if(45 === match){var i$2=i$0 + 1 | 0,neg$0=1,i$0=i$2;continue}
              var i$1=i$0 + 1 | 0,i$0=i$1;
              continue}}
          try
           {var _aUr_=1,_aUs_=0,_aUt_=parse(_aUs_,_aUr_);return _aUt_}
          catch(_aUu_)
           {_aUu_ = caml_wrap_exception(_aUu_);
            if(_aUu_[1] === Failure)return bad_conversion(sfmt,0,115);
            throw _aUu_}},
       pad_string=
        function(pad_char,p,neg,s,i,len)
         {if(p === len && 0 === i)return s;
          if(p <= len)return sub$0(s,i,len);
          var res=make$0(p,pad_char);
          if(neg)
           {var _aUp_=0;blit$0(s,i,res,_aUp_,len)}
          else
           {var _aUq_=p - len | 0;blit$0(s,i,res,_aUq_,len)}
          return usob(res)},
       format_string$0=
        function(sfmt,s)
         {var match=parse_string_conversion(sfmt),neg=match[2],p=match[1];
          return pad_string(32,p,neg,s,0,caml_ml_string_length(s))},
       extract_format=
        function(fmt,start,stop,widths)
         {var
           start$0=start + 1 | 0,
           _aUk_=(stop - start$0 | 0) + 10 | 0,
           b=create$1(_aUk_),
           _aUl_=37;
          add_char(b,_aUl_);
          function fill_format(i,widths)
           {var i$0=i,widths$0=widths;
            for(;;)
             {var _aUn_=i$0 <= stop?1:0;
              if(_aUn_)
               {var match=unsafe_get(fmt,i$0);
                if(42 === match)
                 {if(widths$0)
                   {var t=widths$0[2],h=widths$0[1],_aUo_=to_string(h);
                    add_string(b,_aUo_);
                    var i$1=i$0 + 1 | 0,i$0=i$1,widths$0=t;
                    continue}
                  throw [0,Assert_failure,_hF_]}
                add_char(b,match);
                var i$2=i$0 + 1 | 0,i$0=i$2;
                continue}
              return _aUn_}}
          var _aUm_=rev(widths);
          fill_format(start$0,_aUm_);
          return contents(b)},
       extract_format_int=
        function(conv,fmt,start,stop,widths)
         {var sfmt=extract_format(fmt,start,stop,widths);
          if(78 !== conv && 110 !== conv)return sfmt;
          var
           sfmt$0=to_bytes(sfmt),
           _aUj_=caml_ml_bytes_length(sfmt$0) - 1 | 0;
          caml_bytes_set(sfmt$0,_aUj_,117);
          return usob(sfmt$0)},
       sub_format$0=
        function(incomplete_format,bad_conversion_format,conv,fmt,i)
         {var len=length$4(fmt);
          function sub_fmt(c,i)
           {var close=40 === c?41:125;
            function sub$0(counter,j)
             {var j$0=j;
              for(;;)
               {if(len <= j$0)return caml_call1(incomplete_format,fmt);
                var match=get$2(fmt,j$0);
                if(37 === match)
                 {var _aUi_=j$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return sub_sub(counter$0,_aUi_)}
                  return caml_trampoline_return(sub_sub,[0,_aUi_])}
                var j$1=j$0 + 1 | 0,j$0=j$1;
                continue}}
            function sub_sub(counter,j)
             {if(len <= j)return caml_call1(incomplete_format,fmt);
              var c=get$2(fmt,j),_aUd_=c - 40 | 0,switch$0=0;
              if(1 < _aUd_ >>> 0)
               {var _aUe_=_aUd_ - 83 | 0,switch$1=0;
                if(! (2 < _aUe_ >>> 0))
                 switch(_aUe_)
                  {case 0:switch$1 = 1;break;
                   case 1:break;
                   default:switch$0 = 1;switch$1 = 1}
                if(! switch$1)
                 {var _aUf_=j + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return sub$0(counter$0,_aUf_)}
                  return caml_trampoline_return(sub$0,[0,_aUf_])}}
              else
               if(_aUd_)switch$0 = 1;
              if(switch$0)
               return c === close
                       ?j + 1 | 0
                       :caml_call3(bad_conversion_format,fmt,i,c);
              var _aUg_=j + 1 | 0,j$0=sub_fmt(c,_aUg_),_aUh_=j$0 + 1 | 0;
              if(counter < 50)
               {var counter$1=counter + 1 | 0;return sub$0(counter$1,_aUh_)}
              return caml_trampoline_return(sub$0,[0,_aUh_])}
            function sub(j){return caml_trampoline(sub$0(0,j))}
            return sub(i)}
          return sub_fmt(conv,i)},
       sub_format_for_printf=
        function(conv)
         {return function(_aUb_,_aUc_)
           {return sub_format$0
                    (incomplete_format,bad_conversion_format,conv,_aUb_,_aUc_)}},
       iter_on_format_args=
        function(fmt,add_conv,add_char)
         {var lim=length$4(fmt) - 1 | 0;
          function scan_flags(skip,i)
           {var skip$0=skip,i$0=i;
            for(;;)
             {if(lim < i$0)return incomplete_format(fmt);
              var match=unsafe_get(fmt,i$0);
              if(58 <= match)
               {if(95 === match)
                 {var i$1=i$0 + 1 | 0,skip$0=1,i$0=i$1;continue}}
              else
               if(32 <= match)
                switch(match - 32 | 0)
                 {case 10:
                   var
                    _aUa_=105,
                    i$3=caml_call3(add_conv,skip$0,i$0,_aUa_),
                    i$0=i$3;
                   continue;
                  case 0:
                  case 3:
                  case 11:
                  case 13:var i$2=i$0 + 1 | 0,i$0=i$2;continue;
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 12:
                  case 15:break;
                  default:var i$4=i$0 + 1 | 0,i$0=i$4;continue}
              return scan_conv(skip$0,i$0)}}
          function scan_conv(skip,i)
           {var i$0=i;
            for(;;)
             {if(lim < i$0)return incomplete_format(fmt);
              var conv=unsafe_get(fmt,i$0);
              if(! (126 <= conv))
               switch(conv)
                {case 40:return scan_fmt(caml_call3(add_conv,skip,i$0,conv));
                 case 123:
                  var
                   i$1=caml_call3(add_conv,skip,i$0,conv),
                   j$0=caml_call2(sub_format_for_printf(conv),fmt,i$1),
                   loop$0=
                    function(j)
                     {function loop(i)
                       {var i$0=i;
                        for(;;)
                         {var _aT__=i$0 < (j - 2 | 0)?1:0;
                          if(_aT__)
                           {var
                             _aT$_=get$2(fmt,i$0),
                             i$1=caml_call2(add_char,i$0,_aT$_),
                             i$0=i$1;
                            continue}
                          return _aT__}}
                      return loop},
                   loop=loop$0(j$0);
                  loop(i$1);
                  var i$2=j$0 - 1 | 0,i$0=i$2;
                  continue;
                 case 67:
                 case 99:return caml_call3(add_conv,skip,i$0,99);
                 case 66:
                 case 98:return caml_call3(add_conv,skip,i$0,66);
                 case 41:
                 case 125:return caml_call3(add_conv,skip,i$0,conv);
                 case 33:
                 case 37:
                 case 44:return i$0 + 1 | 0;
                 case 83:
                 case 91:
                 case 115:return caml_call3(add_conv,skip,i$0,115);
                 case 97:
                 case 114:
                 case 116:return caml_call3(add_conv,skip,i$0,conv);
                 case 76:
                 case 108:
                 case 110:
                  var j=i$0 + 1 | 0;
                  if(lim < j)return caml_call3(add_conv,skip,i$0,105);
                  var c=get$2(fmt,j),_aT8_=c - 88 | 0;
                  if(! (32 < _aT8_ >>> 0))
                   switch(_aT8_)
                    {case 0:
                     case 12:
                     case 17:
                     case 23:
                     case 29:
                     case 32:
                      var _aT9_=105;
                      return caml_call2
                              (add_char,caml_call3(add_conv,skip,i$0,conv),_aT9_)
                     }
                  return caml_call3(add_conv,skip,i$0,105);
                 case 69:
                 case 70:
                 case 71:
                 case 101:
                 case 102:
                 case 103:return caml_call3(add_conv,skip,i$0,102);
                 case 78:
                 case 88:
                 case 100:
                 case 105:
                 case 111:
                 case 117:
                 case 120:return caml_call3(add_conv,skip,i$0,105)
                 }
              return bad_conversion_format(fmt,i$0,conv)}}
          function scan_fmt(i)
           {var i$0=i;
            for(;;)
             {if(i$0 < lim)
               {if(37 === get$2(fmt,i$0))
                 {var
                   _aT6_=i$0 + 1 | 0,
                   _aT7_=0,
                   i$1=scan_flags(_aT7_,_aT6_),
                   i$0=i$1;
                  continue}
                var i$2=i$0 + 1 | 0,i$0=i$2;
                continue}
              return i$0}}
          var _aT5_=0;
          scan_fmt(_aT5_);
          return 0},
       summarize_format_type=
        function(fmt)
         {var len=length$4(fmt),b=create$1(len);
          function add_char$0(i,c){add_char(b,c);return i + 1 | 0}
          function add_conv(skip,i,c)
           {if(skip)add_string(b,_hG_);else{var _aT4_=37;add_char(b,_aT4_)}
            return add_char$0(i,c)}
          iter_on_format_args(fmt,add_conv,add_char$0);
          return contents(b)},
       ac_of_format=
        function(fmt)
         {var ac=[0,0,0,0];
          function incr_ac(skip,c)
           {var inc=97 === c?2:1;
            if(114 === c)ac[3] = ac[3] + 1 | 0;
            return skip
                    ?(ac[2] = ac[2] + inc | 0,0)
                    :(ac[1] = ac[1] + inc | 0,0)}
          function add_conv(skip,i,c)
           {var _aT2_=41 !== c?1:0,_aT3_=_aT2_?125 !== c?1:0:_aT2_;
            if(_aT3_)incr_ac(skip,c);
            return i + 1 | 0}
          function add_char(i,c){return i + 1 | 0}
          iter_on_format_args(fmt,add_conv,add_char);
          return ac},
       count_arguments_of_format=
        function(fmt)
         {var ac=ac_of_format(fmt);return (ac[1] + ac[2] | 0) + ac[3] | 0},
       list_iter_i=
        function(f,l)
         {function loop(i,param)
           {var i$0=i,param$0=param;
            for(;;)
             {if(param$0)
               {var _aT1_=param$0[1];
                if(param$0[2])
                 {var xs=param$0[2];
                  caml_call2(f,i$0,_aT1_);
                  var i$1=i$0 + 1 | 0,i$0=i$1,param$0=xs;
                  continue}
                return caml_call2(f,i$0,_aT1_)}
              return 0}}
          return loop(0,l)},
       kapr=
        function(kpr,fmt)
         {var nargs=count_arguments_of_format(fmt);
          if(6 < nargs >>> 0)
           {var
             loop=
              function(i,args)
               {if(nargs <= i)
                 {var
                   a=caml_make_vect(nargs,0),
                   _aTZ_=
                    function(i,arg)
                     {var _aT0_=(nargs - i | 0) - 1 | 0;
                      caml_check_bound(a,_aT0_)[1 + _aT0_] = arg;
                      return 0};
                  list_iter_i(_aTZ_,args);
                  return caml_call2(kpr,fmt,a)}
                return function(x){return loop(i + 1 | 0,[0,x,args])}};
            return loop(0,0)}
          switch(nargs)
           {case 0:return caml_call2(kpr,fmt,[0]);
            case 1:
             return function(x)
              {var a=caml_make_vect(1,0),_aTS_=0;
               caml_check_bound(a,0)[1 + _aTS_] = x;
               return caml_call2(kpr,fmt,a)};
            case 2:
             return function(x,y)
              {var a=caml_make_vect(2,0),_aTQ_=0;
               caml_check_bound(a,0)[1 + _aTQ_] = x;
               var _aTR_=1;
               caml_check_bound(a,1)[1 + _aTR_] = y;
               return caml_call2(kpr,fmt,a)};
            case 3:
             return function(x,y,z)
              {var a=caml_make_vect(3,0),_aTN_=0;
               caml_check_bound(a,0)[1 + _aTN_] = x;
               var _aTO_=1;
               caml_check_bound(a,1)[1 + _aTO_] = y;
               var _aTP_=2;
               caml_check_bound(a,2)[1 + _aTP_] = z;
               return caml_call2(kpr,fmt,a)};
            case 4:
             return function(x,y,z,t)
              {var a=caml_make_vect(4,0),_aTJ_=0;
               caml_check_bound(a,0)[1 + _aTJ_] = x;
               var _aTK_=1;
               caml_check_bound(a,1)[1 + _aTK_] = y;
               var _aTL_=2;
               caml_check_bound(a,2)[1 + _aTL_] = z;
               var _aTM_=3;
               caml_check_bound(a,3)[1 + _aTM_] = t;
               return caml_call2(kpr,fmt,a)};
            case 5:
             return function(x,y,z,t,u)
              {var a=caml_make_vect(5,0),_aTE_=0;
               caml_check_bound(a,0)[1 + _aTE_] = x;
               var _aTF_=1;
               caml_check_bound(a,1)[1 + _aTF_] = y;
               var _aTG_=2;
               caml_check_bound(a,2)[1 + _aTG_] = z;
               var _aTH_=3;
               caml_check_bound(a,3)[1 + _aTH_] = t;
               var _aTI_=4;
               caml_check_bound(a,4)[1 + _aTI_] = u;
               return caml_call2(kpr,fmt,a)};
            default:
             return function(x,y,z,t,u,v)
              {var a=caml_make_vect(6,0),_aTT_=0;
               caml_check_bound(a,0)[1 + _aTT_] = x;
               var _aTU_=1;
               caml_check_bound(a,1)[1 + _aTU_] = y;
               var _aTV_=2;
               caml_check_bound(a,2)[1 + _aTV_] = z;
               var _aTW_=3;
               caml_check_bound(a,3)[1 + _aTW_] = t;
               var _aTX_=4;
               caml_check_bound(a,4)[1 + _aTX_] = u;
               var _aTY_=5;
               caml_check_bound(a,5)[1 + _aTY_] = v;
               return caml_call2(kpr,fmt,a)}}},
       next_index=function(n){return succ_index(n)},
       scan_format=
        function(fmt,args,n,pos,cont_s,cont_a,cont_t,cont_f,cont_m)
         {function get_arg(n){return caml_check_bound(args,n)[1 + n]}
          function scan_conv(n,widths,i)
           {var conv=unsafe_get(fmt,i);
            if(! (124 <= conv))
             switch(conv)
              {case 33:return caml_call2(cont_f,n,i + 1 | 0);
               case 37:return caml_call3(cont_s,n,_hH_,i + 1 | 0);
               case 41:return caml_call3(cont_s,n,_hI_,i + 1 | 0);
               case 44:return caml_call3(cont_s,n,_hJ_,i + 1 | 0);
               case 70:
                var x$2=get_arg(n),_aTk_=i + 1 | 0,_aTl_=to_string$0(x$2);
                return caml_call3(cont_s,next_index(n),_aTl_,_aTk_);
               case 97:
                var
                 printer=get_arg(n),
                 n$0=succ_index(n),
                 arg=get_arg(n$0),
                 _aTC_=i + 1 | 0;
                return caml_call4(cont_a,next_index(n$0),printer,arg,_aTC_);
               case 116:
                var printer$0=get_arg(n),_aTD_=i + 1 | 0;
                return caml_call3(cont_t,next_index(n),printer$0,_aTD_);
               case 83:
               case 115:
                var x$8=get_arg(n);
                if(115 === conv)
                 var x$9=x$8;
                else
                 var
                  _aTA_=escaped$1(x$8),
                  _aTB_=cat(_aTA_,_hM_),
                  x$9=cat(_hN_,_aTB_);
                if(i === (pos + 1 | 0))
                 var s$4=x$9;
                else
                 var
                  _aTz_=extract_format(fmt,pos,i,widths),
                  s$4=format_string$0(_aTz_,x$9);
                var _aTy_=i + 1 | 0;
                return caml_call3(cont_s,next_index(n),s$4,_aTy_);
               case 67:
               case 99:
                var x$0=get_arg(n);
                if(99 === conv)
                 var _aTe_=1,s=make$1(_aTe_,x$0);
                else
                 var
                  _aTg_=escaped(x$0),
                  _aTh_=cat(_aTg_,_hK_),
                  s=cat(_hL_,_aTh_);
                var _aTf_=i + 1 | 0;
                return caml_call3(cont_s,next_index(n),s,_aTf_);
               case 66:
               case 98:
                var x=get_arg(n),_aTc_=i + 1 | 0,_aTd_=string_of_bool(x);
                return caml_call3(cont_s,next_index(n),_aTd_,_aTc_);
               case 40:
               case 123:
                var
                 xf=get_arg(n),
                 i$0=i + 1 | 0,
                 j=caml_call2(sub_format_for_printf(conv),fmt,i$0);
                if(123 === conv)
                 {var _aTb_=summarize_format_type(xf);
                  return caml_call3(cont_s,next_index(n),_aTb_,j)}
                return caml_call3(cont_m,next_index(n),xf,j);
               case 76:
               case 108:
               case 110:
                var
                 _aTm_=i + 1 | 0,
                 match=unsafe_get(fmt,_aTm_),
                 _aTn_=match - 88 | 0;
                if(! (32 < _aTn_ >>> 0))
                 switch(_aTn_)
                  {case 0:
                   case 12:
                   case 17:
                   case 23:
                   case 29:
                   case 32:
                    var i$1=i + 1 | 0,switcher=conv - 108 | 0,switch$0=0;
                    if(! (2 < switcher >>> 0))
                     {var switch$1=0;
                      switch(switcher)
                       {case 0:
                         var
                          x$5=get_arg(n),
                          _aTt_=extract_format(fmt,pos,i$1,widths),
                          _aTu_=caml_format_int(_aTt_,x$5);
                         break;
                        case 1:switch$1 = 1;break;
                        default:
                         var
                          x$6=get_arg(n),
                          _aTv_=extract_format(fmt,pos,i$1,widths),
                          _aTu_=caml_format_int(_aTv_,x$6)}
                      if(! switch$1){var s$2=_aTu_;switch$0 = 1}}
                    if(! switch$0)
                     var
                      x$4=get_arg(n),
                      _aTr_=extract_format(fmt,pos,i$1,widths),
                      s$2=caml_int64_format(_aTr_,x$4);
                    var _aTs_=i$1 + 1 | 0;
                    return caml_call3(cont_s,next_index(n),s$2,_aTs_)
                   }
                var
                 x$3=get_arg(n),
                 _aTo_=110,
                 _aTp_=extract_format_int(_aTo_,fmt,pos,i,widths),
                 s$1=caml_format_int(_aTp_,x$3),
                 _aTq_=i + 1 | 0;
                return caml_call3(cont_s,next_index(n),s$1,_aTq_);
               case 69:
               case 71:
               case 101:
               case 102:
               case 103:
                var
                 x$1=get_arg(n),
                 _aTi_=extract_format(fmt,pos,i,widths),
                 s$0=caml_format_float(_aTi_,x$1),
                 _aTj_=i + 1 | 0;
                return caml_call3(cont_s,next_index(n),s$0,_aTj_);
               case 78:
               case 88:
               case 100:
               case 105:
               case 111:
               case 117:
               case 120:
                var
                 x$7=get_arg(n),
                 _aTw_=extract_format_int(conv,fmt,pos,i,widths),
                 s$3=caml_format_int(_aTw_,x$7),
                 _aTx_=i + 1 | 0;
                return caml_call3(cont_s,next_index(n),s$3,_aTx_)
               }
            return bad_conversion_format(fmt,i,conv)}
          function scan_flags(n,widths,i)
           {var n$0=n,widths$0=widths,i$0=i;
            for(;;)
             {var match=unsafe_get(fmt,i$0),switcher=match - 32 | 0;
              if(! (25 < switcher >>> 0))
               switch(switcher)
                {case 10:
                  var
                   width=get_arg(n$0),
                   i$2=i$0 + 1 | 0,
                   widths$1=[0,width,widths$0],
                   n$1=next_index(n$0),
                   n$0=n$1,
                   widths$0=widths$1,
                   i$0=i$2;
                  continue;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 9:
                 case 12:
                 case 15:break;
                 default:var i$1=i$0 + 1 | 0,i$0=i$1;continue}
              return scan_conv(n$0,widths$0,i$0)}}
          return scan_flags(n,0,pos + 1 | 0)},
       mkprintf=
        function(k,out,fmt)
         {function pr(k,n,fmt,v)
           {var len=length$4(fmt);
            function doprn(n,i)
             {var i$0=i;
              for(;;)
               {if(len <= i$0)return caml_call1(k,out);
                var c=unsafe_get(fmt,i$0);
                if(37 === c)
                 return scan_format
                         (fmt,v,n,i$0,cont_s,cont_a,cont_t,cont_f,cont_m);
                write(out,c);
                var i$1=i$0 + 1 | 0,i$0=i$1;
                continue}}
            function cont_s(n,s,i){output_string$0(out,s);return doprn(n,i)}
            function cont_a(n,printer,arg,i)
             {caml_call2(printer,out,arg);return doprn(n,i)}
            function cont_t(n,printer,i)
             {caml_call1(printer,out);return doprn(n,i)}
            function cont_f(n,i){flush$0(out);return doprn(n,i)}
            function cont_m(n,xf,i)
             {var
               _aTa_=count_arguments_of_format(xf),
               m=add_int_index(_aTa_,n);
              return pr(function(param){return doprn(m,i)},n,xf,v)}
            return doprn(n,0)}
          var _aS8_=0,_aS9_=index_of_int(_aS8_);
          function kpr(_aS__,_aS$_){return pr(k,_aS9_,_aS__,_aS$_)}
          return kapr(kpr,fmt)},
       fprintf$0=
        function(out,fmt){return mkprintf(function(_aS7_){return 0},out,fmt)},
       may=
        function(f,param)
         {if(param){var v=param[1];return caml_call1(f,v)}return 0},
       map$3=
        function(f,param)
         {if(param){var v=param[1];return [0,caml_call1(f,v)]}return 0},
       default$0=
        function(v,param){if(param){var v$0=param[1];return v$0}return v},
       default_delayed=
        function(l,param)
         {if(param){var v=param[1];return v}return caml_call1(l,0)},
       is_some=function(param){return param?1:0},
       is_none=function(param){return param?0:1},
       get_exn=function(s,e){if(s){var v=s[1];return v}throw e},
       get$3=function(s){return get_exn(s,[0,Invalid_argument,_hO_])},
       map_default=
        function(f,v,param)
         {if(param){var v2=param[1];return caml_call1(f,v2)}return v},
       _hP_=8,
       buf=create$1(_hP_),
       print_bchar=
        function(c)
         {var rc=[0,c];
          clear$1(buf);
          var i=1;
          for(;;)
           {var _aS5_=1 === (rc[1] & 1)?49:48;
            add_char(buf,_aS5_);
            rc[1] = rc[1] >>> 1 | 0;
            var _aS6_=i + 1 | 0;
            if(8 !== i){var i=_aS6_;continue}
            return contents(buf)}},
       _hQ_=256;
      init(_hQ_,print_bchar);
      var
       count_bits=
        function(i)
         {if(0 === i)return 0;
          var _aS3_=i % 2 | 0,_aS4_=i / 2 | 0;
          return count_bits(_aS4_) + _aS3_ | 0},
       _hR_=256;
      init(_hR_,count_bits);
      var
       mk=
        function(c)
         {var arr=caml_make_vect(8,-1);
          function mk(last_set_bit,i,v)
           {var last_set_bit$0=last_set_bit,i$0=i,v$0=v;
            for(;;)
             {var _aS2_=0 <= i$0?1:0;
              if(_aS2_)
               {var last_set_bit$1=0 === (v$0 & 128)?last_set_bit$0:i$0;
                caml_check_bound(arr,i$0)[1 + i$0] = last_set_bit$1;
                var
                 v$1=v$0 << 1,
                 i$1=i$0 - 1 | 0,
                 last_set_bit$0=last_set_bit$1,
                 i$0=i$1,
                 v$0=v$1;
                continue}
              return _aS2_}}
          var _aS0_=7,_aS1_=-1;
          mk(_aS1_,_aS0_,c);
          return arr},
       _hS_=256;
      init(_hS_,mk);
      var
       Wrapped_in=Make$5([0,equal$0,hash$0]),
       Wrapped_out=Make$5([0,equal$1,hash$1]),
       _hT_=16,
       _hU_=Wrapped_in[1],
       wrapped_in=caml_call1(_hU_,_hT_),
       _hV_=16,
       _hW_=Wrapped_out[1],
       wrapped_out=caml_call1(_hW_,_hV_),
       input_add=
        function(k,v)
         {var _aSY_=Wrapped_in[5],_aSZ_=caml_call2(_aSY_,wrapped_in,k);
          return caml_call2(sync(nolock),_aSZ_,v)},
       output_add=
        function(k,v)
         {var _aSW_=Wrapped_out[5],_aSX_=caml_call2(_aSW_,wrapped_out,k);
          return caml_call2(sync(nolock),_aSX_,v)};
      input_add(stdin$0,stdin);
      output_add(stdout$0,stdout);
      output_add(stderr$0,stderr);
      make_class
       (shared$0,
        function(_aSM_)
         {var
           _aSN_=new_variable(_aSM_,_h2_),
           _aSO_=get_method_labels(_aSM_,_h0_),
           _aSP_=_aSO_[1],
           _aSQ_=_aSO_[2];
          function _aSR_(self_1,param){return close_in$0(self_1[1 + _aSN_])}
          set_methods
           (_aSM_,
            [0,
             _aSP_,
             function(self_1,s,pos,len)
              {return input$0(self_1[1 + _aSN_],s,pos,len)},
             _aSQ_,
             _aSR_]);
          return function(_aSU_,_aST_,_aSS_)
           {var _aSV_=create_object_opt(_aST_,_aSM_);
            _aSV_[1 + _aSN_] = _aSS_;
            return _aSV_}});
      make_class
       (_hX_,
        function(_aSz_)
         {var
           _aSA_=new_variable(_aSz_,_h3_),
           _aSB_=get_method_labels(_aSz_,_hY_),
           _aSC_=_aSB_[1],
           _aSD_=_aSB_[2],
           _aSE_=_aSB_[3];
          function _aSF_(self_2,param)
           {var _aSL_=self_2[1 + _aSA_];close_out$0(_aSL_);return 0}
          function _aSG_(self_2,param){return flush$0(self_2[1 + _aSA_])}
          set_methods
           (_aSz_,
            [0,
             _aSC_,
             function(self_2,s,pos,len)
              {return output$0(self_2[1 + _aSA_],s,pos,len)},
             _aSD_,
             _aSG_,
             _aSE_,
             _aSF_]);
          return function(_aSJ_,_aSI_,_aSH_)
           {var _aSK_=create_object_opt(_aSI_,_aSz_);
            _aSK_[1 + _aSA_] = _aSH_;
            return _aSK_}});
      make_class
       (_h1_,
        function(_aSm_)
         {var
           _aSn_=new_variable(_aSm_,_h4_),
           _aSo_=get_method_labels(_aSm_,_h1_),
           _aSp_=_aSo_[1],
           _aSq_=_aSo_[2];
          function _aSr_(self_3,param){return close_in$0(self_3[1 + _aSn_])}
          set_methods
           (_aSm_,
            [0,
             _aSp_,
             function(self_3,param)
              {try
                {var _aSw_=self_3[1 + _aSn_],_aSx_=read$0(_aSw_);return _aSx_}
               catch(_aSy_)
                {_aSy_ = caml_wrap_exception(_aSy_);
                 if(_aSy_ === No_more_input)throw End_of_file;
                 throw _aSy_}},
             _aSq_,
             _aSr_]);
          return function(_aSu_,_aSt_,_aSs_)
           {var _aSv_=create_object_opt(_aSt_,_aSm_);
            _aSv_[1 + _aSn_] = _aSs_;
            return _aSv_}});
      make_class
       (_hZ_,
        function(_aR$_)
         {var
           _aSa_=new_variable(_aR$_,_h5_),
           _aSb_=get_method_labels(_aR$_,_hZ_),
           _aSc_=_aSb_[1],
           _aSd_=_aSb_[2],
           _aSe_=_aSb_[3];
          function _aSf_(self_4,param)
           {var _aSl_=self_4[1 + _aSa_];close_out$0(_aSl_);return 0}
          function _aSg_(self_4,param){return flush$0(self_4[1 + _aSa_])}
          set_methods
           (_aR$_,
            [0,
             _aSc_,
             function(self_4,t){return write(self_4[1 + _aSa_],t)},
             _aSd_,
             _aSg_,
             _aSe_,
             _aSf_]);
          return function(_aSj_,_aSi_,_aSh_)
           {var _aSk_=create_object_opt(_aSi_,_aR$_);
            _aSk_[1 + _aSa_] = _aSh_;
            return _aSk_}});
      var
       MakeInfix=
        function(Base)
         {var
           symbol=Base[12],
           symbol$0=Base[10],
           symbol$1=Base[9],
           symbol$2=Base[8],
           symbol$3=Base[7];
          function symbol$4(x,y)
           {function _aR9_(x)
             {var _aR__=Base[13];return caml_call2(_aR__,x,y) <= 0?1:0}
            return seq(x,Base[4],_aR9_)}
          function symbol$5(x,y)
           {var _aR6_=Base[13];
            if(0 < caml_call2(_aR6_,x,y))
             {var
               _aR7_=
                function(x)
                 {var _aR8_=Base[13];return 0 <= caml_call2(_aR8_,x,y)?1:0};
              return seq(x,Base[5],_aR7_)}
            return symbol$4(x,y)}
          return [0,
                  symbol$3,
                  symbol$2,
                  symbol$1,
                  symbol$0,
                  symbol,
                  symbol$4,
                  symbol$5]},
       MakeCompare=
        function(Base)
         {function symbol(a,b)
           {var _aR5_=Base[13];return 0 === caml_call2(_aR5_,a,b)?1:0}
          function symbol$0(a,b)
           {var _aR4_=Base[13];return caml_call2(_aR4_,a,b) < 0?1:0}
          function symbol$1(a,b)
           {var _aR3_=Base[13];return 0 < caml_call2(_aR3_,a,b)?1:0}
          function symbol$2(a,b)
           {var _aR2_=Base[13];return caml_call2(_aR2_,a,b) <= 0?1:0}
          function symbol$3(a,b)
           {var _aR1_=Base[13];return 0 <= caml_call2(_aR1_,a,b)?1:0}
          function symbol$4(a,b)
           {var _aR0_=Base[13];return 0 !== caml_call2(_aR0_,a,b)?1:0}
          return [0,symbol$4,symbol$3,symbol$2,symbol$1,symbol$0,symbol]},
       MakeRefOps=
        function(Base)
         {function symbol(a,b)
           {var _aRY_=a[1],_aRZ_=Base[7];
            a[1] = caml_call2(_aRZ_,_aRY_,b);
            return 0}
          function symbol$0(a,b)
           {var _aRW_=a[1],_aRX_=Base[8];
            a[1] = caml_call2(_aRX_,_aRW_,b);
            return 0}
          function symbol$1(a,b)
           {var _aRU_=a[1],_aRV_=Base[9];
            a[1] = caml_call2(_aRV_,_aRU_,b);
            return 0}
          function symbol$2(a,b)
           {var _aRS_=a[1],_aRT_=Base[10];
            a[1] = caml_call2(_aRT_,_aRS_,b);
            return 0}
          return [0,symbol,symbol$0,symbol$1,symbol$2]},
       MakeNumeric=
        function(Base)
         {var
           zero=Base[1],
           one=Base[2],
           neg=Base[3],
           succ=Base[4],
           pred=Base[5],
           abs=Base[6],
           add=Base[7],
           sub=Base[8],
           mul=Base[9],
           div=Base[10],
           modulo=Base[11],
           pow=Base[12],
           compare=Base[13],
           of_int=Base[14],
           to_int=Base[15],
           of_string=Base[16],
           to_string=Base[17],
           of_float=Base[18],
           to_float=Base[19],
           operations=
            [0,
             Base[1],
             Base[2],
             Base[3],
             Base[4],
             Base[5],
             Base[6],
             Base[7],
             Base[8],
             Base[9],
             Base[10],
             Base[11],
             Base[12],
             Base[13],
             Base[14],
             Base[15],
             Base[16],
             Base[17],
             Base[18],
             Base[19]];
          function equal(x,y)
           {var _aRR_=Base[13];return 0 === caml_call2(_aRR_,x,y)?1:0}
          function ord(x,y)
           {var _aRQ_=Base[13];return ord0(caml_call2(_aRQ_,x,y))}
          var
           Infix=MakeInfix(Base),
           Compare=MakeCompare(Base),
           symbol=Infix[1],
           symbol$0=Infix[2],
           symbol$1=Infix[3],
           symbol$2=Infix[4],
           symbol$3=Infix[5],
           symbol$4=Infix[6],
           symbol$5=Infix[7],
           include=MakeRefOps(Base),
           symbol$6=include[1],
           symbol$7=include[2],
           symbol$8=include[3],
           symbol$9=include[4];
          return [0,
                  zero,
                  one,
                  neg,
                  abs,
                  add,
                  sub,
                  mul,
                  div,
                  modulo,
                  pow,
                  compare,
                  equal,
                  ord,
                  of_int,
                  to_int,
                  of_float,
                  to_float,
                  of_string,
                  to_string,
                  operations,
                  succ,
                  pred,
                  Infix,
                  Compare,
                  symbol,
                  symbol$0,
                  symbol$1,
                  symbol$2,
                  symbol$3,
                  symbol$4,
                  symbol$5,
                  symbol$6,
                  symbol$7,
                  symbol$8,
                  symbol$9]},
       generic_pow=
        function(zero,one,div_two,mod_two,symbol,a,n)
         {function pow(a,n)
           {if(caml_equal(n,zero))return one;
            if(caml_equal(n,one))return a;
            var
             _aRO_=caml_call1(div_two,n),
             b=pow(a,_aRO_),
             _aRP_=caml_call1(mod_two,n),
             one$0=caml_equal(_aRP_,zero)?one:a;
            return caml_call2(symbol,caml_call2(symbol,b,b),one$0)}
          return caml_lessthan(n,zero)?invalid_arg(_h6_):pow(a,n)},
       Overflow=[248,_h7_,caml_fresh_oo_id(0)],
       NaN$0=[248,_h8_,caml_fresh_oo_id(0)],
       compare$7=function(x,y){return y < x?1:x < y?-1:0},
       symbol$0=function(a,b){return a === b?1:0},
       _h9_=32;
      if(! symbol$0(match$0,_h9_))
       {caml_int_of_string(_wy_);
        caml_int_of_string(_wz_);
        caml_int_of_string(_wA_)}
      var
       one$2=1.,
       zero$2=0.,
       neg=function(_aRN_){return - _aRN_},
       succ$2=function(x){return x + 1.},
       pred$2=function(x){return x - 1.},
       abs$3=function(_aRM_){return Math.abs(_aRM_)},
       div=function(_aRL_,_aRK_){return _aRL_ / _aRK_},
       mul=function(_aRJ_,_aRI_){return _aRJ_ * _aRI_},
       sub$4=function(_aRH_,_aRG_){return _aRH_ - _aRG_},
       add$3=function(_aRF_,_aRE_){return _aRF_ + _aRE_},
       modulo=function(_aRD_,_aRC_){return _aRD_ % _aRC_},
       pow=function(_aRB_,_aRA_){return Math.pow(_aRB_,_aRA_)},
       compare$8=function(_aRz_,_aRy_){return caml_compare(_aRz_,_aRy_)},
       of_int=function(_aRx_){return _aRx_},
       to_int=function(_aRw_){return _aRw_ | 0},
       of_string=function(_aRv_){return caml_float_of_string(_aRv_)},
       _h__=function(_aRu_){return _aRu_},
       _h$_=
        MakeNumeric
          ([0,
            zero$2,
            one$2,
            neg,
            succ$2,
            pred$2,
            abs$3,
            add$3,
            sub$4,
            mul,
            div,
            modulo,
            pow,
            compare$8,
            of_int,
            to_int,
            of_string,
            to_string$0,
            function(_aRt_){return _aRt_},
            _h__])
         [11],
       if_safe=
        function(x)
         {var match=caml_classify_float(x);
          if(3 === match)throw Overflow;
          if(4 <= match)throw NaN$0;
          return 0},
       check$0=function(x){if_safe(x);return x},
       safe1=function(f,x){return check$0(caml_call1(f,x))},
       _ia_=function(_aRs_){return Math.atan(_aRs_)},
       atan=function(_aRr_){return safe1(_ia_,_aRr_)},
       _ib_=1.;
      atan(_ib_);
      var
       modulo$0=function(_aRq_,_aRp_){return caml_mod(_aRq_,_aRp_)},
       _ic_=function(_aRo_,_aRn_){return caml_mul(_aRo_,_aRn_)},
       _id_=function(_aRm_,_aRl_){return _aRm_ & _aRl_},
       _ie_=function(_aRk_){return _id_(one,_aRk_)},
       _if_=function(n){return n >> 1},
       pow$0=
        function(_aRi_,_aRj_)
         {return generic_pow(zero,one,_if_,_ie_,_ic_,_aRi_,_aRj_)},
       _ig_=function(_aRh_){return _aRh_},
       _ih_=function(_aRg_){return _aRg_ | 0},
       _ii_=function(_aRf_){return caml_int_of_string(_aRf_)},
       _ij_=function(_aRe_){return _aRe_},
       _ik_=function(_aRd_){return _aRd_},
       _il_=function(_aRc_,_aRb_){return caml_div(_aRc_,_aRb_)},
       _im_=function(_aRa_,_aQ$_){return caml_mul(_aRa_,_aQ$_)},
       _in_=function(_aQ__,_aQ9_){return _aQ__ - _aQ9_ | 0},
       _io_=function(_aQ8_,_aQ7_){return _aQ8_ + _aQ7_ | 0},
       include=
        MakeNumeric
         ([0,
           zero,
           one,
           function(_aQ6_){return - _aQ6_ | 0},
           succ,
           pred,
           abs$0,
           _io_,
           _in_,
           _im_,
           _il_,
           modulo$0,
           pow$0,
           compare$1,
           _ik_,
           _ij_,
           _ii_,
           to_string$2,
           _ih_,
           _ig_]),
       compare$9=include[11],
       modulo$1=function(_aQ5_,_aQ4_){return caml_int64_mod(_aQ5_,_aQ4_)},
       _ip_=function(_aQ3_,_aQ2_){return caml_int64_mul(_aQ3_,_aQ2_)},
       _iq_=function(_aQ1_,_aQ0_){return caml_int64_and(_aQ1_,_aQ0_)},
       _ir_=function(_aQZ_){return _iq_(one$0,_aQZ_)},
       _is_=function(n){return caml_int64_shift_right(n,1)},
       pow$1=
        function(_aQX_,_aQY_)
         {return generic_pow(zero$0,one$0,_is_,_ir_,_ip_,_aQX_,_aQY_)},
       _it_=function(_aQW_){return caml_int64_to_float(_aQW_)},
       _iu_=function(_aQV_){return caml_int64_of_float(_aQV_)},
       _iv_=function(_aQU_){return caml_int64_of_string(_aQU_)},
       _iw_=function(_aQT_){return caml_int64_to_int32(_aQT_)},
       _ix_=function(_aQS_){return caml_int64_of_int32(_aQS_)},
       _iy_=function(_aQR_,_aQQ_){return caml_int64_div(_aQR_,_aQQ_)},
       _iz_=function(_aQP_,_aQO_){return caml_int64_mul(_aQP_,_aQO_)},
       _iA_=function(_aQN_,_aQM_){return caml_int64_sub(_aQN_,_aQM_)},
       _iB_=function(_aQL_,_aQK_){return caml_int64_add(_aQL_,_aQK_)},
       include$0=
        MakeNumeric
         ([0,
           zero$0,
           one$0,
           function(_aQJ_){return caml_int64_neg(_aQJ_)},
           succ$0,
           pred$0,
           abs$1,
           _iB_,
           _iA_,
           _iz_,
           _iy_,
           modulo$1,
           pow$1,
           compare$2,
           _ix_,
           _iw_,
           _iv_,
           to_string$3,
           _iu_,
           _it_]),
       compare$10=include$0[11],
       modulo$2=function(_aQI_,_aQH_){return caml_mod(_aQI_,_aQH_)},
       _iC_=function(_aQG_,_aQF_){return caml_mul(_aQG_,_aQF_)},
       _iD_=function(_aQE_,_aQD_){return _aQE_ & _aQD_},
       _iE_=function(_aQC_){return _iD_(one$1,_aQC_)},
       _iF_=function(n){return n >> 1},
       pow$2=
        function(_aQA_,_aQB_)
         {return generic_pow(zero$1,one$1,_iF_,_iE_,_iC_,_aQA_,_aQB_)},
       _iG_=function(_aQz_){return _aQz_},
       _iH_=function(_aQy_){return _aQy_ | 0},
       _iI_=function(_aQx_){return caml_int_of_string(_aQx_)},
       _iJ_=function(_aQw_){return _aQw_},
       _iK_=function(_aQv_){return _aQv_},
       _iL_=function(_aQu_,_aQt_){return caml_div(_aQu_,_aQt_)},
       _iM_=function(_aQs_,_aQr_){return caml_mul(_aQs_,_aQr_)},
       _iN_=function(_aQq_,_aQp_){return _aQq_ - _aQp_ | 0},
       _iO_=function(_aQo_,_aQn_){return _aQo_ + _aQn_ | 0},
       include$1=
        MakeNumeric
         ([0,
           zero$1,
           one$1,
           function(_aQm_){return - _aQm_ | 0},
           succ$1,
           pred$1,
           abs$2,
           _iO_,
           _iN_,
           _iM_,
           _iL_,
           modulo$2,
           pow$2,
           compare$3,
           _iK_,
           _iJ_,
           _iI_,
           to_string$4,
           _iH_,
           _iG_]),
       compare$11=include$1[11],
       fold_left$1=
        function(f,acc,s)
         {var acc$0=acc,s$0=s;
          for(;;)
           {var _aQl_=0,match=caml_call1(s$0,_aQl_);
            if(match)
             {var
               s$1=match[2],
               e=match[1],
               acc$1=caml_call2(f,acc$0,e),
               acc$0=acc$1,
               s$0=s$1;
              continue}
            return acc$0}},
       empty$0=0,
       is_singleton=
        function(param)
         {if(param && ! param[1] && ! param[3])return 1;return 0},
       height=function(param){if(param){var h=param[4];return h}return 0},
       create$6=
        function(l,v,r)
         {if(l)var h=l[4],hl=h;else var hl=0;
          if(r)var h$0=r[4],hr=h$0;else var hr=0;
          var _aQk_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
          return [0,l,v,r,_aQk_]},
       bal=
        function(l,v,r)
         {if(l)var h=l[4],hl=h;else var hl=0;
          if(r)var h$0=r[4],hr=h$0;else var hr=0;
          if((hr + 2 | 0) < hl)
           {if(l)
             {var lr=l[3],lv=l[2],ll=l[1],_aQf_=height(lr);
              if(_aQf_ <= height(ll))return create$6(ll,lv,create$6(lr,v,r));
              if(lr)
               {var lrr=lr[3],lrv=lr[2],lrl=lr[1],_aQg_=create$6(lrr,v,r);
                return create$6(create$6(ll,lv,lrl),lrv,_aQg_)}
              return invalid_arg(_iP_)}
            return invalid_arg(_iQ_)}
          if((hl + 2 | 0) < hr)
           {if(r)
             {var rr=r[3],rv=r[2],rl=r[1],_aQh_=height(rl);
              if(_aQh_ <= height(rr))return create$6(create$6(l,v,rl),rv,rr);
              if(rl)
               {var rlr=rl[3],rlv=rl[2],rll=rl[1],_aQi_=create$6(rlr,rv,rr);
                return create$6(create$6(l,v,rll),rlv,_aQi_)}
              return invalid_arg(_iR_)}
            return invalid_arg(_iS_)}
          var _aQj_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
          return [0,l,v,r,_aQj_]},
       min_elt=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var _aQe_=param$0[1];
              if(_aQe_){var param$0=_aQe_;continue}
              var v=param$0[2];
              return v}
            throw Not_found}},
       min_elt_opt=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var _aQd_=param$0[1];
              if(_aQd_){var param$0=_aQd_;continue}
              var v=param$0[2];
              return [0,v]}
            return 0}},
       get_root=
        function(param){if(param){var v=param[2];return v}throw Not_found},
       pop_min=
        function(s)
         {var mini=[0,get_root(s)];
          function loop(param)
           {if(param)
             {var _aQc_=param[1];
              if(_aQc_){var r=param[3],v=param[2];return bal(loop(_aQc_),v,r)}
              var r$0=param[3],v$0=param[2];
              mini[1] = v$0;
              return r$0}
            throw Not_found}
          var others=loop(s);
          return [0,mini[1],others]},
       pop_max=
        function(s)
         {var maxi=[0,get_root(s)];
          function loop(param)
           {if(param)
             {var _aQb_=param[1];
              if(param[3])
               {var r=param[3],v=param[2];return bal(_aQb_,v,loop(r))}
              var v$0=param[2];
              maxi[1] = v$0;
              return _aQb_}
            throw Not_found}
          var others=loop(s);
          return [0,maxi[1],others]},
       max_elt=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
              var v=param$0[2];
              return v}
            throw Not_found}},
       max_elt_opt=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {if(param$0[3]){var param$1=param$0[3],param$0=param$1;continue}
              var v=param$0[2];
              return [0,v]}
            return 0}},
       remove_min_elt=
        function(param)
         {if(param)
           {var _aQa_=param[1];
            if(_aQa_)
             {var r=param[3],v=param[2];return bal(remove_min_elt(_aQa_),v,r)}
            var r$0=param[3];
            return r$0}
          return invalid_arg(_iT_)},
       merge=
        function(t1,t2)
         {if(t1)
           {if(t2)
             {var _aP$_=remove_min_elt(t2);return bal(t1,min_elt(t2),_aP$_)}
            return t1}
          return t2},
       pop$1=
        function(s)
         {if(s){var r=s[3],v=s[2],l=s[1];return [0,v,merge(l,r)]}
          throw Not_found},
       add$4=
        function(cmp,x,t)
         {if(t)
           {var r=t[3],v=t[2],l=t[1],c=caml_call2(cmp,x,v);
            if(0 === c)return t;
            if(0 <= c){var nr=add$4(cmp,x,r);return nr === r?t:bal(l,v,nr)}
            var nl=add$4(cmp,x,l);
            return nl === l?t:bal(nl,v,r)}
          return [0,0,x,0,1]},
       remove=
        function(cmp,x,t)
         {if(t)
           {var r=t[3],v=t[2],l=t[1],c=caml_call2(cmp,x,v);
            if(0 === c)return merge(l,r);
            if(0 <= c){var nr=remove(cmp,x,r);return nr === r?t:bal(l,v,nr)}
            var nl=remove(cmp,x,l);
            return nl === l?t:bal(nl,v,r)}
          return t},
       remove_exn=
        function(cmp,x,param)
         {if(param)
           {var r=param[3],v=param[2],l=param[1],c=caml_call2(cmp,x,v);
            return 0 === c
                    ?merge(l,r)
                    :0 <= c
                      ?bal(l,v,remove_exn(cmp,x,r))
                      :bal(remove_exn(cmp,x,l),v,r)}
          throw Not_found},
       update=
        function(cmp,x,y,s)
         {if(0 === caml_call2(cmp,x,y))
           {var
             loop=
              function(t)
               {if(t)
                 {var h=t[4],r=t[3],v=t[2],l=t[1],c=caml_call2(cmp,x,v);
                  if(0 === c)return v === y?t:[0,l,y,r,h];
                  if(0 <= c){var nr=loop(r);return nr === r?t:[0,l,v,nr,h]}
                  var nl=loop(l);
                  return nl === l?t:[0,nl,v,r,h]}
                throw Not_found};
            return loop(s)}
          return add$4(cmp,y,remove_exn(cmp,x,s))},
       find$0=
        function(cmp,x,param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               r=param$0[3],
               v=param$0[2],
               l=param$0[1],
               c=caml_call2(cmp,x,v);
              if(0 === c)return v;
              var param$1=0 <= c?r:l,param$0=param$1;
              continue}
            throw Not_found}},
       find_opt=
        function(cmp,x,param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               r=param$0[3],
               v=param$0[2],
               l=param$0[1],
               c=caml_call2(cmp,x,v);
              if(0 === c)return [0,v];
              var param$1=0 <= c?r:l,param$0=param$1;
              continue}
            return 0}},
       find_first_helper_found=
        function(k0,f,param)
         {var k0$0=k0,param$0=param;
          for(;;)
           {if(param$0)
             {var r=param$0[3],k=param$0[2],l=param$0[1];
              if(caml_call1(f,k)){var k0$0=k,param$0=l;continue}
              var param$0=r;
              continue}
            return k0$0}},
       find_first=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))return find_first_helper_found(k,f,l);
              var m$0=r;
              continue}
            throw Not_found}},
       find_first_opt=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))return [0,find_first_helper_found(k,f,l)];
              var m$0=r;
              continue}
            return 0}},
       find_last_helper_found=
        function(k0,f,param)
         {var k0$0=k0,param$0=param;
          for(;;)
           {if(param$0)
             {var r=param$0[3],k=param$0[2],l=param$0[1];
              if(caml_call1(f,k)){var k0$0=k,param$0=r;continue}
              var param$0=l;
              continue}
            return k0$0}},
       find_last=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))return find_last_helper_found(k,f,r);
              var m$0=l;
              continue}
            throw Not_found}},
       find_last_opt=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))return [0,find_last_helper_found(k,f,r)];
              var m$0=l;
              continue}
            return 0}},
       iter$7=
        function(f,param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var r=param$0[3],v=param$0[2],l=param$0[1];
              iter$7(f,l);
              caml_call1(f,v);
              var param$0=r;
              continue}
            return 0}},
       fold$2=
        function(f,s,accu)
         {var s$0=s,accu$0=accu;
          for(;;)
           {if(s$0)
             {var
               r=s$0[3],
               v=s$0[2],
               l=s$0[1],
               _aP__=fold$2(f,l,accu$0),
               accu$1=caml_call2(f,v,_aP__),
               s$0=r,
               accu$0=accu$1;
              continue}
            return accu$0}},
       Found=[248,_iU_,caml_fresh_oo_id(0)],
       at_rank_exn=
        function(i,s)
         {if(i < 0)invalid_arg(_iV_);
          var res=[0,get_root(s)];
          try
           {var
             _aP6_=0,
             _aP7_=
              function(node,j)
               {if(j !== i)return j + 1 | 0;res[1] = node;throw Found};
            fold$2(_aP7_,s,_aP6_);
            var _aP8_=invalid_arg(_iW_);
            return _aP8_}
          catch(_aP9_)
           {_aP9_ = caml_wrap_exception(_aP9_);
            if(_aP9_ === Found)return res[1];
            throw _aP9_}},
       singleton$0=function(x){return [0,0,x,0,1]},
       add_min=
        function(v,param)
         {if(param)
           {var r=param[3],x=param[2],l=param[1];return bal(add_min(v,l),x,r)}
          return singleton$0(v)},
       add_max=
        function(v,param)
         {if(param)
           {var r=param[3],x=param[2],l=param[1];return bal(l,x,add_max(v,r))}
          return singleton$0(v)},
       join$0=
        function(l,v,r)
         {if(l)
           {if(r)
             {var
               rh=r[4],
               rr=r[3],
               rv=r[2],
               rl=r[1],
               lh=l[4],
               lr=l[3],
               lv=l[2],
               ll=l[1];
              return (rh + 2 | 0) < lh
                      ?bal(ll,lv,join$0(lr,v,r))
                      :(lh + 2 | 0) < rh?bal(join$0(l,v,rl),rv,rr):create$6(l,v,r)}
            return add_max(v,l)}
          return add_min(v,r)},
       split=
        function(cmp,x,param)
         {if(param)
           {var r=param[3],v=param[2],l=param[1],c=caml_call2(cmp,x,v);
            if(0 === c)return [0,l,1,r];
            if(0 <= c)
             {var match=split(cmp,x,r),rr=match[3],pres=match[2],lr=match[1];
              return [0,join$0(l,v,lr),pres,rr]}
            var
             match$0=split(cmp,x,l),
             rl=match$0[3],
             pres$0=match$0[2],
             ll=match$0[1];
            return [0,ll,pres$0,join$0(rl,v,r)]}
          return _iX_},
       split_opt=
        function(cmp,x,param)
         {if(param)
           {var r=param[3],v=param[2],l=param[1],c=caml_call2(cmp,x,v);
            if(0 === c)return [0,l,[0,v],r];
            if(0 <= c)
             {var
               match=split_opt(cmp,x,r),
               rr=match[3],
               pres=match[2],
               lr=match[1];
              return [0,join$0(l,v,lr),pres,rr]}
            var
             match$0=split_opt(cmp,x,l),
             rl=match$0[3],
             pres$0=match$0[2],
             ll=match$0[1];
            return [0,ll,pres$0,join$0(rl,v,r)]}
          return _iY_},
       split_lt=
        function(cmp,x,s)
         {var match=split_opt(cmp,x,s),r=match[3],maybe=match[2],l=match[1];
          if(maybe){var eq_x=maybe[1];return [0,l,add$4(cmp,eq_x,r)]}
          return [0,l,r]},
       split_le=
        function(cmp,x,s)
         {var match=split_opt(cmp,x,s),r=match[3],maybe=match[2],l=match[1];
          if(maybe){var eq_x=maybe[1];return [0,add$4(cmp,eq_x,l),r]}
          return [0,l,r]},
       cardinal=
        function(param)
         {if(param)
           {var r=param[3],l=param[1],_aP5_=cardinal(r);
            return (cardinal(l) + 1 | 0) + _aP5_ | 0}
          return 0},
       elements_aux=
        function(accu,param)
         {var accu$0=accu,param$0=param;
          for(;;)
           {if(param$0)
             {var
               r=param$0[3],
               v=param$0[2],
               l=param$0[1],
               accu$1=[0,v,elements_aux(accu$0,r)],
               accu$0=accu$1,
               param$0=l;
              continue}
            return accu$0}},
       elements=function(s){return elements_aux(0,s)},
       to_array=
        function(s)
         {if(s)
           {var
             e=s[2],
             _aP2_=cardinal(s),
             arr=caml_make_vect(_aP2_,e),
             i=[0,0],
             _aP3_=
              function(x){var _aP4_=i[1];arr[1 + _aP4_] = x;i[1]++;return 0};
            iter$7(_aP3_,s);
            return arr}
          return [0]},
       cons_iter=
        function(s,t)
         {var s$0=s,t$0=t;
          for(;;)
           {if(s$0)
             {var
               r=s$0[3],
               e=s$0[2],
               s$1=s$0[1],
               t$1=[0,e,r,t$0],
               s$0=s$1,
               t$0=t$1;
              continue}
            return t$0}},
       rev_cons_iter=
        function(s,t)
         {var s$0=s,t$0=t;
          for(;;)
           {if(s$0)
             {var
               s$1=s$0[3],
               e=s$0[2],
               l=s$0[1],
               t$1=[0,e,l,t$0],
               s$0=s$1,
               t$0=t$1;
              continue}
            return t$0}},
       cons_iter_from=
        function(cmp,k2,m,e)
         {var m$0=m,e$0=e;
          for(;;)
           {if(m$0)
             {var r=m$0[3],k=m$0[2],l=m$0[1];
              if(0 < caml_call2(cmp,k2,k)){var m$0=r;continue}
              var e$1=[0,k,r,e$0],m$0=l,e$0=e$1;
              continue}
            return e$0}},
       enum_next=
        function(l,param)
         {var _aP1_=l[1];
          if(_aP1_)
           {var t=_aP1_[3],s=_aP1_[2],e=_aP1_[1];
            l[1] = cons_iter(s,t);
            return e}
          throw No_more_elements},
       enum_backwards_next=
        function(l,param)
         {var _aP0_=l[1];
          if(_aP0_)
           {var t=_aP0_[3],s=_aP0_[2],e=_aP0_[1];
            l[1] = rev_cons_iter(s,t);
            return e}
          throw No_more_elements},
       enum_count=
        function(l,param)
         {function aux(n,param)
           {var n$0=n,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 t=param$0[3],
                 s=param$0[2],
                 n$1=(n$0 + 1 | 0) + cardinal(s) | 0,
                 n$0=n$1,
                 param$0=t;
                continue}
              return n$0}}
          return aux(0,l[1])},
       enum$1=
        function(t)
         {function make(l)
           {var l$0=[0,l];
            function clone(param){return make(l$0[1])}
            function _aPX_(_aPZ_){return enum_count(l$0,_aPZ_)}
            return make$3
                    (function(_aPY_){return enum_next(l$0,_aPY_)},_aPX_,clone)}
          var _aPW_=0;
          return make(cons_iter(t,_aPW_))},
       backwards=
        function(t)
         {function make(l)
           {var l$0=[0,l];
            function clone(param){return make(l$0[1])}
            function _aPT_(_aPV_){return enum_count(l$0,_aPV_)}
            return make$3
                    (function(_aPU_){return enum_backwards_next(l$0,_aPU_)},
                     _aPT_,
                     clone)}
          var _aPS_=0;
          return make(rev_cons_iter(t,_aPS_))},
       of_enum$0=
        function(cmp,e)
         {return fold$1
                  (function(acc,elem){return add$4(cmp,elem,acc)},empty$0,e)},
       of_list$0=
        function(cmp,l)
         {return fold(function(a,x){return add$4(cmp,x,a)},empty$0,l)},
       of_array=
        function(cmp,l)
         {return fold_left$0(function(a,x){return add$4(cmp,x,a)},empty$0,l)},
       print$0=
        function(opt,_aPQ_,_aPP_,print_elt,out,t)
         {if(opt)var sth=opt[1],first=sth;else var first=_i2_;
          if(_aPQ_)var sth$0=_aPQ_[1],last=sth$0;else var last=_i1_;
          if(_aPP_)var sth$1=_aPP_[1],sep=sth$1;else var sep=_i0_;
          var _aPR_=enum$1(t);
          return print
                  ([0,first],
                   [0,last],
                   [0,sep],
                   function(out,e)
                    {return caml_call2(fprintf$0(out,_iZ_),print_elt,e)},
                   out,
                   _aPR_)},
       for_all$0=
        function(p,param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               r=param$0[3],
               v=param$0[2],
               l=param$0[1],
               _aPM_=caml_call1(p,v);
              if(_aPM_)
               {var _aPN_=for_all$0(p,l);
                if(_aPN_){var param$0=r;continue}
                var _aPO_=_aPN_}
              else
               var _aPO_=_aPM_;
              return _aPO_}
            return 1}},
       exists$0=
        function(p,param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               r=param$0[3],
               v=param$0[2],
               l=param$0[1],
               _aPJ_=caml_call1(p,v);
              if(_aPJ_)
               var _aPK_=_aPJ_;
              else
               {var _aPL_=exists$0(p,l);
                if(! _aPL_){var param$0=r;continue}
                var _aPK_=_aPL_}
              return _aPK_}
            return 0}},
       partition=
        function(cmp,p,s)
         {function part(accu,param)
           {var accu$0=accu,param$0=param;
            for(;;)
             {var _aPG_=accu$0[2],_aPH_=accu$0[1];
              if(param$0)
               {var
                 r=param$0[3],
                 v=param$0[2],
                 l=param$0[1],
                 _aPI_=
                  caml_call1(p,v)
                   ?[0,add$4(cmp,v,_aPH_),_aPG_]
                   :[0,_aPH_,add$4(cmp,v,_aPG_)],
                 accu$1=part(_aPI_,l),
                 accu$0=accu$1,
                 param$0=r;
                continue}
              return accu$0}}
          return part(_i3_,s)},
       concat=
        function(t1,t2)
         {if(t1)
           {if(t2)
             {var _aPF_=remove_min_elt(t2);
              return join$0(t1,min_elt(t2),_aPF_)}
            return t1}
          return t2},
       union=
        function(cmp12,s1,s2)
         {if(s1)
           {if(s2)
             {var
               h2=s2[4],
               r2=s2[3],
               v2=s2[2],
               l2=s2[1],
               h1=s1[4],
               r1=s1[3],
               v1=s1[2],
               l1=s1[1];
              if(h2 <= h1)
               {if(1 === h2)return add$4(cmp12,v2,s1);
                var
                 match=split(cmp12,v1,s2),
                 r2$0=match[3],
                 l2$0=match[1],
                 _aPD_=union(cmp12,r1,r2$0);
                return join$0(union(cmp12,l1,l2$0),v1,_aPD_)}
              if(1 === h1)return add$4(cmp12,v1,s2);
              var
               match$0=split(cmp12,v2,s1),
               r1$0=match$0[3],
               l1$0=match$0[1],
               _aPE_=union(cmp12,r1$0,r2);
              return join$0(union(cmp12,l1$0,l2),v2,_aPE_)}
            return s1}
          return s2},
       filter=
        function(p,t)
         {if(t)
           {var
             r=t[3],
             v=t[2],
             l=t[1],
             l$0=filter(p,l),
             pv=caml_call1(p,v),
             r$0=filter(p,r);
            if(pv)
             {if(l === l$0 && r === r$0)return t;return join$0(l$0,v,r$0)}
            return concat(l$0,r$0)}
          return 0},
       try_join=
        function(cmp,l,v,r)
         {var switch$0=0;
          if(0 !== l)
           {var _aPC_=max_elt(l);if(0 <= caml_call2(cmp,_aPC_,v))switch$0 = 1}
          if(! switch$0)
           {var switch$1=0;
            if(0 !== r)
             {var _aPB_=min_elt(r);
              if(0 <= caml_call2(cmp,v,_aPB_))switch$1 = 1}
            if(! switch$1)return join$0(l,v,r)}
          return union(cmp,l,add$4(cmp,v,r))},
       map_endo=
        function(cmp,f,t)
         {if(t)
           {var
             r=t[3],
             v=t[2],
             l=t[1],
             l$0=map_endo(cmp,f,l),
             v$0=caml_call1(f,v),
             r$0=map_endo(cmp,f,r);
            if(l === l$0 && v === v$0 && r === r$0)return t;
            return try_join(cmp,l$0,v$0,r$0)}
          return 0},
       try_concat=
        function(cmp,t1,t2)
         {if(t1)
           {if(t2)
             {var _aPA_=remove_min_elt(t2);
              return try_join(cmp,t1,min_elt(t2),_aPA_)}
            return t1}
          return t2},
       filter_map_endo=
        function(cmp,f,t)
         {if(t)
           {var
             r=t[3],
             v=t[2],
             l=t[1],
             l$0=filter_map_endo(cmp,f,l),
             v$0=caml_call1(f,v),
             r$0=filter_map_endo(cmp,f,r);
            if(v$0)
             {var v$1=v$0[1];
              if(l === l$0 && v === v$1 && r === r$0)return t;
              return try_join(cmp,l$0,v$1,r$0)}
            return try_concat(cmp,l$0,r$0)}
          return 0},
       sym_diff=
        function(cmp12,s1,s2)
         {if(s1)
           {if(s2)
             {var
               r1=s1[3],
               v1=s1[2],
               l1=s1[1],
               _aPw_=split(cmp12,v1,s2),
               _aPx_=_aPw_[1];
              if(_aPw_[2])
               {var r2=_aPw_[3],_aPy_=sym_diff(cmp12,r1,r2);
                return concat(sym_diff(cmp12,l1,_aPx_),_aPy_)}
              var r2$0=_aPw_[3],_aPz_=sym_diff(cmp12,r1,r2$0);
              return join$0(sym_diff(cmp12,l1,_aPx_),v1,_aPz_)}
            return s1}
          return s2},
       inter=
        function(cmp12,s1,s2)
         {if(s1)
           {if(s2)
             {var
               r1=s1[3],
               v1=s1[2],
               l1=s1[1],
               _aPs_=split(cmp12,v1,s2),
               _aPt_=_aPs_[1];
              if(_aPs_[2])
               {var r2=_aPs_[3],_aPu_=inter(cmp12,r1,r2);
                return join$0(inter(cmp12,l1,_aPt_),v1,_aPu_)}
              var r2$0=_aPs_[3],_aPv_=inter(cmp12,r1,r2$0);
              return concat(inter(cmp12,l1,_aPt_),_aPv_)}
            return 0}
          return 0},
       diff=
        function(cmp12,s1,s2)
         {if(s1)
           {if(s2)
             {var
               r1=s1[3],
               v1=s1[2],
               l1=s1[1],
               _aPo_=split(cmp12,v1,s2),
               _aPp_=_aPo_[1];
              if(_aPo_[2])
               {var r2=_aPo_[3],_aPq_=diff(cmp12,r1,r2);
                return concat(diff(cmp12,l1,_aPp_),_aPq_)}
              var r2$0=_aPo_[3],_aPr_=diff(cmp12,r1,r2$0);
              return join$0(diff(cmp12,l1,_aPp_),v1,_aPr_)}
            return s1}
          return 0},
       disjoint=
        function(cmp12,s1,s2)
         {var s1$0=s1,s2$0=s2;
          for(;;)
           {if(s1$0 && s2$0)
             {var
               r1=s1$0[3],
               v1=s1$0[2],
               l1=s1$0[1],
               _aPl_=split(cmp12,v1,s2$0),
               _aPm_=_aPl_[1];
              if(_aPl_[2])return 0;
              var r2=_aPl_[3],_aPn_=disjoint(cmp12,l1,_aPm_);
              if(_aPn_){var s1$0=r1,s2$0=r2;continue}
              return _aPn_}
            return 1}},
       compare$12=
        function(cmp,s1,s2)
         {function compare_aux(t1,t2)
           {var t1$0=t1,t2$0=t2;
            for(;;)
             {if(t1$0)
               {if(t2$0)
                 {var
                   t2$1=t2$0[3],
                   r2=t2$0[2],
                   e2=t2$0[1],
                   t1$1=t1$0[3],
                   r1=t1$0[2],
                   e1=t1$0[1],
                   c=caml_call2(cmp,e1,e2);
                  if(0 === c)
                   {var
                     t2$2=cons_iter(r2,t2$1),
                     t1$2=cons_iter(r1,t1$1),
                     t1$0=t1$2,
                     t2$0=t2$2;
                    continue}
                  return c}
                return 1}
              return t2$0?-1:0}}
          var _aPi_=0,_aPj_=cons_iter(s2,_aPi_),_aPk_=0;
          return compare_aux(cons_iter(s1,_aPk_),_aPj_)},
       equal$3=function(cmp,s1,s2){return 0 === compare$12(cmp,s1,s2)?1:0},
       subset=
        function(cmp,s1,s2)
         {var s1$0=s1,s2$0=s2;
          for(;;)
           {if(s1$0)
             {if(s2$0)
               {var
                 r2=s2$0[3],
                 v2=s2$0[2],
                 l2=s2$0[1],
                 r1=s1$0[3],
                 v1=s1$0[2],
                 l1=s1$0[1],
                 c=caml_call2(cmp,v1,v2);
                if(0 === c)
                 {var _aPd_=subset(cmp,l1,l2);
                  if(_aPd_){var s1$0=r1,s2$0=r2;continue}
                  return _aPd_}
                if(0 <= c)
                 {var _aPe_=[0,0,v1,r1,0],_aPf_=subset(cmp,_aPe_,r2);
                  if(_aPf_){var s1$0=l1;continue}
                  return _aPf_}
                var _aPg_=[0,l1,v1,0,0],_aPh_=subset(cmp,_aPg_,l2);
                if(_aPh_){var s1$0=r1;continue}
                return _aPh_}
              return 0}
            return 1}},
       add_seq=
        function(cmp,s,m)
         {return fold_left$1(function(m,e){return add$4(cmp,e,m)},m,s)},
       of_seq=function(cmp,s){return add_seq(cmp,s,empty$0)},
       seq_of_iter=
        function(m,param)
         {if(m)
           {var e=m[3],r=m[2],k=m[1],_aPb_=cons_iter(r,e);
            return [0,k,function(_aPc_){return seq_of_iter(_aPb_,_aPc_)}]}
          return 0},
       to_seq$0=
        function(m)
         {var _aO__=0,_aO$_=cons_iter(m,_aO__);
          return function(_aPa_){return seq_of_iter(_aO$_,_aPa_)}},
       rev_seq_of_iter=
        function(m,param)
         {if(m)
           {var e=m[3],r=m[2],k=m[1],_aO8_=rev_cons_iter(r,e);
            return [0,k,function(_aO9_){return rev_seq_of_iter(_aO8_,_aO9_)}]}
          return 0},
       to_rev_seq=
        function(m)
         {var _aO5_=0,_aO6_=rev_cons_iter(m,_aO5_);
          return function(_aO7_){return rev_seq_of_iter(_aO6_,_aO7_)}},
       to_seq_from=
        function(cmp,k,m)
         {var _aO2_=0,_aO3_=cons_iter_from(cmp,k,m,_aO2_);
          return function(_aO4_){return seq_of_iter(_aO3_,_aO4_)}},
       Make$6=
        function(Ord)
         {var
           include=_Y_(Ord),
           empty=include[1],
           is_empty=include[2],
           mem=include[3];
          function cardinal$0(t){return cardinal(t)}
          function is_singleton$0(t){return is_singleton(t)}
          function enum$0(t){return enum$1(t)}
          function of_enum(e){return of_enum$0(Ord[1],e)}
          function backwards$0(t){return backwards(t)}
          function remove$0(e,t){return remove(Ord[1],e,t)}
          function remove_exn$0(e,t){return remove_exn(Ord[1],e,t)}
          function update$0(e1,e2,t){return update(Ord[1],e1,e2,t)}
          function add(e,t){return add$4(Ord[1],e,t)}
          function iter(f,t){return iter$7(f,t)}
          function at_rank_exn$0(i,t){return at_rank_exn(i,t)}
          function map(f,t){return map_endo(Ord[1],f,t)}
          function fold(f,t,acc){return fold$2(f,t,acc)}
          function filter$0(f,t){return filter(f,t)}
          function filter_map(f,t){return filter_map_endo(Ord[1],f,t)}
          function find(x,t){return find$0(Ord[1],x,t)}
          function find_opt$0(x,t){return find_opt(Ord[1],x,t)}
          function find_first$0(f,t){return find_first(f,t)}
          function find_first_opt$0(f,t){return find_first_opt(f,t)}
          function find_last$0(f,t){return find_last(f,t)}
          function find_last_opt$0(f,t){return find_last_opt(f,t)}
          function exists(f,t){return exists$0(f,t)}
          function for_all(f,t){return for_all$0(f,t)}
          function partition$0(f,t)
           {var _aO1_=Ord[1],match=partition(_aO1_,f,t),r=match[2],l=match[1];
            return [0,l,r]}
          function min_elt$0(t){return min_elt(t)}
          function min_elt_opt$0(t){return min_elt_opt(t)}
          function pop_min$0(t)
           {var match=pop_min(t),others=match[2],mini=match[1];
            return [0,mini,others]}
          function pop_max$0(t)
           {var match=pop_max(t),others=match[2],maxi=match[1];
            return [0,maxi,others]}
          function max_elt$0(t){return max_elt(t)}
          function max_elt_opt$0(t){return max_elt_opt(t)}
          function choose(t){return min_elt(t)}
          function choose_opt(t){return min_elt_opt(t)}
          function any(t){return get_root(t)}
          function pop(t)
           {var match=pop$1(t),t$0=match[2],e=match[1];return [0,e,t$0]}
          function split$0(e,s)
           {var
             _aO0_=Ord[1],
             match=split(_aO0_,e,s),
             r=match[3],
             v=match[2],
             l=match[1];
            return [0,l,v,r]}
          function split_opt$0(e,s)
           {var
             _aOZ_=Ord[1],
             match=split_opt(_aOZ_,e,s),
             r=match[3],
             maybe_v=match[2],
             l=match[1];
            return [0,l,maybe_v,r]}
          function split_lt$0(e,s)
           {var _aOY_=Ord[1],match=split_lt(_aOY_,e,s),r=match[2],l=match[1];
            return [0,l,r]}
          function split_le$0(e,s)
           {var _aOX_=Ord[1],match=split_le(_aOX_,e,s),r=match[2],l=match[1];
            return [0,l,r]}
          function singleton(e){return singleton$0(e)}
          function elements$0(t){return elements(t)}
          function to_array$0(t){return to_array(t)}
          function union$0(s1,s2){return union(Ord[1],s1,s2)}
          function diff$0(s1,s2){return diff(Ord[1],s1,s2)}
          function inter$0(s1,s2){return inter(Ord[1],s1,s2)}
          function sym_diff$0(s1,s2){return sym_diff(Ord[1],s1,s2)}
          function compare(t1,t2){return compare$12(Ord[1],t1,t2)}
          function equal(t1,t2){return equal$3(Ord[1],t1,t2)}
          function subset$0(t1,t2){return subset(Ord[1],t1,t2)}
          function disjoint$0(t1,t2){return disjoint(Ord[1],t1,t2)}
          function add_seq$0(s,t){return add_seq(Ord[1],s,t)}
          function of_seq$0(s){return of_seq(Ord[1],s)}
          function to_seq(t){return to_seq$0(t)}
          function to_rev_seq$0(t){return to_rev_seq(t)}
          function to_seq_from$0(k,t){return to_seq_from(Ord[1],k,t)}
          function _aOJ_(s1,s2)
           {if(s1)
             {if(s2)
               {var
                 r1=s1[3],
                 v1=s1[2],
                 l1=s1[1],
                 _aOU_=split$0(v1,s2),
                 _aOV_=_aOU_[1];
                if(_aOU_[2])
                 {var
                   r2=_aOU_[3],
                   match=_aOJ_(l1,_aOV_),
                   match$0=_aOJ_(r1,r2),
                   _aOW_=match + 1 | 0;
                  if(! (2 < _aOW_ >>> 0))
                   {var switch$0=0;
                    switch(_aOW_)
                     {case 0:if(! (1 < match$0 + 1 >>> 0))switch$0 = 1;break;
                      case 1:
                       var switcher=match$0 + 1 | 0;
                       if(! (2 < switcher >>> 0))
                        switch(switcher)
                         {case 0:switch$0 = 1;break;
                          case 1:return 0;
                          default:switch$0 = 2}
                       break;
                      default:if(! (1 < match$0 >>> 0))switch$0 = 2}
                    switch(switch$0)
                     {case 0:break;case 1:return -1;default:return 1}}
                  return min_num}
                var r2$0=_aOU_[3];
                if(0 <= _aOJ_(l1,_aOV_) && 0 <= _aOJ_(r1,r2$0))return 1;
                return min_num}
              return 1}
            return s2?-1:0}
          function compare_subset(s1,s2){return _aOJ_(s1,s2)}
          function of_list(l){return of_list$0(Ord[1],l)}
          function of_array$0(a){return of_array(Ord[1],a)}
          function print(first,last,sep,print_elt,out,t)
           {return print$0(first,last,sep,print_elt,out,t)}
          function min_elt$1(t)
           {try
             {var _aOS_=[0,min_elt$0(t)];return _aOS_}
            catch(_aOT_)
             {_aOT_ = caml_wrap_exception(_aOT_);
              if(_aOT_ === Not_found)return 0;
              throw _aOT_}}
          function max_elt$1(t)
           {try
             {var _aOQ_=[0,max_elt$0(t)];return _aOQ_}
            catch(_aOR_)
             {_aOR_ = caml_wrap_exception(_aOR_);
              if(_aOR_ === Not_found)return 0;
              throw _aOR_}}
          function choose$0(t)
           {try
             {var _aOO_=[0,choose(t)];return _aOO_}
            catch(_aOP_)
             {_aOP_ = caml_wrap_exception(_aOP_);
              if(_aOP_ === Not_found)return 0;
              throw _aOP_}}
          function any$0(t)
           {try
             {var _aOM_=[0,any(t)];return _aOM_}
            catch(_aON_)
             {_aON_ = caml_wrap_exception(_aON_);
              if(_aON_ === Not_found)return 0;
              throw _aON_}}
          function find$1(e,t)
           {try
             {var _aOK_=[0,find(e,t)];return _aOK_}
            catch(_aOL_)
             {_aOL_ = caml_wrap_exception(_aOL_);
              if(_aOL_ === Not_found)return 0;
              throw _aOL_}}
          var Exceptionless=[0,min_elt$1,max_elt$1,choose$0,any$0,find$1];
          function iter$0(f,t){return iter(f,t)}
          function fold$0(f,t,init){return fold(f,t,init)}
          function for_all$1(f,t){return for_all(f,t)}
          function exists$1(f,t){return exists(f,t)}
          function map$0(f,t){return map(f,t)}
          function filter$1(f,t){return filter$0(f,t)}
          function filter_map$0(f,t){return filter_map(f,t)}
          function partition$1(f,t){return partition$0(f,t)}
          var
           Labels=
            [0,
             iter$0,
             fold$0,
             for_all$1,
             exists$1,
             map$0,
             filter$1,
             filter_map$0,
             partition$1];
          return [0,
                  empty,
                  is_empty,
                  mem,
                  cardinal$0,
                  is_singleton$0,
                  enum$0,
                  of_enum,
                  backwards$0,
                  remove$0,
                  remove_exn$0,
                  update$0,
                  add,
                  iter,
                  at_rank_exn$0,
                  map,
                  fold,
                  filter$0,
                  filter_map,
                  find,
                  find_opt$0,
                  find_first$0,
                  find_first_opt$0,
                  find_last$0,
                  find_last_opt$0,
                  exists,
                  for_all,
                  partition$0,
                  min_elt$0,
                  min_elt_opt$0,
                  pop_min$0,
                  pop_max$0,
                  max_elt$0,
                  max_elt_opt$0,
                  choose,
                  choose_opt,
                  any,
                  pop,
                  split$0,
                  split_opt$0,
                  split_lt$0,
                  split_le$0,
                  singleton,
                  elements$0,
                  elements$0,
                  to_array$0,
                  union$0,
                  diff$0,
                  inter$0,
                  sym_diff$0,
                  compare,
                  equal,
                  subset$0,
                  disjoint$0,
                  add_seq$0,
                  of_seq$0,
                  to_seq,
                  to_rev_seq$0,
                  to_seq_from$0,
                  compare_subset,
                  of_list,
                  of_array$0,
                  print,
                  Exceptionless,
                  Labels]};
      Make$6([0,compare$7]);
      Make$6([0,compare$9]);
      Make$6([0,compare$10]);
      Make$6([0,compare$11]);
      Make$6([0,_h$_]);
      Make$6([0,compare]);
      Make$6([0,compare$0]);
      var
       dummy$0=function(param){return [0,0,0]},
       create$7=function(x){return [0,x,0]},
       accum=function(acc,x){var cell=create$7(x);acc[2] = cell;return cell},
       is_empty$2=function(param){return param?0:1},
       nth=
        function(l,index)
         {if(index < 0)invalid_arg(at_negative_index_msg);
          function loop(n,param)
           {var n$0=n,param$0=param;
            for(;;)
             {if(param$0)
               {var t=param$0[2],h=param$0[1];
                if(0 === n$0)return h;
                var n$1=n$0 - 1 | 0,n$0=n$1,param$0=t;
                continue}
              return invalid_arg(at_after_end_msg)}}
          return loop(index,l)},
       flatten$0=
        function(l)
         {function inner(dst,param)
           {var dst$0=dst,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 t=param$0[2],
                 h=param$0[1],
                 dst$1=accum(dst$0,h),
                 dst$0=dst$1,
                 param$0=t;
                continue}
              return dst$0}}
          function outer(dst,param)
           {var dst$0=dst,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 t=param$0[2],
                 h=param$0[1],
                 dst$1=inner(dst$0,h),
                 dst$0=dst$1,
                 param$0=t;
                continue}
              return 0}}
          var _aOI_=0,r=dummy$0(_aOI_);
          outer(r,l);
          return r[2]},
       map$4=
        function(f,param)
         {if(param)
           {var
             t=param[2],
             h=param[1],
             loop=
              function(dst,param)
               {var dst$0=dst,param$0=param;
                for(;;)
                 {if(param$0)
                   {var
                     t=param$0[2],
                     h=param$0[1],
                     _aOH_=caml_call1(f,h),
                     dst$1=accum(dst$0,_aOH_),
                     dst$0=dst$1,
                     param$0=t;
                    continue}
                  return 0}},
             _aOG_=caml_call1(f,h),
             r=create$7(_aOG_);
            loop(r,t);
            return r}
          return 0},
       fold_right$1=
        function(f,l,init)
         {function tail_loop(acc,param)
           {var acc$0=acc,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 t=param$0[2],
                 h=param$0[1],
                 acc$1=caml_call2(f,h,acc$0),
                 acc$0=acc$1,
                 param$0=t;
                continue}
              return acc$0}}
          function loop(n,param)
           {if(param)
             {var t=param[2],h=param[1];
              if(n < 1000)
               {var _aOE_=n + 1 | 0;return caml_call2(f,h,loop(_aOE_,t))}
              var _aOF_=rev(t);
              return caml_call2(f,h,tail_loop(init,_aOF_))}
            return init}
          return loop(0,l)},
       iter2=
        function(f,l1,l2)
         {var l1$0=l1,l2$0=l2;
          for(;;)
           {if(l1$0)
             {if(l2$0)
               {var t2=l2$0[2],h2=l2$0[1],t1=l1$0[2],h1=l1$0[1];
                caml_call2(f,h1,h2);
                var l1$0=t1,l2$0=t2;
                continue}}
            else
             if(! l2$0)return 0;
            return invalid_arg(_i4_)}},
       fold_left2=
        function(f,accum,l1,l2)
         {var accum$0=accum,l1$0=l1,l2$0=l2;
          for(;;)
           {if(l1$0)
             {if(l2$0)
               {var
                 t2=l2$0[2],
                 h2=l2$0[1],
                 t1=l1$0[2],
                 h1=l1$0[1],
                 accum$1=caml_call3(f,accum$0,h1,h2),
                 accum$0=accum$1,
                 l1$0=t1,
                 l2$0=t2;
                continue}}
            else
             if(! l2$0)return accum$0;
            return invalid_arg(_i5_)}},
       for_all2=
        function(p,l1,l2)
         {function loop(l1,l2)
           {var l1$0=l1,l2$0=l2;
            for(;;)
             {if(l1$0)
               {if(l2$0)
                 {var t2=l2$0[2],h2=l2$0[1],t1=l1$0[2],h1=l1$0[1];
                  if(caml_call2(p,h1,h2)){var l1$0=t1,l2$0=t2;continue}
                  return 0}}
              else
               if(! l2$0)return 1;
              return invalid_arg(_i6_)}}
          return loop(l1,l2)},
       remove_at=
        function(i,lst)
         {function loop(dst,i,param)
           {var dst$0=dst,i$0=i,param$0=param;
            for(;;)
             {if(param$0)
               {var xs=param$0[2],x=param$0[1];
                if(0 === i$0){dst$0[2] = xs;return 0}
                var
                 i$1=i$0 - 1 | 0,
                 dst$1=accum(dst$0,x),
                 dst$0=dst$1,
                 i$0=i$1,
                 param$0=xs;
                continue}
              return invalid_arg(_i7_)}}
          if(0 <= i)
           {var _aOD_=0,dummy=dummy$0(_aOD_);
            loop(dummy,i,lst);
            return dummy[2]}
          return invalid_arg(_i8_)},
       find_all$0=
        function(p,l)
         {function findnext(dst,param)
           {var dst$0=dst,param$0=param;
            for(;;)
             {if(param$0)
               {var t=param$0[2],h=param$0[1];
                if(caml_call1(p,h))
                 {var dst$1=accum(dst$0,h),dst$0=dst$1,param$0=t;continue}
                var param$0=t;
                continue}
              return 0}}
          var _aOC_=0,dummy=dummy$0(_aOC_);
          findnext(dummy,l);
          return dummy[2]},
       findi=
        function(p,l)
         {function loop(n,param)
           {var n$0=n,param$0=param;
            for(;;)
             {if(param$0)
               {var t=param$0[2],h=param$0[1];
                if(caml_call2(p,n$0,h))return [0,n$0,h];
                var n$1=n$0 + 1 | 0,n$0=n$1,param$0=t;
                continue}
              throw Not_found}}
          return loop(0,l)},
       combine=
        function(l1,l2)
         {if(l1)
           {if(l2)
             {var
               ys=l2[2],
               y=l2[1],
               xs=l1[2],
               x=l1[1],
               _aOA_=[0,x,y],
               acc=create$7(_aOA_),
               loop=
                function(dst,l1,l2)
                 {var dst$0=dst,l1$0=l1,l2$0=l2;
                  for(;;)
                   {if(l1$0)
                     {if(l2$0)
                       {var
                         t2=l2$0[2],
                         h2=l2$0[1],
                         t1=l1$0[2],
                         h1=l1$0[1],
                         _aOB_=[0,h1,h2],
                         dst$1=accum(dst$0,_aOB_),
                         dst$0=dst$1,
                         l1$0=t1,
                         l2$0=t2;
                        continue}}
                    else
                     if(! l2$0)return acc;
                    return invalid_arg(_i9_)}};
              return loop(acc,xs,ys)}}
          else
           if(! l2)return 0;
          return invalid_arg(_i__)},
       init$0=
        function(size,f)
         {if(0 === size)return 0;
          if(0 <= size)
           {var
             loop=
              function(dst,n)
               {var dst$0=dst,n$0=n;
                for(;;)
                 {var _aOy_=n$0 < size?1:0;
                  if(_aOy_)
                   {var
                     n$1=n$0 + 1 | 0,
                     _aOz_=caml_call1(f,n$0),
                     dst$1=accum(dst$0,_aOz_),
                     dst$0=dst$1,
                     n$0=n$1;
                    continue}
                  return _aOy_}},
             _aOv_=0,
             _aOw_=caml_call1(f,_aOv_),
             r=create$7(_aOw_),
             _aOx_=1;
            loop(r,_aOx_);
            return r}
          return invalid_arg(_i$_)},
       mapi=
        function(f,param)
         {if(param)
           {var
             t=param[2],
             h=param[1],
             loop=
              function(dst,n,param)
               {var dst$0=dst,n$0=n,param$0=param;
                for(;;)
                 {if(param$0)
                   {var
                     t=param$0[2],
                     h=param$0[1],
                     n$1=n$0 + 1 | 0,
                     _aOu_=caml_call2(f,n$0,h),
                     dst$1=accum(dst$0,_aOu_),
                     dst$0=dst$1,
                     n$0=n$1,
                     param$0=t;
                    continue}
                  return 0}},
             _aOr_=0,
             _aOs_=caml_call2(f,_aOr_,h),
             r=create$7(_aOs_),
             _aOt_=1;
            loop(r,_aOt_,t);
            return r}
          return 0},
       split_nth=
        function(index,l)
         {if(l)
           {var t=l[2],h=l[1];
            if(0 === index)return [0,0,l];
            if(0 <= index)
             {var
               loop=
                function(n,dst,l)
                 {var n$0=n,dst$0=dst,l$0=l;
                  for(;;)
                   {if(0 === n$0)return l$0;
                    if(l$0)
                     {var
                       t=l$0[2],
                       h=l$0[1],
                       dst$1=accum(dst$0,h),
                       n$1=n$0 - 1 | 0,
                       n$0=n$1,
                       dst$0=dst$1,
                       l$0=t;
                      continue}
                    return invalid_arg(at_after_end_msg)}},
               r=create$7(h),
               _aOq_=index - 1 | 0;
              return [0,r,loop(_aOq_,r,t)]}
            return invalid_arg(at_negative_index_msg)}
          return 0 === index?_ja_:invalid_arg(at_after_end_msg)},
       remove$0=
        function(l,x)
         {function loop(dst,param)
           {var dst$0=dst,param$0=param;
            for(;;)
             {if(param$0)
               {var t=param$0[2],h=param$0[1];
                if(caml_equal(x,h)){dst$0[2] = t;return 0}
                var dst$1=accum(dst$0,h),dst$0=dst$1,param$0=t;
                continue}
              return 0}}
          var _aOp_=0,dummy=dummy$0(_aOp_);
          loop(dummy,l);
          return dummy[2]},
       remove_if=
        function(f,lst)
         {function loop(dst,param)
           {var dst$0=dst,param$0=param;
            for(;;)
             {if(param$0)
               {var l=param$0[2],x=param$0[1];
                if(caml_call1(f,x)){dst$0[2] = l;return 0}
                var dst$1=accum(dst$0,x),dst$0=dst$1,param$0=l;
                continue}
              return 0}}
          var _aOo_=0,dummy=dummy$0(_aOo_);
          loop(dummy,lst);
          return dummy[2]},
       of_enum$1=
        function(e)
         {var _aOn_=0,h=dummy$0(_aOn_);fold$1(accum,h,e);return h[2]},
       modify_opt_at=
        function(n,f,l)
         {if(n < 0)invalid_arg(at_negative_index_msg);
          function loop(acc,n,param)
           {var acc$0=acc,n$0=n,param$0=param;
            for(;;)
             {if(param$0)
               {var t=param$0[2],h=param$0[1];
                if(0 === n$0)
                 {var match=caml_call1(f,h);
                  if(match){var v=match[1];return rev_append(acc$0,[0,v,t])}
                  return rev_append(acc$0,t)}
                var
                 n$1=n$0 - 1 | 0,
                 acc$1=[0,h,acc$0],
                 acc$0=acc$1,
                 n$0=n$1,
                 param$0=t;
                continue}
              return invalid_arg(at_after_end_msg)}}
          return loop(0,n,l)},
       modify_at=
        function(n,f,l)
         {return modify_opt_at(n,function(x){return [0,caml_call1(f,x)]},l)},
       cartesian_product=
        function(l1,l2)
         {function _aOm_(i){return map$0(function(j){return [0,i,j]},l2)}
          return flatten(map$0(_aOm_,l1))},
       findi$0=
        function(p,l)
         {try
           {var _aOk_=[0,findi(p,l)];return _aOk_}
          catch(_aOl_)
           {_aOl_ = caml_wrap_exception(_aOl_);
            if(_aOl_ === Not_found)return 0;
            throw _aOl_}},
       assoc$0=
        function(e,l)
         {try
           {var _aOi_=[0,assoc(e,l)];return _aOi_}
          catch(_aOj_)
           {_aOj_ = caml_wrap_exception(_aOj_);
            if(_aOj_ === Not_found)return 0;
            throw _aOj_}},
       height$0=function(param){if(param){var h=param[5];return h}return 0},
       empty$1=0,
       create$8=
        function(l,x,d,r)
         {var
           hl=height$0(l),
           hr=height$0(r),
           _aOh_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
          return [0,l,x,d,r,_aOh_]},
       bal$0=
        function(l,x,d,r)
         {if(l)var h=l[5],hl=h;else var hl=0;
          if(r)var h$0=r[5],hr=h$0;else var hr=0;
          if((hr + 2 | 0) < hl)
           {if(l)
             {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_aOc_=height$0(lr);
              if(_aOc_ <= height$0(ll))
               return create$8(ll,lv,ld,create$8(lr,x,d,r));
              if(lr)
               {var
                 lrr=lr[4],
                 lrd=lr[3],
                 lrv=lr[2],
                 lrl=lr[1],
                 _aOd_=create$8(lrr,x,d,r);
                return create$8(create$8(ll,lv,ld,lrl),lrv,lrd,_aOd_)}
              return invalid_arg(_jb_)}
            return invalid_arg(_jc_)}
          if((hl + 2 | 0) < hr)
           {if(r)
             {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_aOe_=height$0(rl);
              if(_aOe_ <= height$0(rr))
               return create$8(create$8(l,x,d,rl),rv,rd,rr);
              if(rl)
               {var
                 rlr=rl[4],
                 rld=rl[3],
                 rlv=rl[2],
                 rll=rl[1],
                 _aOf_=create$8(rlr,rv,rd,rr);
                return create$8(create$8(l,x,d,rll),rlv,rld,_aOf_)}
              return invalid_arg(_jd_)}
            return invalid_arg(_je_)}
          var _aOg_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
          return [0,l,x,d,r,_aOg_]},
       min_binding=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var _aOb_=param$0[1];
              if(_aOb_){var param$0=_aOb_;continue}
              var v=param$0[3],k=param$0[2];
              return [0,k,v]}
            throw Not_found}},
       min_binding_opt=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var _aOa_=param$0[1];
              if(_aOa_){var param$0=_aOa_;continue}
              var v=param$0[3],k=param$0[2];
              return [0,[0,k,v]]}
            return 0}},
       get_root$0=
        function(param)
         {if(param){var v=param[3],k=param[2];return [0,k,v]}throw Not_found},
       pop_min_binding=
        function(s)
         {var mini=[0,get_root$0(s)];
          function loop(param)
           {if(param)
             {var _aN$_=param[1];
              if(_aN$_)
               {var r=param[4],v=param[3],k=param[2];
                return bal$0(loop(_aN$_),k,v,r)}
              var r$0=param[4],v$0=param[3],k$0=param[2];
              mini[1] = [0,k$0,v$0];
              return r$0}
            throw [0,Assert_failure,_jf_]}
          var others=loop(s);
          return [0,mini[1],others]},
       max_binding=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
              var v=param$0[3],k=param$0[2];
              return [0,k,v]}
            throw Not_found}},
       max_binding_opt=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
              var v=param$0[3],k=param$0[2];
              return [0,[0,k,v]]}
            return 0}},
       pop_max_binding=
        function(s)
         {var maxi=[0,get_root$0(s)];
          function loop(param)
           {if(param)
             {var _aN__=param[1];
              if(param[4])
               {var r=param[4],v=param[3],k=param[2];
                return bal$0(_aN__,k,v,loop(r))}
              var v$0=param[3],k$0=param[2];
              maxi[1] = [0,k$0,v$0];
              return _aN__}
            throw [0,Assert_failure,_jg_]}
          var others=loop(s);
          return [0,maxi[1],others]},
       remove_min_binding=
        function(param)
         {if(param)
           {var _aN9_=param[1];
            if(_aN9_)
             {var r=param[4],v=param[3],k=param[2];
              return bal$0(remove_min_binding(_aN9_),k,v,r)}
            var r$0=param[4];
            return r$0}
          throw Not_found},
       _jh_=
        function(t1,t2)
         {if(t1)
           {if(t2)
             {var match=min_binding(t2),v=match[2],k=match[1];
              return bal$0(t1,k,v,remove_min_binding(t2))}
            return t1}
          return t2},
       add$5=
        function(x,d,cmp,map)
         {function loop(node)
           {if(node)
             {var
               h=node[5],
               r=node[4],
               v=node[3],
               k=node[2],
               l=node[1],
               c=caml_call2(cmp,x,k);
              if(0 === c)return d === v?node:[0,l,x,d,r,h];
              if(0 <= c){var nr=loop(r);return nr === r?node:bal$0(l,k,v,nr)}
              var nl=loop(l);
              return nl === l?node:bal$0(nl,k,v,r)}
            return [0,0,x,d,0,1]}
          return loop(map)},
       find$1=
        function(x,cmp,map)
         {function loop(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var
                 r=param$0[4],
                 v=param$0[3],
                 k=param$0[2],
                 l=param$0[1],
                 c=caml_call2(cmp,x,k);
                if(0 <= c){if(0 < c){var param$0=r;continue}return v}
                var param$0=l;
                continue}
              throw Not_found}}
          return loop(map)},
       find_first_helper_found$0=
        function(k0,v0,f,param)
         {var k0$0=k0,v0$0=v0,param$0=param;
          for(;;)
           {if(param$0)
             {var r=param$0[4],v=param$0[3],k=param$0[2],l=param$0[1];
              if(caml_call1(f,k)){var k0$0=k,v0$0=v,param$0=l;continue}
              var param$0=r;
              continue}
            return [0,k0$0,v0$0]}},
       find_first$0=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[4],v=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))return find_first_helper_found$0(k,v,f,l);
              var m$0=r;
              continue}
            throw Not_found}},
       find_first_opt$0=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[4],v=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))
               return [0,find_first_helper_found$0(k,v,f,l)];
              var m$0=r;
              continue}
            return 0}},
       find_last_helper_found$0=
        function(k0,v0,f,param)
         {var k0$0=k0,v0$0=v0,param$0=param;
          for(;;)
           {if(param$0)
             {var r=param$0[4],v=param$0[3],k=param$0[2],l=param$0[1];
              if(caml_call1(f,k)){var k0$0=k,v0$0=v,param$0=r;continue}
              var param$0=l;
              continue}
            return [0,k0$0,v0$0]}},
       find_last$0=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[4],v=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))return find_last_helper_found$0(k,v,f,r);
              var m$0=l;
              continue}
            throw Not_found}},
       find_last_opt$0=
        function(f,m)
         {var m$0=m;
          for(;;)
           {if(m$0)
             {var r=m$0[4],v=m$0[3],k=m$0[2],l=m$0[1];
              if(caml_call1(f,k))return [0,find_last_helper_found$0(k,v,f,r)];
              var m$0=l;
              continue}
            return 0}},
       find_option=
        function(x,cmp,map)
         {try
           {var _aN7_=[0,find$1(x,cmp,map)];return _aN7_}
          catch(_aN8_)
           {_aN8_ = caml_wrap_exception(_aN8_);
            if(_aN8_ === Not_found)return 0;
            throw _aN8_}},
       find_default=
        function(def,x,cmp,map)
         {try
           {var _aN5_=find$1(x,cmp,map);return _aN5_}
          catch(_aN6_)
           {_aN6_ = caml_wrap_exception(_aN6_);
            if(_aN6_ === Not_found)return def;
            throw _aN6_}},
       remove$1=
        function(x,cmp,map)
         {function loop(node)
           {if(node)
             {var
               r=node[4],
               v=node[3],
               k=node[2],
               l=node[1],
               c=caml_call2(cmp,x,k);
              if(0 === c)return _jh_(l,r);
              if(0 <= c){var nr=loop(r);return nr === r?node:bal$0(l,k,v,nr)}
              var nl=loop(l);
              return nl === l?node:bal$0(nl,k,v,r)}
            return 0}
          return loop(map)},
       remove_exn$0=
        function(x,cmp,map)
         {function loop(param)
           {if(param)
             {var
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               c=caml_call2(cmp,x,k);
              return 0 === c
                      ?_jh_(l,r)
                      :0 <= c?bal$0(l,k,v,loop(r)):bal$0(loop(l),k,v,r)}
            throw Not_found}
          return loop(map)},
       update$0=
        function(k1,k2,v2,cmp,map)
         {if(0 === caml_call2(cmp,k1,k2))
           {var
             loop=
              function(node)
               {if(node)
                 {var
                   h=node[5],
                   r=node[4],
                   v=node[3],
                   k=node[2],
                   l=node[1],
                   c=caml_call2(cmp,k1,k);
                  if(0 === c)
                   {if(v === v2 && k === k2)return node;return [0,l,k2,v2,r,h]}
                  if(0 <= c)
                   {var nr=loop(r);return nr === r?node:[0,l,k,v,nr,h]}
                  var nl=loop(l);
                  return nl === l?node:[0,nl,k,v,r,h]}
                throw Not_found};
            return loop(map)}
          return add$5(k2,v2,cmp,remove_exn$0(k1,cmp,map))},
       update_stdlib=
        function(x,f,cmp,m)
         {if(m)
           {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(cmp,x,v);
            if(0 === c)
             {var _aN3_=[0,d],match=caml_call1(f,_aN3_);
              if(match)
               {var data=match[1];return d === data?m:[0,l,x,data,r,h]}
              return _jh_(l,r)}
            if(0 <= c)
             {var rr=update_stdlib(x,f,cmp,r);
              return r === rr?m:bal$0(l,v,d,rr)}
            var ll=update_stdlib(x,f,cmp,l);
            return l === ll?m:bal$0(ll,v,d,r)}
          var _aN4_=0,match$0=caml_call1(f,_aN4_);
          if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
          return 0},
       mem$0=
        function(x,cmp,map)
         {function loop(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var
                 r=param$0[4],
                 k=param$0[2],
                 l=param$0[1],
                 c=caml_call2(cmp,x,k),
                 _aN2_=0 === c?1:0;
                if(_aN2_)return _aN2_;
                var param$1=0 <= c?r:l,param$0=param$1;
                continue}
              return 0}}
          return loop(map)},
       map$5=
        function(f,map)
         {function loop(param)
           {if(param)
             {var
               h=param[5],
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               l$0=loop(l),
               v$0=caml_call1(f,v),
               r$0=loop(r);
              return [0,l$0,k,v$0,r$0,h]}
            return 0}
          return loop(map)},
       mapi$0=
        function(f,map)
         {function loop(param)
           {if(param)
             {var
               h=param[5],
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               l$0=loop(l),
               v$0=caml_call2(f,k,v),
               r$0=loop(r);
              return [0,l$0,k,v$0,r$0,h]}
            return 0}
          return loop(map)},
       foldi=
        function(f,map,acc)
         {function loop(acc,param)
           {var acc$0=acc,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 r=param$0[4],
                 v=param$0[3],
                 k=param$0[2],
                 l=param$0[1],
                 _aN1_=loop(acc$0,l),
                 acc$1=caml_call3(f,k,v,_aN1_),
                 acc$0=acc$1,
                 param$0=r;
                continue}
              return acc$0}}
          return loop(acc,map)},
       singleton$1=function(x,d){return [0,0,x,d,0,1]},
       add_min_binding=
        function(k,v,param)
         {if(param)
           {var r=param[4],d=param[3],x=param[2],l=param[1];
            return bal$0(add_min_binding(k,v,l),x,d,r)}
          return singleton$1(k,v)},
       add_max_binding=
        function(k,v,param)
         {if(param)
           {var r=param[4],d=param[3],x=param[2],l=param[1];
            return bal$0(l,x,d,add_max_binding(k,v,r))}
          return singleton$1(k,v)},
       join$1=
        function(l,v,d,r)
         {if(l)
           {if(r)
             {var
               rh=r[5],
               rr=r[4],
               rd=r[3],
               rv=r[2],
               rl=r[1],
               lh=l[5],
               lr=l[4],
               ld=l[3],
               lv=l[2],
               ll=l[1];
              return (rh + 2 | 0) < lh
                      ?bal$0(ll,lv,ld,join$1(lr,v,d,r))
                      :(lh + 2 | 0) < rh
                        ?bal$0(join$1(l,v,d,rl),rv,rd,rr)
                        :create$8(l,v,d,r)}
            return add_max_binding(v,d,l)}
          return add_min_binding(v,d,r)},
       split$0=
        function(key,cmp,param)
         {if(param)
           {var
             r=param[4],
             d=param[3],
             x=param[2],
             l=param[1],
             c=caml_call2(cmp,key,x);
            if(0 === c)return [0,l,[0,d],r];
            if(0 <= c)
             {var
               match=split$0(key,cmp,r),
               rr=match[3],
               pres=match[2],
               lr=match[1];
              return [0,join$1(l,x,d,lr),pres,rr]}
            var
             match$0=split$0(key,cmp,l),
             rl=match$0[3],
             pres$0=match$0[2],
             ll=match$0[1];
            return [0,ll,pres$0,join$1(rl,x,d,r)]}
          return _ji_},
       cardinal$0=
        function(map)
         {function loop(acc,param)
           {var acc$0=acc,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 r=param$0[4],
                 l=param$0[1],
                 _aN0_=acc$0 + 1 | 0,
                 acc$1=loop(_aN0_,r),
                 acc$0=acc$1,
                 param$0=l;
                continue}
              return acc$0}}
          return loop(0,map)},
       bindings_aux=
        function(accu,param)
         {var accu$0=accu,param$0=param;
          for(;;)
           {if(param$0)
             {var
               r=param$0[4],
               d=param$0[3],
               v=param$0[2],
               l=param$0[1],
               accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
               accu$0=accu$1,
               param$0=l;
              continue}
            return accu$0}},
       bindings=function(s){return bindings_aux(0,s)},
       cons_iter$0=
        function(s,t)
         {var s$0=s,t$0=t;
          for(;;)
           {if(s$0)
             {var
               r=s$0[4],
               v=s$0[3],
               k=s$0[2],
               s$1=s$0[1],
               t$1=[0,k,v,r,t$0],
               s$0=s$1,
               t$0=t$1;
              continue}
            return t$0}},
       rev_cons_iter$0=
        function(s,t)
         {var s$0=s,t$0=t;
          for(;;)
           {if(s$0)
             {var
               s$1=s$0[4],
               v=s$0[3],
               k=s$0[2],
               l=s$0[1],
               t$1=[0,k,v,l,t$0],
               s$0=s$1,
               t$0=t$1;
              continue}
            return t$0}},
       cons_iter_from$0=
        function(cmp,k2,m,e)
         {var m$0=m,e$0=e;
          for(;;)
           {if(m$0)
             {var r=m$0[4],v=m$0[3],k=m$0[2],l=m$0[1];
              if(0 < caml_call2(cmp,k2,k)){var m$0=r;continue}
              var e$1=[0,k,v,r,e$0],m$0=l,e$0=e$1;
              continue}
            return e$0}},
       enum_next$0=
        function(l,param)
         {var _aNZ_=l[1];
          if(_aNZ_)
           {var t=_aNZ_[4],m=_aNZ_[3],v=_aNZ_[2],k=_aNZ_[1];
            l[1] = cons_iter$0(m,t);
            return [0,k,v]}
          throw No_more_elements},
       enum_backwards_next$0=
        function(l,param)
         {var _aNY_=l[1];
          if(_aNY_)
           {var t=_aNY_[4],m=_aNY_[3],v=_aNY_[2],k=_aNY_[1];
            l[1] = rev_cons_iter$0(m,t);
            return [0,k,v]}
          throw No_more_elements},
       enum_count$0=
        function(l,param)
         {function aux(n,param)
           {var n$0=n,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 t=param$0[4],
                 m=param$0[3],
                 n$1=(n$0 + 1 | 0) + cardinal$0(m) | 0,
                 n$0=n$1,
                 param$0=t;
                continue}
              return n$0}}
          return aux(0,l[1])},
       enum$2=
        function(t)
         {function make(l)
           {var l$0=[0,l];
            function clone(param){return make(l$0[1])}
            function _aNV_(_aNX_){return enum_count$0(l$0,_aNX_)}
            return make$3
                    (function(_aNW_){return enum_next$0(l$0,_aNW_)},_aNV_,clone)}
          var _aNU_=0;
          return make(cons_iter$0(t,_aNU_))},
       backwards$0=
        function(t)
         {function make(l)
           {var l$0=[0,l];
            function clone(param){return make(l$0[1])}
            function _aNR_(_aNT_){return enum_count$0(l$0,_aNT_)}
            return make$3
                    (function(_aNS_){return enum_backwards_next$0(l$0,_aNS_)},
                     _aNR_,
                     clone)}
          var _aNQ_=0;
          return make(rev_cons_iter$0(t,_aNQ_))},
       keys=
        function(t)
         {var _aNO_=enum$2(t);
          return symbol(function(_aNP_){return _aNP_[1]},_aNO_)},
       values=
        function(t)
         {var _aNM_=enum$2(t);
          return symbol(function(_aNN_){return _aNN_[2]},_aNM_)},
       of_enum$2=
        function(cmp,e)
         {return fold$1
                  (function(m,param)
                    {var v=param[2],k=param[1];return add$5(k,v,cmp,m)},
                   empty$1,
                   e)},
       print$1=
        function(opt,_aNK_,_aNJ_,_aNI_,print_k,print_v,out,t)
         {if(opt)var sth=opt[1],first=sth;else var first=_jn_;
          if(_aNK_)var sth$0=_aNK_[1],last=sth$0;else var last=_jm_;
          if(_aNJ_)var sth$1=_aNJ_[1],sep=sth$1;else var sep=_jl_;
          if(_aNI_)var sth$2=_aNI_[1],kvsep=sth$2;else var kvsep=_jk_;
          var _aNL_=enum$2(t);
          return print
                  ([0,first],
                   [0,last],
                   [0,sep],
                   function(out,param)
                    {var v=param[2],k=param[1];
                     return caml_call5
                             (fprintf$0(out,_jj_),print_k,k,kvsep,print_v,v)},
                   out,
                   _aNL_)},
       filterv=
        function(f,t,cmp)
         {return foldi
                  (function(k,a,acc)
                    {return caml_call1(f,a)?acc:remove$1(k,cmp,acc)},
                   t,
                   t)},
       filter$0=
        function(f,t,cmp)
         {return foldi
                  (function(k,a,acc)
                    {return caml_call2(f,k,a)?acc:remove$1(k,cmp,acc)},
                   t,
                   t)},
       filter_map=
        function(f,t,cmp)
         {return foldi
                  (function(k,a,acc)
                    {var match=caml_call2(f,k,a);
                     if(match){var v=match[1];return add$5(k,v,cmp,acc)}
                     return acc},
                   t,
                   empty$1)},
       for_all$1=
        function(f,map)
         {function loop(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var
                 r=param$0[4],
                 v=param$0[3],
                 k=param$0[2],
                 l=param$0[1],
                 _aNF_=caml_call2(f,k,v);
                if(_aNF_)
                 {var _aNG_=loop(l);
                  if(_aNG_){var param$0=r;continue}
                  var _aNH_=_aNG_}
                else
                 var _aNH_=_aNF_;
                return _aNH_}
              return 1}}
          return loop(map)},
       exists$1=
        function(f,map)
         {function loop(param)
           {var param$0=param;
            for(;;)
             {if(param$0)
               {var
                 r=param$0[4],
                 v=param$0[3],
                 k=param$0[2],
                 l=param$0[1],
                 _aNC_=caml_call2(f,k,v);
                if(_aNC_)
                 var _aND_=_aNC_;
                else
                 {var _aNE_=loop(l);
                  if(! _aNE_){var param$0=r;continue}
                  var _aND_=_aNE_}
                return _aND_}
              return 0}}
          return loop(map)},
       partition$0=
        function(f,cmp,map)
         {function loop(m1,m2,param)
           {if(param)
             {var
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               match=loop(m1,m2,l),
               m2$0=match[2],
               m1$0=match[1],
               match$0=loop(m1$0,m2$0,r),
               m2$1=match$0[2],
               m1$1=match$0[1];
              return caml_call2(f,k,v)
                      ?[0,add$5(k,v,cmp,m1$1),m2$1]
                      :[0,m1$1,add$5(k,v,cmp,m2$1)]}
            return [0,m1,m2]}
          return loop(empty$1,empty$1,map)},
       choose_opt=
        function(m)
         {try
           {var _aNA_=[0,min_binding(m)];return _aNA_}
          catch(_aNB_)
           {_aNB_ = caml_wrap_exception(_aNB_);
            if(_aNB_ === Not_found)return 0;
            throw _aNB_}},
       any=
        function(param)
         {if(param){var v=param[3],k=param[2];return [0,k,v]}throw Not_found},
       modify=
        function(x,f,cmp,map)
         {function loop(param)
           {if(param)
             {var
               h=param[5],
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               c=caml_call2(cmp,x,k);
              if(0 === c)return [0,l,x,caml_call1(f,v),r,h];
              if(0 <= c){var nr=loop(r);return bal$0(l,k,v,nr)}
              var nl=loop(l);
              return bal$0(nl,k,v,r)}
            throw Not_found}
          return loop(map)},
       modify_def=
        function(v0,x,f,cmp,map)
         {function loop(param)
           {if(param)
             {var
               h=param[5],
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               c=caml_call2(cmp,x,k);
              if(0 === c)return [0,l,x,caml_call1(f,v),r,h];
              if(0 <= c){var nr=loop(r);return bal$0(l,k,v,nr)}
              var nl=loop(l);
              return bal$0(nl,k,v,r)}
            var _aNy_=1,_aNz_=0;
            return [0,0,x,caml_call1(f,v0),_aNz_,_aNy_]}
          return loop(map)},
       modify_opt=
        function(x,f,cmp,map)
         {function loop(param)
           {if(param)
             {var
               h=param[5],
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               c=caml_call2(cmp,x,k);
              if(0 === c)
               {var _aNw_=[0,v],match=caml_call1(f,_aNw_);
                if(match){var v$0=match[1];return [0,l,x,v$0,r,h]}
                return _jh_(l,r)}
              if(0 <= c){var nr=loop(r);return bal$0(l,k,v,nr)}
              var nl=loop(l);
              return bal$0(nl,k,v,r)}
            var _aNx_=0,match$0=caml_call1(f,_aNx_);
            if(match$0){var d=match$0[1];return [0,0,x,d,0,1]}
            throw Exit}
          try
           {var _aNu_=loop(map);return _aNu_}
          catch(_aNv_)
           {_aNv_ = caml_wrap_exception(_aNv_);
            if(_aNv_ === Exit)return map;
            throw _aNv_}},
       extract=
        function(x,cmp,map)
         {function loop(param)
           {if(param)
             {var
               r=param[4],
               v=param[3],
               k=param[2],
               l=param[1],
               c=caml_call2(cmp,x,k);
              if(0 === c)return [0,v,_jh_(l,r)];
              if(0 <= c)
               {var match=loop(r),nr=match[2],vout=match[1];
                return [0,vout,bal$0(l,k,v,nr)]}
              var match$0=loop(l),nl=match$0[2],vout$0=match$0[1];
              return [0,vout$0,bal$0(nl,k,v,r)]}
            throw Not_found}
          return loop(map)},
       pop$2=
        function(map)
         {if(map)
           {var r=map[4],v=map[3],k=map[2],l=map[1];
            return [0,[0,k,v],_jh_(l,r)]}
          throw Not_found},
       concat$0=
        function(t1,t2)
         {if(t1)
           {if(t2)
             {var match=min_binding(t2),d=match[2],x=match[1];
              return join$1(t1,x,d,remove_min_binding(t2))}
            return t1}
          return t2},
       concat_or_join=
        function(t1,v,d,t2)
         {if(d){var d$0=d[1];return join$1(t1,v,d$0,t2)}
          return concat$0(t1,t2)},
       merge$0=
        function(f,cmp12,s1,s2)
         {function loop(s1,s2)
           {if(s1)
             {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
              if(height$0(s2) <= h1)
               {var
                 match=split$0(v1,cmp12,s2),
                 r2=match[3],
                 d2=match[2],
                 l2=match[1],
                 _aNo_=loop(r1,r2),
                 _aNp_=[0,d1],
                 _aNq_=caml_call3(f,v1,_aNp_,d2);
                return concat_or_join(loop(l1,l2),v1,_aNq_,_aNo_)}}
            else
             if(! s2)return 0;
            if(s2)
             {var
               r2$0=s2[4],
               d2$0=s2[3],
               v2=s2[2],
               l2$0=s2[1],
               match$0=split$0(v2,cmp12,s1),
               r1$0=match$0[3],
               d1$0=match$0[2],
               l1$0=match$0[1],
               _aNr_=loop(r1$0,r2$0),
               _aNs_=[0,d2$0],
               _aNt_=caml_call3(f,v2,d1$0,_aNs_);
              return concat_or_join(loop(l1$0,l2$0),v2,_aNt_,_aNr_)}
            throw [0,Assert_failure,_jo_]}
          return loop(s1,s2)},
       merge_diverse=
        function(f,cmp1,s1,cmp2,s2)
         {function _aNj_(k,v1,acc)
           {var
             _aNm_=find_option(k,cmp2,s2),
             _aNn_=[0,v1],
             match=caml_call3(f,k,_aNn_,_aNm_);
            if(match){var v3=match[1];return add$5(k,v3,cmp1,acc)}
            return acc}
          var first_phase_result=foldi(_aNj_,s1,empty$1);
          return foldi
                  (function(k,v2,acc)
                    {if(mem$0(k,cmp1,s1))return acc;
                     var _aNk_=[0,v2],_aNl_=0,match=caml_call3(f,k,_aNl_,_aNk_);
                     if(match){var v3=match[1];return add$5(k,v3,cmp1,acc)}
                     return acc},
                   s2,
                   first_phase_result)},
       ordered=
        function(cmp,s)
         {if(0 === s)return 1;
          try
           {var
             _aNe_=min_binding(s)[1],
             _aNf_=remove_min_binding(s),
             _aNg_=
              function(k,param,last_k)
               {if(0 <= caml_call2(cmp,last_k,k))throw Exit;return k};
            foldi(_aNg_,_aNf_,_aNe_);
            var _aNh_=1;
            return _aNh_}
          catch(_aNi_)
           {_aNi_ = caml_wrap_exception(_aNi_);
            if(_aNi_ === Exit)return 0;
            throw _aNi_}},
       compatible_cmp=
        function(cmp1,m1,cmp2,m2)
         {var _aNd_=cmp1 === cmp2?1:0;return _aNd_?_aNd_:ordered(cmp1,m2)},
       heuristic_merge=
        function(f,cmp1,m1,cmp2,m2)
         {return compatible_cmp(cmp1,m1,cmp2,m2)
                  ?merge$0(f,cmp1,m1,m2)
                  :merge_diverse(f,cmp1,m1,cmp2,m2)},
       add_seq$0=
        function(cmp,s,m)
         {return fold_left$1
                  (function(m,param)
                    {var v=param[2],k=param[1];return add$5(k,v,cmp,m)},
                   m,
                   s)},
       of_seq$0=function(cmp,s){return add_seq$0(cmp,s,empty$1)},
       seq_of_iter$0=
        function(m,param)
         {if(m)
           {var e=m[4],r=m[3],v=m[2],k=m[1],_aNb_=cons_iter$0(r,e);
            return [0,
                    [0,k,v],
                    function(_aNc_){return seq_of_iter$0(_aNb_,_aNc_)}]}
          return 0},
       to_seq$1=
        function(m)
         {var _aM__=0,_aM$_=cons_iter$0(m,_aM__);
          return function(_aNa_){return seq_of_iter$0(_aM$_,_aNa_)}},
       rev_seq_of_iter$0=
        function(m,param)
         {if(m)
           {var e=m[4],r=m[3],v=m[2],k=m[1],_aM8_=rev_cons_iter$0(r,e);
            return [0,
                    [0,k,v],
                    function(_aM9_){return rev_seq_of_iter$0(_aM8_,_aM9_)}]}
          return 0},
       to_rev_seq$0=
        function(m)
         {var _aM5_=0,_aM6_=rev_cons_iter$0(m,_aM5_);
          return function(_aM7_){return rev_seq_of_iter$0(_aM6_,_aM7_)}},
       to_seq_from$0=
        function(cmp,k,m)
         {var _aM2_=0,_aM3_=cons_iter_from$0(cmp,k,m,_aM2_);
          return function(_aM4_){return seq_of_iter$0(_aM3_,_aM4_)}},
       union_stdlib=
        function(f,cmp1,m1,cmp2,m2)
         {function fwrap(a,b1,b2)
           {if(b1 && b2)
             {var b2$0=b2[1],b1$0=b1[1];return caml_call3(f,a,b1$0,b2$0)}
            var x=b2 || b1;
            return x}
          return heuristic_merge(fwrap,cmp1,m1,cmp2,m2)},
       Make$7=
        function(Ord)
         {var
           include=_af_(Ord),
           empty=include[1],
           is_empty=include[2],
           mem=include[3],
           add=include[4],
           remove=include[7],
           compare=include[10],
           equal=include[11],
           iter=include[12],
           fold=include[13],
           find=include[28];
          function cardinal(t){return cardinal$0(t)}
          function enum$0(t){return enum$2(t)}
          function backwards(t){return backwards$0(t)}
          function keys$0(t){return keys(t)}
          function values$0(t){return values(t)}
          function update(k1,k2,v2,t){return update$0(k1,k2,v2,Ord[1],t)}
          function update_stdlib$0(k,f,m){return update_stdlib(k,f,Ord[1],m)}
          function find_default$0(d,k,t){return find_default(d,k,Ord[1],t)}
          function find_opt(k,t){return find_option(k,Ord[1],t)}
          function find_first(f,t){return find_first$0(f,t)}
          function find_first_opt(f,t){return find_first_opt$0(f,t)}
          function find_last(f,t){return find_last$0(f,t)}
          function find_last_opt(f,t){return find_last_opt$0(f,t)}
          function of_enum(e){return of_enum$2(Ord[1],e)}
          function mapi(f,t){return mapi$0(f,t)}
          function map(f,t){return map$5(f,t)}
          function print(first,last,sep,kvsep,print_k,print_v,out,t)
           {return print$1(first,last,sep,kvsep,print_k,print_v,out,t)}
          function filterv$0(f,t){return filterv(f,t,Ord[1])}
          function filter(f,t){return filter$0(f,t,Ord[1])}
          function filter_map$0(f,t){return filter_map(f,t,Ord[1])}
          function exists(f,t){return exists$1(f,t)}
          function for_all(f,t){return for_all$1(f,t)}
          function min_binding$0(t){return min_binding(t)}
          function pop_min_binding$0(t)
           {var match=pop_min_binding(t),rest=match[2],mini=match[1];
            return [0,mini,rest]}
          function max_binding$0(t){return max_binding(t)}
          function pop_max_binding$0(t)
           {var match=pop_max_binding(t),rest=match[2],maxi=match[1];
            return [0,maxi,rest]}
          function max_binding_opt$0(t){return max_binding_opt(t)}
          function min_binding_opt$0(t){return min_binding_opt(t)}
          function choose(t){return min_binding(t)}
          function choose_opt$0(t){return choose_opt(t)}
          function any$0(t){return any(t)}
          function split(k,t)
           {var
             _aM1_=Ord[1],
             match=split$0(k,_aM1_,t),
             r=match[3],
             v=match[2],
             l=match[1];
            return [0,l,v,r]}
          function partition(p,t)
           {var
             _aM0_=Ord[1],
             match=partition$0(p,_aM0_,t),
             r=match[2],
             l=match[1];
            return [0,l,r]}
          function remove_exn(x,m){return remove_exn$0(x,Ord[1],m)}
          function modify$0(x,f,m){return modify(x,f,Ord[1],m)}
          function modify_def$0(v0,x,f,m){return modify_def(v0,x,f,Ord[1],m)}
          function modify_opt$0(x,f,m){return modify_opt(x,f,Ord[1],m)}
          function extract$0(k,t)
           {var _aMZ_=Ord[1],match=extract(k,_aMZ_,t),t$0=match[2],v=match[1];
            return [0,v,t$0]}
          function pop(t)
           {var match=pop$2(t),t$0=match[2],kv=match[1];return [0,kv,t$0]}
          function singleton(k,v){return singleton$1(k,v)}
          function bindings$0(t){return bindings(t)}
          function union(f,m1,m2){return union_stdlib(f,Ord[1],m1,Ord[1],m2)}
          function merge(f,t1,t2){return merge$0(f,Ord[1],t1,t2)}
          function of_seq(s){return of_seq$0(Ord[1],s)}
          function add_seq(s,m){return add_seq$0(Ord[1],s,m)}
          function to_seq(m){return to_seq$1(m)}
          function to_rev_seq(m){return to_rev_seq$0(m)}
          function to_seq_from(k,m){return to_seq_from$0(Ord[1],k,m)}
          function find$0(k,t)
           {try
             {var _aMX_=[0,caml_call2(find,k,t)];return _aMX_}
            catch(_aMY_)
             {_aMY_ = caml_wrap_exception(_aMY_);
              if(_aMY_ === Not_found)return 0;
              throw _aMY_}}
          function choose$0(t)
           {try
             {var _aMV_=[0,choose(t)];return _aMV_}
            catch(_aMW_)
             {_aMW_ = caml_wrap_exception(_aMW_);
              if(_aMW_ === Not_found)return 0;
              throw _aMW_}}
          function any$1(t)
           {try
             {var _aMT_=[0,any$0(t)];return _aMT_}
            catch(_aMU_)
             {_aMU_ = caml_wrap_exception(_aMU_);
              if(_aMU_ === Not_found)return 0;
              throw _aMU_}}
          var Exceptionless=[0,find$0,choose$0,any$1];
          function symbol(map,key){return caml_call2(find,key,map)}
          function symbol$0(map,param)
           {var value=param[2],key=param[1];
            return caml_call3(add,key,value,map)}
          var Infix=[0,symbol,symbol$0];
          function add$0(key,data,t){return caml_call3(add,key,data,t)}
          function iter$0(f,t)
           {return caml_call2
                    (iter,function(key,data){return caml_call2(f,key,data)},t)}
          function map$0(f,t){return map(f,t)}
          function mapi$1(f,t)
           {return mapi(function(key,data){return caml_call2(f,key,data)},t)}
          function fold$0(f,t,init)
           {return caml_call3
                    (fold,
                     function(key,data,acc){return caml_call3(f,key,data,acc)},
                     t,
                     init)}
          function compare$0(cmp,a,b){return caml_call3(compare,cmp,a,b)}
          function equal$0(cmp,a,b){return caml_call3(equal,cmp,a,b)}
          function filterv$1(f)
           {return function(_aMS_){return filterv$0(f,_aMS_)}}
          function filter$1(f){return function(_aMR_){return filter(f,_aMR_)}}
          var
           Labels=
            [0,
             add$0,
             iter$0,
             map$0,
             mapi$1,
             fold$0,
             compare$0,
             equal$0,
             filterv$1,
             filter$1];
          return [0,
                  empty,
                  is_empty,
                  mem,
                  add,
                  remove,
                  compare,
                  equal,
                  iter,
                  fold,
                  find,
                  cardinal,
                  enum$0,
                  backwards,
                  keys$0,
                  values$0,
                  update,
                  update_stdlib$0,
                  find_default$0,
                  find_opt,
                  find_first,
                  find_first_opt,
                  find_last,
                  find_last_opt,
                  of_enum,
                  mapi,
                  map,
                  print,
                  filterv$0,
                  filter,
                  filter_map$0,
                  exists,
                  for_all,
                  min_binding$0,
                  pop_min_binding$0,
                  max_binding$0,
                  pop_max_binding$0,
                  max_binding_opt$0,
                  min_binding_opt$0,
                  choose,
                  choose_opt$0,
                  any$0,
                  split,
                  partition,
                  remove_exn,
                  modify$0,
                  modify_def$0,
                  modify_opt$0,
                  extract$0,
                  pop,
                  singleton,
                  bindings$0,
                  union,
                  merge,
                  of_seq,
                  add_seq,
                  to_seq,
                  to_rev_seq,
                  to_seq_from,
                  Exceptionless,
                  Infix,
                  Labels]};
      Make$7([0,compare$7]);
      Make$7([0,compare$9]);
      Make$7([0,compare$10]);
      Make$7([0,compare$11]);
      Make$7([0,_h$_]);
      Make$7([0,compare]);
      Make$7([0,compare$0]);
      var
       add$6=
        function(x,d,m)
         {return add$5
                  (x,
                   d,
                   function(_aMQ_,_aMP_){return caml_compare(_aMQ_,_aMP_)},
                   m)},
       find$2=
        function(x,m)
         {return find$1
                  (x,
                   function(_aMO_,_aMN_){return caml_compare(_aMO_,_aMN_)},
                   m)},
       find_opt$0=
        function(x,m)
         {return find_option
                  (x,
                   function(_aMM_,_aML_){return caml_compare(_aMM_,_aML_)},
                   m)},
       find_default$0=
        function(def,x,m)
         {return find_default
                  (def,
                   x,
                   function(_aMK_,_aMJ_){return caml_compare(_aMK_,_aMJ_)},
                   m)},
       remove$2=
        function(x,m)
         {return remove$1
                  (x,
                   function(_aMI_,_aMH_){return caml_compare(_aMI_,_aMH_)},
                   m)},
       mem$1=
        function(x,m)
         {return mem$0
                  (x,
                   function(_aMG_,_aMF_){return caml_compare(_aMG_,_aMF_)},
                   m)},
       keys$0=
        function(t)
         {var _aMD_=enum$2(t);
          return symbol(function(_aME_){return _aME_[1]},_aMD_)},
       singleton$2=function(k,v){return singleton$1(k,v)},
       modify$0=
        function(x,f,m)
         {return modify
                  (x,
                   f,
                   function(_aMC_,_aMB_){return caml_compare(_aMC_,_aMB_)},
                   m)},
       modify_def$0=
        function(v0,x,f,m)
         {return modify_def
                  (v0,
                   x,
                   f,
                   function(_aMA_,_aMz_){return caml_compare(_aMA_,_aMz_)},
                   m)},
       modify_opt$0=
        function(x,f,m)
         {return modify_opt
                  (x,
                   f,
                   function(_aMy_,_aMx_){return caml_compare(_aMy_,_aMx_)},
                   m)},
       find$3=
        function(k,m)
         {try
           {var _aMv_=[0,find$2(k,m)];return _aMv_}
          catch(_aMw_)
           {_aMw_ = caml_wrap_exception(_aMw_);
            if(_aMw_ === Not_found)return 0;
            throw _aMw_}},
       _jp_=caml_sys_argv(0);
      caml_check_bound(_jp_,0);
      caml_sys_argv(0);
      at_exit(close_all);
      at_exit(flush_all$0);
      var
       Out_of_range=[248,_jq_,caml_fresh_oo_id(0)],
       of_char=function(_aMu_){return _aMu_},
       chr$0=
        function(n)
         {var switch$0=0;
          if(0 <= n && ! (55295 < n))switch$0 = 1;
          if(! switch$0)
           {var switch$1=0;
            if(! (57344 <= n) || 1114111 < n)switch$1 = 1;
            if(switch$1)throw Out_of_range}
          return n},
       of_int$0=function(n){return chr$0(n)},
       add_uchar=
        function(buf,k)
         {if(127 < k)
           {if(2047 < k)
             {if(65535 < k)
               {var _aMo_=240 + (k >>> 18 | 0) | 0;
                add_char(buf,_aMo_);
                var _aMp_=128 | (k >>> 12 | 0) & 63;
                add_char(buf,_aMp_);
                var _aMq_=128 | (k >>> 6 | 0) & 63;
                add_char(buf,_aMq_);
                return add_char(buf,128 | k & 63)}
              var _aMr_=224 | k >>> 12 | 0;
              add_char(buf,_aMr_);
              var _aMs_=128 | (k >>> 6 | 0) & 63;
              add_char(buf,_aMs_);
              return add_char(buf,128 | k & 63)}
            var _aMt_=192 | k >>> 6 | 0;
            add_char(buf,_aMt_);
            return add_char(buf,128 | k & 63)}
          return add_char(buf,k)},
       init$1=
        function(len,f)
         {var buf=create$1(len),_aMl_=len - 1 | 0,_aMk_=0;
          if(! (_aMl_ < 0))
           {var c=_aMk_;
            for(;;)
             {var _aMm_=caml_call1(f,c);
              add_uchar(buf,_aMm_);
              var _aMn_=c + 1 | 0;
              if(_aMl_ !== c){var c=_aMn_;continue}
              break}}
          return contents(buf)},
       make$4=function(len,u){return init$1(len,function(param){return u})},
       of_char$0=function(u){return make$4(1,u)},
       of_latin1=
        function(s)
         {return init$1
                  (caml_ml_string_length(s),
                   function(i){return of_char(caml_string_get(s,i))})},
       equal$4=function(x,y){return x === y?1:0},
       to_int$0=function(x){return x},
       intersect=function(x,y){return 0 !== (x & y)?1:0},
       symbol$1=function(x,y){return x | y},
       dummy$1=-1,
       inexistant=1,
       letter=2,
       not_letter=4,
       newline=8,
       lastnewline=16,
       search_boundary=32,
       from_char=
        function(param)
         {var switch$0=0;
          if(170 <= param)
           if(187 <= param)
            {var _aMh_=param - 192 | 0;
             if(54 < _aMh_ >>> 0)
              {if(56 <= _aMh_)switch$0 = 1}
             else
              if(23 !== _aMh_)switch$0 = 1}
           else
            {var _aMi_=param - 171 | 0;
             if(14 < _aMi_ >>> 0 || 10 === _aMi_)switch$0 = 1}
          else
           if(65 <= param)
            {var _aMj_=param - 91 | 0;
             if(5 < _aMj_ >>> 0)
              {if(! (32 <= _aMj_))switch$0 = 1}
             else
              if(4 === _aMj_)switch$0 = 1}
           else
            if(48 <= param)
             {if(! (58 <= param))switch$0 = 1}
            else
             if(10 === param)return symbol$1(not_letter,newline);
          return switch$0?letter:not_letter},
       union$0=
        function(l$0,l)
         {var l$2=l$0,l$1=l;
          for(;;)
           {if(l$1)
             {if(l$2)
               {var
                 r=l$1[2],
                 _aMg_=l$1[1],
                 c2=_aMg_[2],
                 c1=_aMg_[1],
                 r$0=l$2[2],
                 match=l$2[1],
                 c2$0=match[2],
                 c1$0=match[1];
                if((c2$0 + 1 | 0) < c1)
                 return [0,[0,c1$0,c2$0],union$0(r$0,l$1)];
                if((c2 + 1 | 0) < c1$0)return [0,[0,c1,c2],union$0(l$2,r)];
                if(c2$0 < c2)
                 {var l$3=[0,[0,min(c1$0,c1),c2],r],l$2=r$0,l$1=l$3;continue}
                var l$4=[0,[0,min(c1$0,c1),c2$0],r$0],l$2=l$4,l$1=r;
                continue}
              return l$1}
            return l$2}},
       inter$0=
        function(l$0,l)
         {var l$2=l$0,l$1=l;
          for(;;)
           {if(l$1)
             {if(l$2)
               {var
                 r=l$1[2],
                 _aMd_=l$1[1],
                 c2=_aMd_[2],
                 c1=_aMd_[1],
                 r$0=l$2[2],
                 match=l$2[1],
                 c2$0=match[2],
                 c1$0=match[1];
                if(caml_lessthan(c2$0,c1)){var l$2=r$0;continue}
                if(caml_lessthan(c2,c1$0)){var l$1=r;continue}
                if(caml_lessthan(c2$0,c2))
                 {var _aMe_=inter$0(r$0,l$1);
                  return [0,[0,max(c1$0,c1),c2$0],_aMe_]}
                var _aMf_=inter$0(l$2,r);
                return [0,[0,max(c1$0,c1),c2],_aMf_]}
              return 0}
            return 0}},
       diff$0=
        function(l$0,l)
         {var l$2=l$0,l$1=l;
          for(;;)
           {if(l$1)
             {if(l$2)
               {var
                 r=l$1[2],
                 _aMc_=l$1[1],
                 c2=_aMc_[2],
                 c1=_aMc_[1],
                 r$0=l$2[2],
                 match=l$2[1],
                 c2$0=match[2],
                 c1$0=match[1];
                if(c2$0 < c1)return [0,[0,c1$0,c2$0],diff$0(r$0,l$1)];
                if(c2 < c1$0){var l$1=r;continue}
                var r$1=c2 < c2$0?[0,[0,c2 + 1 | 0,c2$0],r$0]:r$0;
                if(c1$0 < c1)return [0,[0,c1$0,c1 - 1 | 0],diff$0(r$1,r)];
                var l$2=r$1,l$1=r;
                continue}
              return 0}
            return l$2}},
       single=function(c){return [0,[0,c,c],0]},
       add$7=function(c,l){return union$0(single(c),l)},
       seq$0=
        function(c$0,c)
         {return caml_lessequal(c$0,c)?[0,[0,c$0,c],0]:[0,[0,c,c$0],0]},
       offset=
        function(o,l)
         {if(l)
           {var r=l[2],match=l[1],c2=match[2],c1=match[1];
            return [0,[0,c1 + o | 0,c2 + o | 0],offset(o,r)]}
          return 0},
       empty$2=0,
       mem$2=
        function(c,s)
         {var s$0=s;
          for(;;)
           {if(s$0)
             {var rem=s$0[2],match=s$0[1],c2=match[2],c1=match[1];
              if(c <= c2)return c1 <= c?1:0;
              var s$0=rem;
              continue}
            return 0}},
       hash_rec=
        function(param)
         {if(param)
           {var r=param[2],match=param[1],j=match[2],i=match[1];
            return (i + (13 * j | 0) | 0) + (257 * hash_rec(r) | 0) | 0}
          return 0},
       iter$8=
        function(t,f)
         {var t$0=t;
          for(;;)
           {if(t$0)
             {var xs=t$0[2],match=t$0[1],y=match[2],x=match[1];
              caml_call2(f,x,y);
              var t$0=xs;
              continue}
            return 0}},
       one_char=
        function(param)
         {if(param && ! param[2])
           {var match=param[1],j=match[2],i=match[1];
            if(caml_equal(i,j))return [0,i]}
          return 0},
       compare$13=
        function(param,_aMb_)
         {var v=_aMb_[2],j=_aMb_[1],u=param[2],i=param[1],c=caml_compare(i,j);
          return 0 === c?caml_compare(u,v):c},
       CSetMap=_af_([0,compare$13]),
       fold_right$2=function(t,init,f){return fold_right(f,t,init)},
       csingle=function(c){return single(c)},
       is_empty$3=function(param){return param?0:1},
       equal$5=function(x,y){return x === y?1:0},
       compare$14=function(x,y){return caml_int_compare(x,y)},
       Set=_Y_([0,compare$14]),
       hash_combine=function(h,accu){return (accu * 65599 | 0) + h | 0},
       empty$3=[0,0,Set[1]],
       hash_marks_offset=
        function(l,accu)
         {var l$0=l,accu$0=accu;
          for(;;)
           {if(l$0)
             {var
               r=l$0[2],
               match=l$0[1],
               i=match[2],
               a=match[1],
               _aMa_=hash_combine(i,accu$0),
               accu$1=hash_combine(a,_aMa_),
               l$0=r,
               accu$0=accu$1;
              continue}
            return accu$0}},
       hash$2=
        function(m,accu)
         {var _aL9_=m[2],_aL__=hash(_aL9_),_aL$_=hash_combine(_aL__,accu);
          return hash_marks_offset(m[1],_aL$_)},
       _jr_=
        function(idx,marks)
         {if(marks)
           {var _aL8_=marks[1];
            if(-1 === _aL8_[2])
             {var rem=marks[2],a=_aL8_[1];return [0,[0,a,idx],_jr_(idx,rem)]}}
          return marks},
       marks_set_idx=
        function(marks,idx)
         {var _aL6_=marks[2],_aL7_=marks[1];return [0,_jr_(idx,_aL7_),_aL6_]},
       first=
        function(f,param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var r=param$0[2],x=param$0[1],res=caml_call1(f,x);
              if(res)return res;
              var param$0=r;
              continue}
            return 0}},
       create_ids=function(param){return [0,0]},
       mk_expr=function(ids,def){ids[1]++;return [0,ids[1],def]},
       empty$4=function(ids){return mk_expr(ids,_js_)},
       cst=
        function(ids,s){return is_empty$3(s)?empty$4(ids):mk_expr(ids,[0,s])},
       alt=
        function(ids,l)
         {if(l){if(l[2])return mk_expr(ids,[1,l]);var c=l[1];return c}
          return empty$4(ids)},
       seq$1=
        function(ids,kind,x,y)
         {var _aL4_=x[2],_aL5_=y[2];
          if(typeof _aL4_ !== "number" && 1 === _aL4_[0] && ! _aL4_[1])
           return x;
          if(typeof _aL5_ !== "number" && 1 === _aL5_[0] && ! _aL5_[1])
           return y;
          if(typeof _aL4_ === "number")return y;
          if(typeof _aL5_ === "number" && 332064784 === kind)return x;
          return mk_expr(ids,[2,kind,x,y])},
       is_eps=function(expr){return typeof expr[2] === "number"?1:0},
       eps=function(ids){return mk_expr(ids,0)},
       rep=function(ids,kind,sem,x){return mk_expr(ids,[3,kind,sem,x])},
       mark=function(ids,m){return mk_expr(ids,[4,m])},
       pmark=function(ids,i){return mk_expr(ids,[8,i])},
       erase=function(ids,m$0,m){return mk_expr(ids,[5,m$0,m])},
       before=function(ids,c){return mk_expr(ids,[6,c])},
       after=function(ids,c){return mk_expr(ids,[7,c])},
       rename=
        function(ids,x)
         {var _aL0_=x[2];
          if(typeof _aL0_ !== "number")
           switch(_aL0_[0])
            {case 1:
              var l=_aL0_[1],_aL1_=function(_aL3_){return rename(ids,_aL3_)};
              return mk_expr(ids,[1,map$0(_aL1_,l)]);
             case 2:
              var z=_aL0_[3],y=_aL0_[2],k=_aL0_[1],_aL2_=rename(ids,z);
              return mk_expr(ids,[2,k,rename(ids,y),_aL2_]);
             case 3:
              var y$0=_aL0_[3],k$0=_aL0_[2],g=_aL0_[1];
              return mk_expr(ids,[3,g,k$0,rename(ids,y$0)])
             }
          return mk_expr(ids,x[2])},
       equal$6=
        function(l1,l2)
         {var l1$0=l1,l2$0=l2;
          for(;;)
           {if(l1$0)
             {var _aLH_=l1$0[1];
              switch(_aLH_[0])
               {case 0:
                 if(l2$0)
                  {var
                    _aLI_=l2$0[1],
                    _aLJ_=l1$0[2],
                    _aLK_=_aLH_[2],
                    _aLL_=_aLH_[1];
                   if(0 === _aLI_[0])
                    {var
                      r2=l2$0[2],
                      e2=_aLI_[2],
                      l2$1=_aLI_[1],
                      _aLM_=_aLK_[1] === e2[1]?1:0;
                     if(_aLM_)
                      {var _aLN_=equal$6(_aLL_,l2$1);
                       if(_aLN_){var l1$0=_aLJ_,l2$0=r2;continue}
                       var _aLO_=_aLN_}
                     else
                      var _aLO_=_aLM_;
                     return _aLO_}}
                 break;
                case 1:
                 if(l2$0)
                  {var
                    _aLP_=l2$0[1],
                    _aLQ_=l1$0[2],
                    _aLR_=_aLH_[2],
                    _aLS_=_aLH_[1];
                   if(1 === _aLP_[0])
                    {var
                      r2$0=l2$0[2],
                      e2$0=_aLP_[2],
                      marks2=_aLP_[1],
                      _aLT_=_aLR_[1] === e2$0[1]?1:0;
                     if(_aLT_)
                      {var _aLU_=caml_equal(_aLS_,marks2);
                       if(_aLU_){var l1$0=_aLQ_,l2$0=r2$0;continue}
                       var _aLV_=_aLU_}
                     else
                      var _aLV_=_aLT_;
                     return _aLV_}}
                 break;
                default:
                 if(l2$0)
                  {var _aLW_=l2$0[1],_aLX_=l1$0[2],_aLY_=_aLH_[1];
                   if(2 === _aLW_[0])
                    {var
                      r2$1=l2$0[2],
                      marks2$0=_aLW_[1],
                      _aLZ_=caml_equal(_aLY_,marks2$0);
                     if(_aLZ_){var l1$0=_aLX_,l2$0=r2$1;continue}
                     return _aLZ_}}}}
            else
             if(! l2$0)return 1;
            return 0}},
       hash$3=
        function(l,accu)
         {var l$0=l,accu$0=accu;
          for(;;)
           {if(l$0)
             {var _aLw_=l$0[1];
              switch(_aLw_[0])
               {case 0:
                 var
                  r=l$0[2],
                  e=_aLw_[2],
                  l$1=_aLw_[1],
                  _aLx_=hash$3(l$1,accu$0),
                  _aLy_=e[1],
                  _aLz_=hash_combine(_aLy_,_aLx_),
                  _aLA_=388635598,
                  accu$1=hash_combine(_aLA_,_aLz_),
                  l$0=r,
                  accu$0=accu$1;
                 continue;
                case 1:
                 var
                  r$0=l$0[2],
                  e$0=_aLw_[2],
                  marks=_aLw_[1],
                  _aLB_=hash$2(marks,accu$0),
                  _aLC_=e$0[1],
                  _aLD_=hash_combine(_aLC_,_aLB_),
                  _aLE_=726404471,
                  accu$2=hash_combine(_aLE_,_aLD_),
                  l$0=r$0,
                  accu$0=accu$2;
                 continue;
                default:
                 var
                  r$1=l$0[2],
                  marks$0=_aLw_[1],
                  _aLF_=hash$2(marks$0,accu$0),
                  _aLG_=471882453,
                  accu$3=hash_combine(_aLG_,_aLF_),
                  l$0=r$1,
                  accu$0=accu$3;
                 continue}}
            return accu$0}},
       texp=function(marks,x){return [1,marks,x]},
       tseq=
        function(kind,x,y,rem)
         {if(x)
           {var _aLv_=x[1];
            if(1 === _aLv_[0] && typeof _aLv_[2][2] === "number" && ! x[2])
             {var marks=_aLv_[1];return [0,[1,marks,y],rem]}
            return [0,[0,x,y,kind],rem]}
          return rem},
       dummy$2=[0,-1,dummy$1,0,0,-1],
       hash$4=
        function(idx,cat,desc)
         {var
           _aLr_=0,
           _aLs_=to_int$0(cat),
           _aLt_=hash_combine(_aLs_,_aLr_),
           _aLu_=hash_combine(idx,_aLt_);
          return hash$3(desc,_aLu_) & 1073741823},
       mk$0=
        function(idx,cat,desc){return [0,idx,cat,desc,0,hash$4(idx,cat,desc)]},
       create$9=function(cat,e){return mk$0(0,cat,[0,[1,empty$3,e],0])},
       equal$7=
        function(x,y)
         {var _aLl_=x[5] === y[5]?1:0;
          if(_aLl_)
           {var _aLm_=x[1] === y[1]?1:0;
            if(_aLm_)
             {var _aLn_=y[2],_aLo_=x[2],_aLp_=equal$4(_aLo_,_aLn_);
              if(_aLp_)return equal$6(x[3],y[3]);
              var _aLq_=_aLp_}
            else
             var _aLq_=_aLm_}
          else
           var _aLq_=_aLl_;
          return _aLq_},
       hash$5=function(t){return t[5]},
       Table=Make$1([0,equal$7,hash$5]),
       create_working_area=function(param){return [0,[0,0]]},
       index_count=function(w){return w[1].length - 1},
       reset_table=function(a){return fill(a,0,a.length - 1,0)},
       mark_used_indices=
        function(tbl)
         {function _aLf_(param)
           {if(0 === param[0])
             {var l=param[1];return caml_call1(mark_used_indices(tbl),l)}
            var marks=param[1],_aLh_=marks[1];
            return iter$0
                    (function(param)
                      {var i=param[2],_aLi_=0 <= i?1:0;
                       if(_aLi_)
                        {var _aLj_=1;
                         caml_check_bound(tbl,i)[1 + i] = _aLj_;
                         var _aLk_=0}
                       else
                        var _aLk_=_aLi_;
                       return _aLk_},
                     _aLh_)}
          return function(_aLg_){return iter$0(_aLf_,_aLg_)}},
       find_free=
        function(tbl,idx,len)
         {var idx$0=idx;
          for(;;)
           {if(idx$0 !== len && caml_check_bound(tbl,idx$0)[1 + idx$0])
             {var idx$1=idx$0 + 1 | 0,idx$0=idx$1;continue}
            return idx$0}},
       free_index=
        function(tbl_ref,l)
         {var tbl=tbl_ref[1];
          reset_table(tbl);
          caml_call1(mark_used_indices(tbl),l);
          var len=tbl.length - 1,_aLd_=0,idx=find_free(tbl,_aLd_,len);
          if(idx === len)
           {var _aLe_=2 * len | 0;tbl_ref[1] = caml_make_vect(_aLe_,0)}
          return idx},
       _jt_=function(param){return 2 === param[0]?0:1},
       remove_matches=find_all(_jt_),
       split_at_match_rec=
        function(l,param)
         {var l$0=l,param$0=param;
          for(;;)
           {if(param$0)
             {var _aLb_=param$0[1];
              if(2 === _aLb_[0])
               {var r=param$0[2],_aLc_=caml_call1(remove_matches,r);
                return [0,rev(l$0),_aLc_]}
              var
               param$1=param$0[2],
               l$1=[0,_aLb_,l$0],
               l$0=l$1,
               param$0=param$1;
              continue}
            throw [0,Assert_failure,_ju_]}},
       split_at_match=function(l){return split_at_match_rec(0,l)},
       remove_duplicates=
        function(prev,l,y)
         {var l$0=l;
          for(;;)
           {if(l$0)
             {var _aK8_=l$0[1];
              switch(_aK8_[0])
               {case 0:
                 var
                  r=l$0[2],
                  kind=_aK8_[3],
                  x=_aK8_[2],
                  l$1=_aK8_[1],
                  match=remove_duplicates(prev,l$1,x),
                  prev$0=match[2],
                  l$2=match[1],
                  match$0=remove_duplicates(prev$0,r,y),
                  prev$1=match$0[2],
                  r$0=match$0[1];
                 return [0,tseq(kind,l$2,x,r$0),prev$1];
                case 1:
                 if(typeof _aK8_[2][2] === "number")
                  {var r$1=l$0[2],_aK9_=y[1];
                   if(memq(_aK9_,prev)){var l$0=r$1;continue}
                   var
                    _aK__=[0,y[1],prev],
                    match$1=remove_duplicates(_aK__,r$1,y),
                    prev$2=match$1[2],
                    r$2=match$1[1];
                   return [0,[0,_aK8_,r$2],prev$2]}
                 var r$3=l$0[2],x$0=_aK8_[2],_aK$_=x$0[1];
                 if(memq(_aK$_,prev)){var l$0=r$3;continue}
                 var
                  _aLa_=[0,x$0[1],prev],
                  match$2=remove_duplicates(_aLa_,r$3,y),
                  prev$3=match$2[2],
                  r$4=match$2[1];
                 return [0,[0,_aK8_,r$4],prev$3];
                default:return [0,[0,_aK8_,0],prev]}}
            return [0,0,prev]}},
       set_idx=
        function(idx,param)
         {if(param)
           {var _aK4_=param[1];
            switch(_aK4_[0])
             {case 0:
               var
                r=param[2],
                kind=_aK4_[3],
                x=_aK4_[2],
                l=_aK4_[1],
                _aK5_=set_idx(idx,r);
               return [0,[0,set_idx(idx,l),x,kind],_aK5_];
              case 1:
               var
                r$0=param[2],
                x$0=_aK4_[2],
                marks=_aK4_[1],
                _aK6_=set_idx(idx,r$0);
               return [0,[1,marks_set_idx(marks,idx),x$0],_aK6_];
              default:
               var r$1=param[2],marks$0=_aK4_[1],_aK7_=set_idx(idx,r$1);
               return [0,[2,marks_set_idx(marks$0,idx)],_aK7_]}}
          return 0},
       filter_marks=
        function(b,e,marks)
         {var _aKZ_=marks[2],_aK0_=marks[1];
          function _aK1_(param)
           {var i=param[1],_aK2_=i < b?1:0,_aK3_=_aK2_ || (e < i?1:0);
            return _aK3_}
          return [0,caml_call1(find_all(_aK1_),_aK0_),_aKZ_]},
       delta_1$0=
        function(counter,init,c,next_cat,prev_cat,x,rem)
         {var _aKP_=x[2];
          if(typeof _aKP_ === "number")
           return [0,[2,init],rem];
          else
           switch(_aKP_[0])
            {case 0:
              var s=_aKP_[1];
              return mem$2(c,s)?[0,texp(init,eps_expr),rem]:rem;
             case 1:
              var l=_aKP_[1];
              if(counter < 50)
               {var counter$1=counter + 1 | 0;
                return delta_2$0(counter$1,init,c,next_cat,prev_cat,l,rem)}
              return caml_trampoline_return
                      (delta_2$0,[0,init,c,next_cat,prev_cat,l,rem]);
             case 2:
              var
               z=_aKP_[3],
               y=_aKP_[2],
               kind=_aKP_[1],
               _aKQ_=0,
               y$0=delta_1(init,c,next_cat,prev_cat,y,_aKQ_);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return delta_seq$0
                        (counter$0,c,next_cat,prev_cat,kind,y$0,z,rem)}
              return caml_trampoline_return
                      (delta_seq$0,[0,c,next_cat,prev_cat,kind,y$0,z,rem]);
             case 3:
              var
               y$1=_aKP_[3],
               kind$0=_aKP_[2],
               rep_kind=_aKP_[1],
               _aKR_=0,
               y$2=delta_1(init,c,next_cat,prev_cat,y$1,_aKR_),
               _aKS_=
                function(param)
                 {if(2 === param[0]){var marks=param[1];return [0,marks]}
                  return 0},
               match=first(_aKS_,y$2);
              if(match)
               var
                marks=match[1],
                _aKT_=caml_call1(remove_matches,y$2),
                marks$0=marks,
                y$3=_aKT_;
              else
               var marks$0=init,y$3=y$2;
              return 620821490 <= rep_kind
                      ?[0,[2,init],tseq(kind$0,y$3,x,rem)]
                      :tseq(kind$0,y$3,x,[0,[2,marks$0],rem]);
             case 4:
              var
               i=_aKP_[1],
               _aKU_=init[2],
               _aKV_=init[1],
               marks$1=[0,[0,[0,i,-1],remove_assq(i,_aKV_)],_aKU_];
              return [0,[2,marks$1],rem];
             case 5:
              var e=_aKP_[2],b=_aKP_[1];
              return [0,[2,filter_marks(b,e,init)],rem];
             case 6:
              var cat=_aKP_[1];
              return intersect(next_cat,cat)?[0,[2,init],rem]:rem;
             case 7:
              var cat$0=_aKP_[1];
              return intersect(prev_cat,cat$0)?[0,[2,init],rem]:rem;
             default:
              var
               i$0=_aKP_[1],
               _aKW_=init[2],
               _aKX_=Set[4],
               _aKY_=caml_call2(_aKX_,i$0,_aKW_),
               marks$2=[0,init[1],_aKY_];
              return [0,[2,marks$2],rem]}},
       delta_2$0=
        function(counter,marks,c,next_cat,prev_cat,l,rem)
         {if(l)
           {var r=l[2],y=l[1],_aKO_=delta_2(marks,c,next_cat,prev_cat,r,rem);
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return delta_1$0(counter$0,marks,c,next_cat,prev_cat,y,_aKO_)}
            return caml_trampoline_return
                    (delta_1$0,[0,marks,c,next_cat,prev_cat,y,_aKO_])}
          return rem},
       delta_seq$0=
        function(counter,c,next_cat,prev_cat,kind,y,z,rem)
         {function _aKJ_(param)
           {if(2 === param[0]){var marks=param[1];return [0,marks]}return 0}
          var match=first(_aKJ_,y);
          if(match)
           {var marks=match[1];
            if(-730718166 === kind)
             {var _aKK_=delta_1(marks,c,next_cat,prev_cat,z,rem);
              return tseq(kind,caml_call1(remove_matches,y),z,_aKK_)}
            if(332064784 <= kind)
             {var
               match$0=split_at_match(y),
               y$0=match$0[2],
               y$1=match$0[1],
               _aKL_=tseq(kind,y$0,z,rem);
              return tseq
                      (kind,y$1,z,delta_1(marks,c,next_cat,prev_cat,z,_aKL_))}
            var
             _aKM_=caml_call1(remove_matches,y),
             _aKN_=tseq(kind,_aKM_,z,rem);
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return delta_1$0(counter$0,marks,c,next_cat,prev_cat,z,_aKN_)}
            return caml_trampoline_return
                    (delta_1$0,[0,marks,c,next_cat,prev_cat,z,_aKN_])}
          return tseq(kind,y,z,rem)},
       delta_1=
        function(init,c,next_cat,prev_cat,x,rem)
         {return caml_trampoline(delta_1$0(0,init,c,next_cat,prev_cat,x,rem))},
       delta_2=
        function(marks,c,next_cat,prev_cat,l,rem)
         {return caml_trampoline(delta_2$0(0,marks,c,next_cat,prev_cat,l,rem))},
       delta_seq=
        function(c,next_cat,prev_cat,kind,y,z,rem)
         {return caml_trampoline
                  (delta_seq$0(0,c,next_cat,prev_cat,kind,y,z,rem))},
       delta_4=
        function(c,next_cat,prev_cat,l,rem)
         {if(l)
           {var r=l[2],y=l[1];
            return delta_3
                    (c,next_cat,prev_cat,y,delta_4(c,next_cat,prev_cat,r,rem))}
          return rem},
       delta_3=
        function(c,next_cat,prev_cat,x,rem)
         {switch(x[0])
           {case 0:
             var
              kind=x[3],
              z=x[2],
              y=x[1],
              _aKI_=0,
              y$0=delta_4(c,next_cat,prev_cat,y,_aKI_);
             return delta_seq(c,next_cat,prev_cat,kind,y$0,z,rem);
            case 1:
             var e=x[2],marks=x[1];
             return delta_1(marks,c,next_cat,prev_cat,e,rem);
            default:return [0,x,rem]}},
       delta=
        function(tbl_ref,next_cat,char$0,st)
         {var
           prev_cat=st[2],
           _aKE_=0,
           _aKF_=st[3],
           _aKG_=delta_4(char$0,next_cat,prev_cat,_aKF_,_aKE_),
           _aKH_=0,
           match=remove_duplicates(_aKH_,_aKG_,eps_expr),
           expr=match[1],
           idx=free_index(tbl_ref,expr),
           expr$0=set_idx(idx,expr);
          return mk$0(idx,next_cat,expr$0)},
       flatten_match=
        function(m)
         {var _aKA_=-1;
          function _aKB_(ma,param){var i=param[1];return max(ma,i)}
          var
           ma=fold(_aKB_,_aKA_,m),
           _aKC_=ma + 1 | 0,
           res=caml_make_vect(_aKC_,-1);
          function _aKD_(param)
           {var v=param[2],i=param[1];
            caml_check_bound(res,i)[1 + i] = v;
            return 0}
          iter$0(_aKD_,m);
          return res},
       status=
        function(s)
         {var _aKu_=s[4];
          if(_aKu_){var st=_aKu_[1];return st}
          var _aKv_=s[3];
          if(_aKv_)
           {var _aKw_=_aKv_[1];
            if(2 === _aKw_[0])
             var
              m=_aKw_[1],
              _aKx_=m[2],
              _aKy_=m[1],
              _aKz_=[0,flatten_match(_aKy_),_aKx_],
              st$0=_aKz_;
            else
             var st$0=1}
          else
           var st$0=0;
          s[4] = [0,st$0];
          return st$0},
       make$5=function(param){return make$0(257,0)},
       flatten$1=
        function(cm)
         {var
           c=caml_create_bytes(256),
           color_repr=caml_create_bytes(256),
           v=[0,0];
          caml_bytes_set(c,0,0);
          caml_bytes_set(color_repr,0,0);
          var i=1;
          for(;;)
           {if(0 !== caml_bytes_get(cm,i))v[1]++;
            var _aKp_=v[1],_aKq_=chr(_aKp_);
            caml_bytes_set(c,i,_aKq_);
            var _aKr_=chr(i),_aKs_=v[1];
            caml_bytes_set(color_repr,_aKs_,_aKr_);
            var _aKt_=i + 1 | 0;
            if(255 !== i){var i=_aKt_;continue}
            var _aKm_=v[1] + 1 | 0,_aKn_=v[1] + 1 | 0,_aKo_=0;
            return [0,c,sub(color_repr,_aKo_,_aKn_),_aKm_]}},
       split$1=
        function(s,cm)
         {return iter$8
                  (s,
                   function(i,j)
                    {caml_bytes_set(cm,i,1);
                     var _aKl_=j + 1 | 0;
                     return caml_bytes_set(cm,_aKl_,1)})},
       get_ofs=
        function(t,i)
         {if(t[2].length - 1 <= ((2 * i | 0) + 1 | 0))throw Not_found;
          var
           _aKe_=2 * i | 0,
           _aKf_=t[2],
           m1=caml_check_bound(_aKf_,_aKe_)[1 + _aKe_];
          if(-1 === m1)throw Not_found;
          var
           _aKg_=t[4],
           p1=caml_check_bound(_aKg_,m1)[1 + m1] - 1 | 0,
           _aKh_=(2 * i | 0) + 1 | 0,
           _aKi_=t[2],
           _aKj_=caml_check_bound(_aKi_,_aKh_)[1 + _aKh_],
           _aKk_=t[4],
           p2=caml_check_bound(_aKk_,_aKj_)[1 + _aKj_] - 1 | 0;
          return [0,p1,p2]},
       get$4=
        function(t,i)
         {var match=get_ofs(t,i),p2=match[2],p1=match[1];
          return sub$0(t[1],p1,p2 - p1 | 0)},
       iter$9=
        function(n,f,v)
         {var n$0=n,v$0=v;
          for(;;)
           {if(0 === n$0)return v$0;
            var v$1=caml_call1(f,v$0),n$1=n$0 - 1 | 0,n$0=n$1,v$0=v$1;
            continue}},
       unknown$0=-2,
       break$0=-3,
       category=
        function(re,color)
         {if(-1 === color)return inexistant;
          if(color === re[6])
           return symbol$1(symbol$1(lastnewline,newline),not_letter);
          var _aKd_=re[4];
          return from_char(caml_bytes_get(_aKd_,color))},
       dummy_next=[0],
       unknown_state=[0,unknown$0,0,dummy_next,0,dummy$2],
       mk_state=
        function(ncol,desc)
         {var match=status(desc),switch$0=0;
          if(typeof match === "number" && match)
           {var break_state=0;switch$0 = 1}
          if(! switch$0)var break_state=1;
          var
           _aJ$_=0,
           _aKa_=break_state?dummy_next:caml_make_vect(ncol,unknown_state),
           _aKb_=desc[1],
           _aKc_=break_state?break$0:desc[1];
          return [0,_aKc_,_aKb_,_aKa_,_aJ$_,desc]},
       find_state=
        function(re,desc)
         {try
           {var _aJ7_=re[8],_aJ8_=Table[7],_aJ9_=caml_call2(_aJ8_,_aJ7_,desc);
            return _aJ9_}
          catch(_aJ__)
           {_aJ__ = caml_wrap_exception(_aJ__);
            if(_aJ__ === Not_found)
             {var
               _aJ4_=re[5],
               st=mk_state(_aJ4_,desc),
               _aJ5_=re[8],
               _aJ6_=Table[5];
              caml_call3(_aJ6_,_aJ5_,desc,st);
              return st}
            throw _aJ__}},
       delta$0=
        function(info,cat,color,st)
         {var
           _aJW_=st[5],
           _aJX_=info[1][7],
           desc=delta(_aJX_,cat,color,_aJW_),
           len=info[3].length - 1,
           _aJY_=desc[1] === len?1:0,
           _aJZ_=_aJY_?0 < len?1:0:_aJY_;
          if(_aJZ_)
           {var pos=info[3],_aJ0_=2 * len | 0;
            info[3] = caml_make_vect(_aJ0_,0);
            var _aJ1_=0,_aJ2_=info[3],_aJ3_=0;
            blit$1(pos,_aJ3_,_aJ2_,_aJ1_,len)}
          return desc},
       validate=
        function(info,s,pos,st)
         {var
           _aJR_=caml_string_get(s,pos),
           _aJS_=info[2],
           color=caml_bytes_get(_aJS_,_aJR_),
           _aJT_=info[1],
           cat=category(_aJT_,color),
           desc=delta$0(info,cat,color,st),
           _aJU_=info[1],
           st$0=find_state(_aJU_,desc),
           _aJV_=st[3];
          caml_check_bound(_aJV_,color)[1 + color] = st$0;
          return 0},
       loop$0=
        function(counter,info,s,pos,st)
         {if(pos < info[5])
           {var
             _aJN_=caml_string_get(s,pos),
             _aJO_=info[2],
             _aJP_=caml_bytes_get(_aJO_,_aJN_),
             _aJQ_=st[3],
             st$0=caml_check_bound(_aJQ_,_aJP_)[1 + _aJP_];
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop2(counter$0,info,s,pos,st,st$0)}
            return caml_trampoline_return(loop2,[0,info,s,pos,st,st$0])}
          return st},
       loop2=
        function(counter,info,s,pos,st$0,st)
         {var pos$0=pos,st$2=st$0,st$1=st;
          for(;;)
           {if(0 <= st$1[1])
             {var pos$1=pos$0 + 1 | 0;
              if(pos$1 < info[5])
               {var
                 _aJC_=caml_string_get(s,pos$1),
                 _aJD_=info[2],
                 _aJE_=caml_bytes_get(_aJD_,_aJC_),
                 _aJF_=st$1[3],
                 st$3=caml_check_bound(_aJF_,_aJE_)[1 + _aJE_],
                 _aJG_=st$1[1],
                 _aJH_=info[3];
                caml_check_bound(_aJH_,_aJG_)[1 + _aJG_] = pos$1;
                var pos$0=pos$1,st$2=st$1,st$1=st$3;
                continue}
              var _aJI_=st$1[1],_aJJ_=info[3];
              caml_check_bound(_aJJ_,_aJI_)[1 + _aJI_] = pos$1;
              return st$1}
            if(st$1[1] === -3)
             {var _aJL_=st$1[2],_aJK_=pos$0 + 1 | 0,_aJM_=info[3];
              caml_check_bound(_aJM_,_aJL_)[1 + _aJL_] = _aJK_;
              return st$1}
            validate(info,s,pos$0,st$2);
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop$0(counter$0,info,s,pos$0,st$2)}
            return caml_trampoline_return(loop$0,[0,info,s,pos$0,st$2])}},
       loop=
        function(info,s,pos,st)
         {return caml_trampoline(loop$0(0,info,s,pos,st))},
       loop_no_mark=
        function(info,s,pos,last,st)
         {var pos$0=pos,st$0=st;
          for(;;)
           {if(pos$0 < last)
             {var
               _aJy_=caml_string_get(s,pos$0),
               _aJz_=info[2],
               _aJA_=caml_bytes_get(_aJz_,_aJy_),
               _aJB_=st$0[3],
               st$1=caml_check_bound(_aJB_,_aJA_)[1 + _aJA_];
              if(0 <= st$1[1])
               {var pos$1=pos$0 + 1 | 0,pos$0=pos$1,st$0=st$1;continue}
              if(st$1[1] === -3)return st$1;
              validate(info,s,pos$0,st$0);
              continue}
            return st$0}},
       final$0=
        function(info,st,cat)
         {try
           {var _aJv_=st[4],_aJw_=assq(cat,_aJv_);return _aJw_}
          catch(_aJx_)
           {_aJx_ = caml_wrap_exception(_aJx_);
            if(_aJx_ === Not_found)
             {var
               _aJt_=-1,
               st$0=delta$0(info,cat,_aJt_,st),
               _aJu_=status(st$0),
               res=[0,st$0[1],_aJu_];
              st[4] = [0,[0,cat,res],st[4]];
              return res}
            throw _aJx_}},
       find_initial_state=
        function(re,cat)
         {try
           {var _aJq_=re[2],_aJr_=assq(cat,_aJq_);return _aJr_}
          catch(_aJs_)
           {_aJs_ = caml_wrap_exception(_aJs_);
            if(_aJs_ === Not_found)
             {var
               _aJo_=re[1],
               _aJp_=create$9(cat,_aJo_),
               st=find_state(re,_aJp_);
              re[2] = [0,[0,cat,st],re[2]];
              return st}
            throw _aJs_}},
       get_color=
        function(re,s,pos)
         {if(0 <= pos)
           {var slen=caml_ml_string_length(s);
            if(slen <= pos)return -1;
            if
             (pos
              ===
              (slen - 1 | 0)
              &&
              -1
              !==
              re[6]
              &&
              10
              ===
              caml_string_get(s,pos))
             return re[6];
            var _aJm_=caml_string_get(s,pos),_aJn_=re[3];
            return caml_bytes_get(_aJn_,_aJm_)}
          return -1},
       handle_last_newline=
        function(info,pos,st,groups)
         {for(;;)
           {var
             _aJa_=info[1][6],
             _aJb_=st[3],
             st$0=caml_check_bound(_aJb_,_aJa_)[1 + _aJa_];
            if(0 <= st$0[1])
             {if(groups)
               {var _aJd_=st$0[1],_aJc_=pos + 1 | 0,_aJe_=info[3];
                caml_check_bound(_aJe_,_aJd_)[1 + _aJd_] = _aJc_}
              return st$0}
            if(st$0[1] === -3)
             {if(groups)
               {var _aJg_=st$0[2],_aJf_=pos + 1 | 0,_aJh_=info[3];
                caml_check_bound(_aJh_,_aJg_)[1 + _aJg_] = _aJf_}
              return st$0}
            var
             color=info[1][6],
             _aJi_=info[2],
             real_c=caml_bytes_get(_aJi_,10),
             _aJj_=info[1],
             cat=category(_aJj_,color),
             desc=delta$0(info,cat,real_c,st),
             _aJk_=info[1],
             st$1=find_state(_aJk_,desc),
             _aJl_=st[3];
            caml_check_bound(_aJl_,color)[1 + color] = st$1;
            continue}},
       scan_str=
        function(info,s,initial_state,groups)
         {var pos=info[4],last=info[5];
          if
           (last
            ===
            caml_ml_string_length(s)
            &&
            -1
            !==
            info[1][6]
            &&
            pos
            <
            last)
           {var _aI$_=last - 1 | 0;
            if(10 === caml_string_get(s,_aI$_))
             {var
               info$0=[0,info[1],info[2],info[3],info[4],last - 1 | 0],
               st=scan_str(info$0,s,initial_state,groups);
              return st[1] === -3
                      ?st
                      :handle_last_newline(info$0,last - 1 | 0,st,groups)}}
          return groups
                  ?loop(info,s,pos,initial_state)
                  :loop_no_mark(info,s,pos,last,initial_state)},
       match_str=
        function(groups,partial,re,s,pos,len)
         {var
           slen=caml_ml_string_length(s),
           last=-1 === len?slen:pos + len | 0;
          if(groups)
           var
            _aI0_=re[7],
            n=index_count(_aI0_) + 1 | 0,
            _aI1_=10 < n?caml_make_vect(n,0):_jv_.slice(),
            _aI2_=_aI1_;
          else
           var _aI2_=[0];
          var info=[0,re,re[3],_aI2_,pos,last];
          if(0 === pos)
           var initial_cat=symbol$1(search_boundary,inexistant);
          else
           var
            _aI8_=pos - 1 | 0,
            _aI9_=get_color(re,s,_aI8_),
            _aI__=category(re,_aI9_),
            initial_cat=symbol$1(search_boundary,_aI__);
          var
           initial_state=find_initial_state(re,initial_cat),
           st=scan_str(info,s,initial_state,groups),
           switch$0=0;
          if(st[1] !== -3 && ! partial)
           {if(last === slen)
             var final_cat=symbol$1(search_boundary,inexistant);
            else
             var
              _aI6_=get_color(re,s,last),
              _aI7_=category(re,_aI6_),
              final_cat=symbol$1(search_boundary,_aI7_);
            var match=final$0(info,st,final_cat),res$0=match[2],idx=match[1];
            if(groups)
             {var _aI4_=last + 1 | 0,_aI5_=info[3];
              caml_check_bound(_aI5_,idx)[1 + idx] = _aI4_}
            var res=res$0;
            switch$0 = 1}
          if(! switch$0)var _aI3_=st[5],res=status(_aI3_);
          if(typeof res === "number")return res?1:0;
          var pmarks=res[2],marks=res[1];
          return [0,[0,s,marks,pmarks,info[3],re[9]]]},
       mk_re=
        function(initial,colors,color_repr,ncolor,lnl,group_count)
         {var _aIW_=97,_aIX_=Table[1],_aIY_=caml_call1(_aIX_,_aIW_),_aIZ_=0;
          return [0,
                  initial,
                  0,
                  colors,
                  color_repr,
                  ncolor,
                  lnl,
                  create_working_area(_aIZ_),
                  _aIY_,
                  group_count]},
       cseq=function(c$0,c){return seq$0(c$0,c)},
       cadd=function(c,s){return add$7(c,s)},
       trans_set=
        function(cache,cm,s)
         {var match=one_char(s);
          if(match){var i=match[1];return csingle(caml_bytes_get(cm,i))}
          var v=[0,hash_rec(s),s];
          try
           {var
             _aIQ_=cache[1],
             _aIR_=CSetMap[28],
             _aIS_=caml_call2(_aIR_,v,_aIQ_);
            return _aIS_}
          catch(_aIT_)
           {_aIT_ = caml_wrap_exception(_aIT_);
            if(_aIT_ === Not_found)
             {var
               _aIN_=
                function(param,l)
                 {var
                   j=param[2],
                   i=param[1],
                   _aIU_=caml_bytes_get(cm,j),
                   _aIV_=caml_bytes_get(cm,i);
                  return union$0(cseq(_aIV_,_aIU_),l)},
               l=fold_right$2(s,empty$2,_aIN_),
               _aIO_=cache[1],
               _aIP_=CSetMap[4];
              cache[1] = caml_call3(_aIP_,v,l,_aIO_);
              return l}
            throw _aIT_}},
       is_charset=
        function(param)
         {var param$0=param;
          for(;;)
           {var switch$0=0;
            if(typeof param$0 === "number")
             switch$0 = 1;
            else
             switch(param$0[0])
              {case 0:return 1;
               case 13:
                var r=param$0[2],r$0=param$0[1],_aIM_=is_charset(r$0);
                if(_aIM_){var param$0=r;continue}
                return _aIM_;
               case 4:
               case 5:var param$1=param$0[2];break;
               case 2:
               case 11:
               case 12:var l=param$0[1];return for_all(is_charset,l);
               case 7:
               case 9:
               case 10:var param$1=param$0[1];break;
               default:switch$0 = 1}
            if(switch$0)return 0;
            var param$0=param$1;
            continue}},
       _jw_=222,
       _jx_=216,
       _jy_=cseq(_jx_,_jw_),
       _jz_=214,
       _jA_=192,
       _jB_=cseq(_jA_,_jz_),
       _jC_=union$0(_jB_,_jy_),
       _jD_=90,
       _jE_=65,
       _jF_=cseq(_jE_,_jD_),
       cupper=union$0(_jF_,_jC_),
       _jG_=32,
       clower=offset(_jG_,cupper),
       _jH_=union$0(clower,cupper),
       calpha=fold_right(cadd,_jI_,_jH_),
       _jJ_=57,
       _jK_=48,
       cdigit=cseq(_jK_,_jJ_),
       calnum=union$0(calpha,cdigit),
       _jL_=95,
       cword=cadd(_jL_,calnum),
       colorize=
        function(c,regexp)
         {var lnl=[0,0];
          function colorize(regexp)
           {var regexp$0=regexp;
            for(;;)
             {if(typeof regexp$0 === "number")
               switch(regexp$0)
                {case 7:lnl[1] = 1;return 0;
                 case 0:
                 case 1:var _aIL_=10;return split$1(csingle(_aIL_),c);
                 case 2:
                 case 3:
                 case 4:return split$1(cword,c);
                 default:return 0}
              else
               switch(regexp$0[0])
                {case 0:var s=regexp$0[1];return split$1(s,c);
                 case 1:var l=regexp$0[1];return iter$0(colorize,l);
                 case 2:var l$0=regexp$0[1];return iter$0(colorize,l$0);
                 case 3:var regexp$1=regexp$0[1],regexp$0=regexp$1;continue;
                 case 4:
                 case 5:
                 case 14:var regexp$2=regexp$0[2];break;
                 case 6:
                 case 7:
                 case 8:var regexp$2=regexp$0[1];break;
                 default:throw [0,Assert_failure,_jM_]}
              var regexp$0=regexp$2;
              continue}}
          colorize(regexp);
          return lnl[1]},
       equal$8=
        function(x1,x2)
         {var x1$0=x1,x2$0=x2;
          for(;;)
           {var switch$0=0;
            if(typeof x1$0 === "number")
             switch(x1$0)
              {case 0:
                if(typeof x2$0 === "number" && ! x2$0)switch$0 = 1;break;
               case 1:
                if(typeof x2$0 === "number" && 1 === x2$0)switch$0 = 1;break;
               case 2:
                if(typeof x2$0 === "number" && 2 === x2$0)switch$0 = 1;break;
               case 3:
                if(typeof x2$0 === "number" && 3 === x2$0)switch$0 = 1;break;
               case 4:
                if(typeof x2$0 === "number" && 4 === x2$0)switch$0 = 1;break;
               case 5:
                if(typeof x2$0 === "number" && 5 === x2$0)switch$0 = 1;break;
               case 6:
                if(typeof x2$0 === "number" && 6 === x2$0)switch$0 = 1;break;
               case 7:
                if(typeof x2$0 === "number" && 7 === x2$0)switch$0 = 1;break;
               case 8:
                if(typeof x2$0 === "number" && 8 === x2$0)switch$0 = 1;break;
               default:if(typeof x2$0 === "number" && 9 <= x2$0)switch$0 = 1}
            else
             switch(x1$0[0])
              {case 0:
                if(typeof x2$0 !== "number" && 0 === x2$0[0])
                 {var s2=x2$0[1],s1=x1$0[1];return caml_equal(s1,s2)}
                break;
               case 1:
                if(typeof x2$0 !== "number" && 1 === x2$0[0])
                 {var l2=x2$0[1],l1=x1$0[1];return eq_list(l1,l2)}
                break;
               case 2:
                if(typeof x2$0 !== "number" && 2 === x2$0[0])
                 {var l2$0=x2$0[1],l1$0=x1$0[1];return eq_list(l1$0,l2$0)}
                break;
               case 3:
                if(typeof x2$0 !== "number" && 3 === x2$0[0])
                 {var
                   j2=x2$0[3],
                   i2=x2$0[2],
                   x2$1=x2$0[1],
                   j1=x1$0[3],
                   i1=x1$0[2],
                   x1$1=x1$0[1],
                   _aIE_=i1 === i2?1:0;
                  if(_aIE_)
                   {var _aIF_=caml_equal(j1,j2);
                    if(_aIF_){var x1$0=x1$1,x2$0=x2$1;continue}
                    var _aIG_=_aIF_}
                  else
                   var _aIG_=_aIE_;
                  return _aIG_}
                break;
               case 4:
                if(typeof x2$0 !== "number" && 4 === x2$0[0])
                 {var
                   x2$2=x2$0[2],
                   sem2=x2$0[1],
                   x1$2=x1$0[2],
                   sem1=x1$0[1],
                   _aIH_=sem1 === sem2?1:0;
                  if(_aIH_){var x1$0=x1$2,x2$0=x2$2;continue}
                  return _aIH_}
                break;
               case 5:
                if(typeof x2$0 !== "number" && 5 === x2$0[0])
                 {var
                   x2$3=x2$0[2],
                   k2=x2$0[1],
                   x1$3=x1$0[2],
                   k1=x1$0[1],
                   _aII_=k1 === k2?1:0;
                  if(_aII_){var x1$0=x1$3,x2$0=x2$3;continue}
                  return _aII_}
                break;
               case 6:
                if(typeof x2$0 !== "number" && 6 === x2$0[0])return 0;break;
               case 7:
                if(typeof x2$0 !== "number" && 7 === x2$0[0])
                 {var x2$4=x2$0[1],x1$4=x1$0[1],x1$0=x1$4,x2$0=x2$4;continue}
                break;
               case 8:
                if(typeof x2$0 !== "number" && 8 === x2$0[0])
                 {var x2$5=x2$0[1],x1$5=x1$0[1],x1$0=x1$5,x2$0=x2$5;continue}
                break;
               case 9:
                if(typeof x2$0 !== "number" && 9 === x2$0[0])
                 {var x2$6=x2$0[1],x1$6=x1$0[1],x1$0=x1$6,x2$0=x2$6;continue}
                break;
               case 10:
                if(typeof x2$0 !== "number" && 10 === x2$0[0])
                 {var x2$7=x2$0[1],x1$7=x1$0[1],x1$0=x1$7,x2$0=x2$7;continue}
                break;
               case 11:
                if(typeof x2$0 !== "number" && 11 === x2$0[0])
                 {var l2$1=x2$0[1],l1$1=x1$0[1];return eq_list(l1$1,l2$1)}
                break;
               case 12:
                if(typeof x2$0 !== "number" && 12 === x2$0[0])
                 {var l2$2=x2$0[1],l1$2=x1$0[1];return eq_list(l1$2,l2$2)}
                break;
               case 13:
                if(typeof x2$0 !== "number" && 13 === x2$0[0])
                 {var
                   x2$8=x2$0[2],
                   x2$9=x2$0[1],
                   x1$8=x1$0[2],
                   x1$9=x1$0[1],
                   _aIJ_=equal$8(x1$9,x2$9);
                  if(_aIJ_){var x1$0=x1$8,x2$0=x2$8;continue}
                  return _aIJ_}
                break;
               default:
                if(typeof x2$0 !== "number" && 14 === x2$0[0])
                 {var
                   r2=x2$0[2],
                   m2=x2$0[1],
                   r1=x1$0[2],
                   m1=x1$0[1],
                   _aIK_=equal$5(m1,m2);
                  if(_aIK_){var x1$0=r1,x2$0=r2;continue}
                  return _aIK_}}
            return switch$0?1:0}},
       eq_list=
        function(l1,l2)
         {var l1$0=l1,l2$0=l2;
          for(;;)
           {if(l1$0)
             {if(l2$0)
               {var
                 r2=l2$0[2],
                 x2=l2$0[1],
                 r1=l1$0[2],
                 x1=l1$0[1],
                 _aID_=equal$8(x1,x2);
                if(_aID_){var l1$0=r1,l2$0=r2;continue}
                return _aID_}}
            else
             if(! l2$0)return 1;
            return 0}},
       sequence=function(l){if(l && ! l[2]){var x=l[1];return x}return [1,l]},
       merge_sequences=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var _aIw_=param$0[1];
              if(typeof _aIw_ !== "number")
               switch(_aIw_[0])
                {case 1:
                  var _aIx_=_aIw_[1];
                  if(_aIx_)
                   {var
                     r$0=param$0[2],
                     y=_aIx_[2],
                     x=_aIx_[1],
                     r$1=merge_sequences(r$0);
                    if(r$1)
                     {var _aIy_=r$1[1],switch$0=0;
                      if(typeof _aIy_ === "number" || ! (1 === _aIy_[0]))
                       switch$0 = 1;
                      else
                       {var _aIz_=_aIy_[1];
                        if(_aIz_)
                         {var r$2=r$1[2],y$0=_aIz_[2],x$0=_aIz_[1];
                          if(equal$8(x,x$0))
                           {var _aIA_=0,_aIB_=0,_aIC_=[0,sequence(y$0),_aIB_];
                            return [0,[1,[0,x,[0,[2,[0,sequence(y),_aIC_]],_aIA_]]],r$2]}}}}
                    return [0,[1,[0,x,y]],r$1]}
                  break;
                 case 2:
                  var
                   r$3=param$0[2],
                   l=_aIw_[1],
                   param$1=append(l,r$3),
                   param$0=param$1;
                  continue
                 }
              var r=param$0[2];
              return [0,_aIw_,merge_sequences(r)]}
            return 0}},
       enforce_kind=
        function(ids,kind,k,cr)
         {return 332064784 === kind
                  ?332064784 === k?cr:seq$1(ids,k,cr,eps(ids))
                  :cr},
       trans_seq=
        function(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
         {if(param)
           {var _aIv_=param[1];
            if(param[2])
             {var
               rem=param[2],
               match=
                translate
                 (ids,kind,ign_group,ign_case,greedy,pos,cache,c,_aIv_),
               kind$0=match[2],
               cr=match[1],
               cr$0=
                trans_seq(ids,kind,ign_group,ign_case,greedy,pos,cache,c,rem);
              return is_eps(cr$0)?cr:is_eps(cr)?cr$0:seq$1(ids,kind$0,cr,cr$0)}
            var
             match$0=
              translate(ids,kind,ign_group,ign_case,greedy,pos,cache,c,_aIv_),
             kind$1=match$0[2],
             cr$1=match$0[1];
            return enforce_kind(ids,kind,kind$1,cr$1)}
          return eps(ids)},
       translate=
        function(ids,kind,ign_group,ign_case,greedy,pos,cache,c,param)
         {var ign_group$0=ign_group,greedy$0=greedy,param$0=param;
          for(;;)
           if(typeof param$0 === "number")
            switch(param$0)
             {case 0:
               var _aHP_=symbol$1(inexistant,newline);
               return [0,after(ids,_aHP_),kind];
              case 1:
               var _aHQ_=symbol$1(inexistant,newline);
               return [0,before(ids,_aHQ_),kind];
              case 2:
               var
                _aHR_=before(ids,letter),
                _aHS_=symbol$1(inexistant,not_letter),
                _aHT_=after(ids,_aHS_),
                _aHU_=332064784;
               return [0,seq$1(ids,_aHU_,_aHT_,_aHR_),kind];
              case 3:
               var
                _aHV_=symbol$1(inexistant,not_letter),
                _aHW_=before(ids,_aHV_),
                _aHX_=after(ids,letter),
                _aHY_=332064784;
               return [0,seq$1(ids,_aHY_,_aHX_,_aHW_),kind];
              case 4:
               var
                _aHZ_=0,
                _aH0_=symbol$1(inexistant,not_letter),
                _aH1_=before(ids,_aH0_),
                _aH2_=symbol$1(inexistant,not_letter),
                _aH3_=after(ids,_aH2_),
                _aH4_=332064784,
                _aH5_=[0,seq$1(ids,_aH4_,_aH3_,_aH1_),_aHZ_],
                _aH6_=before(ids,letter),
                _aH7_=after(ids,letter),
                _aH8_=332064784,
                _aH9_=[0,seq$1(ids,_aH8_,_aH7_,_aH6_),_aH5_];
               return [0,alt(ids,_aH9_),kind];
              case 5:return [0,after(ids,inexistant),kind];
              case 6:return [0,before(ids,inexistant),kind];
              case 7:
               var _aH__=symbol$1(inexistant,lastnewline);
               return [0,before(ids,_aH__),kind];
              case 8:return [0,after(ids,search_boundary),kind];
              default:return [0,before(ids,search_boundary),kind]}
           else
            switch(param$0[0])
             {case 0:
               var s=param$0[1],_aH$_=trans_set(cache,c,s);
               return [0,cst(ids,_aH$_),kind];
              case 1:
               var l=param$0[1];
               return [0,
                       trans_seq
                        (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,l),
                       kind];
              case 2:
               var l$0=param$0[1],merged_sequences=merge_sequences(l$0);
               if(merged_sequences && ! merged_sequences[2])
                {var
                  r=merged_sequences[1],
                  match=
                   translate
                    (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
                  kind$0=match[2],
                  cr=match[1];
                 return [0,enforce_kind(ids,kind,kind$0,cr),kind]}
               var
                _aIa_=
                 function(r)
                  {var
                    match=
                     translate
                      (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r),
                    kind$0=match[2],
                    cr=match[1];
                   return enforce_kind(ids,kind,kind$0,cr)},
                _aIb_=map$0(_aIa_,merged_sequences);
               return [0,alt(ids,_aIb_),kind];
              case 3:
               var
                j=param$0[3],
                i=param$0[2],
                r$0=param$0[1],
                match$0=
                 translate
                  (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$0),
                kind$1=match$0[2],
                cr$0=match$0[1];
               if(j)
                var
                 j$0=j[1],
                 f=
                  620821490 <= greedy$0
                   ?function(rem)
                     {var
                       _aIp_=0,
                       _aIq_=rename(ids,cr$0),
                       _aIr_=[0,seq$1(ids,kind$1,_aIq_,rem),_aIp_];
                      return alt(ids,[0,eps(ids),_aIr_])}
                   :function(rem)
                     {var
                       _aIs_=0,
                       _aIt_=[0,eps(ids),_aIs_],
                       _aIu_=rename(ids,cr$0);
                      return alt(ids,[0,seq$1(ids,kind$1,_aIu_,rem),_aIt_])},
                 _aIc_=eps(ids),
                 _aId_=j$0 - i | 0,
                 rem=iter$9(_aId_,f,_aIc_);
               else
                var rem=rep(ids,greedy$0,kind$1,cr$0);
               var
                _aIe_=
                 function(rem){return seq$1(ids,kind$1,rename(ids,cr$0),rem)};
               return [0,iter$9(i,_aIe_,rem),kind];
              case 4:
               var
                r$1=param$0[2],
                kind$2=param$0[1],
                match$1=
                 translate
                  (ids,kind$2,ign_group$0,ign_case,greedy$0,pos,cache,c,r$1),
                kind$3=match$1[2],
                cr$1=match$1[1];
               return [0,enforce_kind(ids,kind$2,kind$3,cr$1),kind$2];
              case 5:
               var
                param$1=param$0[2],
                greedy$1=param$0[1],
                greedy$0=greedy$1,
                param$0=param$1;
               continue;
              case 6:
               var r$2=param$0[1];
               if(ign_group$0){var param$0=r$2;continue}
               var p=pos[1];
               pos[1] = pos[1] + 2 | 0;
               var
                match$2=
                 translate
                  (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$2),
                kind$4=match$2[2],
                cr$2=match$2[1],
                _aIf_=p + 1 | 0,
                _aIg_=mark(ids,_aIf_),
                _aIh_=332064784,
                _aIi_=seq$1(ids,_aIh_,cr$2,_aIg_),
                _aIj_=mark(ids,p),
                _aIk_=332064784;
               return [0,seq$1(ids,_aIk_,_aIj_,_aIi_),kind$4];
              case 7:
               var param$2=param$0[1],ign_group$0=1,param$0=param$2;continue;
              case 8:
               var
                r$3=param$0[1],
                b=pos[1],
                match$3=
                 translate
                  (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$3),
                kind$5=match$3[2],
                cr$3=match$3[1],
                e=pos[1] - 1 | 0;
               if(e < b)return [0,cr$3,kind$5];
               var _aIl_=erase(ids,b,e),_aIm_=332064784;
               return [0,seq$1(ids,_aIm_,_aIl_,cr$3),kind$5];
              case 14:
               var
                r$4=param$0[2],
                i$0=param$0[1],
                match$4=
                 translate
                  (ids,kind,ign_group$0,ign_case,greedy$0,pos,cache,c,r$4),
                kind$6=match$4[2],
                cr$4=match$4[1],
                _aIn_=pmark(ids,i$0),
                _aIo_=332064784;
               return [0,seq$1(ids,_aIo_,_aIn_,cr$4),kind$6];
              default:throw [0,Assert_failure,_jN_]}},
       case_insens=
        function(s)
         {var
           _aHJ_=inter$0(s,clower),
           _aHK_=-32,
           _aHL_=offset(_aHK_,_aHJ_),
           _aHM_=inter$0(s,cupper),
           _aHN_=32,
           _aHO_=offset(_aHN_,_aHM_);
          return union$0(s,union$0(_aHO_,_aHL_))},
       as_set=
        function(param)
         {if(typeof param !== "number" && 0 === param[0])
           {var s=param[1];return s}
          throw [0,Assert_failure,_jO_]},
       handle_case=
        function(ign_case,r)
         {var ign_case$0=ign_case,r$0=r;
          for(;;)
           if(typeof r$0 === "number")
            return r$0;
           else
            switch(r$0[0])
             {case 0:
               var s=r$0[1],_aHs_=ign_case$0?case_insens(s):s;
               return [0,_aHs_];
              case 1:
               var
                l=r$0[1],
                _aHt_=function(_aHI_){return handle_case(ign_case$0,_aHI_)};
               return [1,map$0(_aHt_,l)];
              case 2:
               var
                l$0=r$0[1],
                _aHu_=function(_aHH_){return handle_case(ign_case$0,_aHH_)},
                l$1=map$0(_aHu_,l$0),
                _aHv_=[2,l$1];
               if(is_charset(_aHv_))
                {var _aHw_=function(s,r){return union$0(s,as_set(r))};
                 return [0,fold(_aHw_,empty$2,l$1)]}
               return [2,l$1];
              case 3:
               var j=r$0[3],i=r$0[2],r$1=r$0[1];
               return [3,handle_case(ign_case$0,r$1),i,j];
              case 4:
               var r$2=r$0[2],k=r$0[1],r$3=handle_case(ign_case$0,r$2);
               return is_charset(r$3)?r$3:[4,k,r$3];
              case 5:
               var r$4=r$0[2],k$0=r$0[1],r$5=handle_case(ign_case$0,r$4);
               return is_charset(r$5)?r$5:[5,k$0,r$5];
              case 6:var r$6=r$0[1];return [6,handle_case(ign_case$0,r$6)];
              case 7:
               var r$7=r$0[1],r$8=handle_case(ign_case$0,r$7);
               return is_charset(r$8)?r$8:[7,r$8];
              case 8:
               var r$9=r$0[1],r$10=handle_case(ign_case$0,r$9);
               return is_charset(r$10)?r$10:[8,r$10];
              case 9:var r$11=r$0[1],ign_case$0=0,r$0=r$11;continue;
              case 10:var r$12=r$0[1],ign_case$0=1,r$0=r$12;continue;
              case 11:
               var
                l$2=r$0[1],
                _aHx_=function(r){return handle_case(ign_case$0,r)},
                l$3=map$0(_aHx_,l$2),
                _aHy_=function(s,r){return inter$0(s,as_set(r))};
               return [0,fold(_aHy_,cany,l$3)];
              case 12:
               var
                l$4=r$0[1],
                _aHz_=function(r){return handle_case(ign_case$0,r)},
                l$5=map$0(_aHz_,l$4),
                _aHA_=function(s,r){return union$0(s,as_set(r))},
                _aHB_=fold(_aHA_,empty$2,l$5);
               return [0,diff$0(cany,_aHB_)];
              case 13:
               var
                r$13=r$0[2],
                r$14=r$0[1],
                _aHC_=handle_case(ign_case$0,r$13),
                _aHD_=as_set(_aHC_),
                _aHE_=diff$0(cany,_aHD_),
                _aHF_=handle_case(ign_case$0,r$14),
                _aHG_=as_set(_aHF_);
               return [0,inter$0(_aHG_,_aHE_)];
              default:
               var r$15=r$0[2],i$0=r$0[1];
               return [14,i$0,handle_case(ign_case$0,r$15)]}},
       compile_1=
        function(regexp)
         {var
           _aHj_=0,
           regexp$0=handle_case(_aHj_,regexp),
           _aHk_=0,
           c=make$5(_aHk_),
           need_lnl=colorize(c,regexp$0),
           match=flatten$1(c),
           ncolor=match[3],
           color_repr=match[2],
           colors=match[1],
           lnl=need_lnl?ncolor:-1,
           ncolor$0=need_lnl?ncolor + 1 | 0:ncolor,
           _aHl_=0,
           ids=create_ids(_aHl_),
           pos=[0,0],
           _aHm_=[0,CSetMap[1]],
           _aHn_=-904640576,
           _aHo_=0,
           _aHp_=0,
           _aHq_=332064784,
           match$0=
            translate(ids,_aHq_,_aHp_,_aHo_,_aHn_,pos,_aHm_,colors,regexp$0),
           kind=match$0[2],
           r=match$0[1],
           _aHr_=332064784,
           r$0=enforce_kind(ids,_aHr_,kind,r);
          return mk_re(r$0,colors,color_repr,ncolor$0,lnl,pos[1] / 2 | 0)},
       anchored=
        function(param)
         {var param$0=param;
          for(;;)
           {var switch$0=0;
            if(typeof param$0 === "number")
             switch(param$0){case 5:case 8:return 1}
            else
             switch(param$0[0])
              {case 1:var l=param$0[1];return exists(anchored,l);
               case 2:var l$0=param$0[1];return for_all(anchored,l$0);
               case 3:
                var i=param$0[2],r=param$0[1],_aHi_=0 < i?1:0;
                if(_aHi_){var param$0=r;continue}
                return _aHi_;
               case 4:
               case 5:
               case 14:var param$1=param$0[2];switch$0 = 1;break;
               case 0:
               case 11:
               case 12:
               case 13:break;
               default:var param$1=param$0[1];switch$0 = 1}
            if(switch$0){var param$0=param$1;continue}
            return 0}},
       str$0=
        function(s)
         {var l=[0,0],_aHe_=caml_ml_string_length(s) - 1 | 0;
          if(! (_aHe_ < 0))
           {var i=_aHe_;
            for(;;)
             {var _aHf_=l[1],_aHg_=caml_string_get(s,i);
              l[1] = [0,[0,csingle(_aHg_)],_aHf_];
              var _aHh_=i - 1 | 0;
              if(0 !== i){var i=_aHh_;continue}
              break}}
          return [1,l[1]]},
       char$0=function(c){return [0,csingle(c)]},
       alt$0=function(l){if(l && ! l[2]){var r=l[1];return r}return [2,l]},
       seq$2=function(l){if(l && ! l[2]){var r=l[1];return r}return [1,l]},
       repn=
        function(r,i,j)
         {if(i < 0)invalid_arg(_jP_);
          var switch$0=0;
          if(j){var j$0=j[1];if(j$0 < i){invalid_arg(_jQ_);switch$0 = 1}}
          return [3,r,i,j]},
       rep$0=function(r){return repn(r,0,0)},
       bos=5,
       shortest=function(r){return [4,-1034406550,r]},
       group=function(r){return [6,r]},
       set$0=
        function(str)
         {var s=[0,empty$2],_aG$_=caml_ml_string_length(str) - 1 | 0,_aG__=0;
          if(! (_aG$_ < 0))
           {var i=_aG__;
            for(;;)
             {var
               _aHa_=s[1],
               _aHb_=caml_string_get(str,i),
               _aHc_=csingle(_aHb_);
              s[1] = union$0(_aHc_,_aHa_);
              var _aHd_=i + 1 | 0;
              if(_aG$_ !== i){var i=_aHd_;continue}
              break}}
          return [0,s[1]]},
       rg=function(c$0,c){return [0,cseq(c$0,c)]},
       any$0=[0,cany],
       _jR_=10,
       _jS_=csingle(_jR_);
      diff$0(cany,_jS_);
      var _jT_=255,_jU_=248;
      rg(_jU_,_jT_);
      var _jV_=246,_jW_=223;
      rg(_jW_,_jV_);
      var _jX_=181;
      char$0(_jX_);
      var _jY_=122,_jZ_=97;
      rg(_jZ_,_jY_);
      var _j0_=222,_j1_=216;
      rg(_j1_,_j0_);
      var _j2_=214,_j3_=192;
      rg(_j3_,_j2_);
      var _j4_=90,_j5_=65;
      rg(_j5_,_j4_);
      var _j6_=186;
      char$0(_j6_);
      var _j7_=170;
      char$0(_j7_);
      var _j8_=57,_j9_=48;
      rg(_j9_,_j8_);
      var _j__=95;
      char$0(_j__);
      var _j$_=127,_ka_=0;
      rg(_ka_,_j$_);
      set$0(_kb_);
      var _kc_=159,_kd_=127;
      rg(_kd_,_kc_);
      var _ke_=31,_kf_=0;
      rg(_kf_,_ke_);
      var _kg_=255,_kh_=160;
      rg(_kh_,_kg_);
      var _ki_=126,_kj_=33;
      rg(_kj_,_ki_);
      var _kk_=255,_kl_=160;
      rg(_kl_,_kk_);
      var _km_=126,_kn_=32;
      rg(_kn_,_km_);
      var _ko_=247;
      char$0(_ko_);
      var _kp_=215;
      char$0(_kp_);
      var _kq_=191,_kr_=187;
      rg(_kr_,_kq_);
      var _ks_=185,_kt_=182;
      rg(_kt_,_ks_);
      var _ku_=180,_kv_=171;
      rg(_kv_,_ku_);
      var _kw_=169,_kx_=160;
      rg(_kx_,_kw_);
      var _ky_=126,_kz_=123;
      rg(_kz_,_ky_);
      var _kA_=96,_kB_=91;
      rg(_kB_,_kA_);
      var _kC_=64,_kD_=58;
      rg(_kD_,_kC_);
      var _kE_=47,_kF_=33;
      rg(_kF_,_kE_);
      var _kG_=13,_kH_=9;
      rg(_kH_,_kG_);
      var _kI_=32;
      char$0(_kI_);
      var _kJ_=70,_kK_=65;
      rg(_kK_,_kJ_);
      var _kL_=102,_kM_=97;
      rg(_kM_,_kL_);
      var
       compile=
        function(r)
         {if(anchored(r))
           var _aG5_=group(r);
          else
           var
            _aG6_=0,
            _aG7_=[0,group(r),_aG6_],
            _aG8_=rep$0(any$0),
            _aG9_=[0,shortest(_aG8_),_aG7_],
            _aG5_=seq$2(_aG9_);
          return compile_1(_aG5_)},
       replace=
        function(opt,len,_aGU_,re,f,s)
         {if(opt)var sth=opt[1],pos=sth;else var pos=0;
          if(_aGU_)var sth$0=_aGU_[1],all=sth$0;else var all=1;
          if(pos < 0)invalid_arg(_kN_);
          if(len)
           {var
             l=len[1],
             _aGV_=l < 0?1:0,
             _aGW_=_aGV_ || (caml_ml_string_length(s) < (pos + l | 0)?1:0);
            if(_aGW_)invalid_arg(_kO_);
            var limit=pos + l | 0}
          else
           var limit=caml_ml_string_length(s);
          var _aGX_=caml_ml_string_length(s),buf=create$1(_aGX_);
          function iter(pos)
           {var pos$0=pos;
            for(;;)
             {var _aGY_=pos$0 < limit?1:0;
              if(_aGY_)
               {var
                 _aGZ_=limit - pos$0 | 0,
                 _aG0_=0,
                 _aG1_=1,
                 match=match_str(_aG1_,_aG0_,re,s,pos$0,_aGZ_);
                if(typeof match === "number")
                 return match?0:add_substring(buf,s,pos$0,limit - pos$0 | 0);
                var
                 substr=match[1],
                 _aG2_=0,
                 match$0=get_ofs(substr,_aG2_),
                 p2=match$0[2],
                 p1=match$0[1],
                 _aG3_=p1 - pos$0 | 0;
                add_substring(buf,s,pos$0,_aG3_);
                var replacing=caml_call1(f,substr);
                add_string(buf,replacing);
                if(all)
                 {if(p1 === p2)
                   {if(p2 < limit)
                     {var _aG4_=caml_string_get(s,p2);add_char(buf,_aG4_)}
                    var pos$1=p2 + 1 | 0}
                  else
                   var pos$1=p2;
                  var pos$0=pos$1;
                  continue}
                return add_substring(buf,s,p2,limit - p2 | 0)}
              return _aGY_}}
          iter(pos);
          return contents(buf)},
       replace_string=
        function(pos,len,all,re,by,s)
         {return replace(pos,len,all,re,function(param){return by},s)},
       fmap=function(f){return f},
       nil=function(param){return 0},
       singleton$3=function(x){return [0,x,0]},
       cons=function(x,xs){return [0,x,xs]},
       append$0=function(x,y){return append(x,y)},
       _kP_=
        [0,
         function(_aGT_){return _aGT_},
         fmap,
         nil,
         singleton$3,
         cons,
         append$0,
         map$0],
       is_control=
        function(c)
         {var _aGN_=c <= 8?1:0;
          if(_aGN_)
           var _aGO_=_aGN_;
          else
           {var _aGP_=11 === c?1:0;
            if(_aGP_)
             var _aGO_=_aGP_;
            else
             {var _aGQ_=12 === c?1:0;
              if(_aGQ_)
               var _aGO_=_aGQ_;
              else
               var
                _aGR_=14 <= c?1:0,
                _aGS_=_aGR_?c <= 31?1:0:_aGR_,
                _aGO_=_aGS_ || (127 === c?1:0)}}
          return _aGO_},
       add_unsafe_char=
        function(b,c)
         {if(34 === c)return add_string(b,_kQ_);
          if(60 <= c)
           {if(! (63 <= c))
             switch(c - 60 | 0)
              {case 0:return add_string(b,_kT_);
               case 1:break;
               default:return add_string(b,_kU_)}}
          else
           if(38 === c)return add_string(b,_kV_);
          if(is_control(c))
           {add_string(b,_kR_);
            var _aGM_=to_string(c);
            add_string(b,_aGM_);
            return add_string(b,_kS_)}
          return add_char(b,c)},
       encode_unsafe_char=
        function(s)
         {var _aGJ_=caml_ml_string_length(s),b=create$1(_aGJ_);
          function _aGK_(_aGL_){return add_unsafe_char(b,_aGL_)}
          iter$1(_aGK_,s);
          return contents(b)},
       _kW_=0,
       _kY_=[0,str$0(_kX_),_kW_],
       _k0_=[0,str$0(_kZ_),_kY_],
       _k1_=0,
       _k3_=[0,bos,[0,str$0(_k2_),_k1_]],
       _k4_=[0,seq$2(_k3_),_k0_],
       _k5_=0,
       _k7_=[0,bos,[0,str$0(_k6_),_k5_]],
       _k8_=[0,seq$2(_k7_),_k4_],
       _k9_=alt$0(_k8_),
       re_end_comment=compile(_k9_),
       escape_comment=
        function(s)
         {function f(g)
           {var _aGI_=0,s=get$4(g,_aGI_);
            return caml_string_notequal(s,_k__)
                    ?caml_string_notequal(s,_k$_)
                      ?caml_string_notequal(s,_la_)
                        ?caml_string_notequal(s,_lb_)?s:_lc_
                        :_ld_
                      :_le_
                    :_lf_}
          return replace(0,0,_lg_,re_end_comment,f,s)},
       pp_number=
        function(fmt,v)
         {if(v == infinity)return str(fmt,_lh_);
          if(v == neg_infinity)return str(fmt,_li_);
          if(v != v)return str(fmt,_lj_);
          var vint=v | 0;
          if(vint == v)
           {var
             div=
              function(n,i)
               {var n$0=n,i$0=i;
                for(;;)
                 {if(0 !== n$0 && 0 === (n$0 % 10 | 0))
                   {var i$1=i$0 + 1 | 0,n$1=n$0 / 10 | 0,n$0=n$1,i$0=i$1;
                    continue}
                  return 2 < i$0
                          ?caml_call3(pp$0(fmt),_lk_,n$0,i$0)
                          :pp(fmt,vint)}};
            return div(vint,0)}
          var s1=caml_call1(sprintf(_ll_),v);
          if(v == caml_float_of_string(s1))return str(fmt,s1);
          var s2=caml_call1(sprintf(_lm_),v);
          return v == caml_float_of_string(s2)
                  ?str(fmt,s2)
                  :caml_call2(pp$0(fmt),_ln_,v)},
       string_of_number=
        function(v){return caml_call2(asprintf(_lo_),pp_number,v)},
       pp_noop=function(fmt,param){return 0},
       Make_fmt=
        function(Xml,_aFH_)
         {function open_box(indent,fmt){return indent?pp_open_box(fmt,0):0}
          function close_box(indent,fmt){return indent?pp_close_box(fmt,0):0}
          function sp(indent,fmt)
           {return indent?pp_print_space(fmt,0):str(fmt,_lp_)}
          function cut(indent,fmt){return indent?pp_print_cut(fmt,0):0}
          var S=_Y_([0,compare$0]),_aFI_=_aFH_[1];
          if(_aFI_)
           var
            _aFJ_=S[1],
            _aFK_=function(s,x){return caml_call2(S[4],x,s)},
            set=fold(_aFK_,_aFJ_,_aFI_),
            is_emptytag=function(x){return caml_call2(S[3],x,set)};
          else
           var is_emptytag=function(param){return 0};
          function pp_encode(encode,indent,fmt,s)
           {var s$0=caml_call1(encode,s);
            return indent
                    ?caml_call3(pp$0(fmt),_lq_,pp_print_text,s$0)
                    :str(fmt,s$0)}
          function pp_sep(indent,param)
           {return param
                    ?function(fmt,param)
                      {function _aGG_(_aGH_){return sp(indent,_aGH_)}
                       return caml_call2(pp$0(fmt),_lr_,_aGG_)}
                    :function(fmt,param){return sp(indent,fmt)}}
          function pp_attrib_value(encode,indent,fmt,a)
           {var _aGx_=Xml[26],match=caml_call1(_aGx_,a);
            switch(match[0])
             {case 0:
               var f=match[1];return caml_call3(pp$0(fmt),_ls_,pp_number,f);
              case 1:var i=match[1];return caml_call2(pp$0(fmt),_lt_,i);
              case 2:
               var s=match[1],_aGy_=caml_call1(encode,s);
               return caml_call2(pp$0(fmt),_lu_,_aGy_);
              default:
               var
                slist=match[2],
                sep=match[1],
                _aGz_=
                 function(_aGE_,_aGF_)
                  {return pp_encode(encode,indent,_aGE_,_aGF_)},
                _aGA_=[0,pp_sep(indent,sep)],
                _aGB_=
                 function(_aGC_,_aGD_){return list(_aGA_,_aGz_,_aGC_,_aGD_)};
               return caml_call3(pp$0(fmt),_lv_,_aGB_,slist)}}
          function pp_attrib(encode,indent,fmt,a)
           {function _aGq_(_aGv_,_aGw_)
             {return pp_attrib_value(encode,indent,_aGv_,_aGw_)}
            var _aGr_=Xml[25],_aGs_=caml_call1(_aGr_,a);
            function _aGt_(_aGu_){return sp(indent,_aGu_)}
            return caml_call5(pp$0(fmt),_lw_,_aGt_,_aGs_,_aGq_,a)}
          function pp_attribs(encode,indent)
           {function _aGk_(_aGo_,_aGp_)
             {return pp_attrib(encode,indent,_aGo_,_aGp_)}
            var _aGl_=[0,pp_noop];
            return function(_aGm_,_aGn_){return list(_aGl_,_aGk_,_aGm_,_aGn_)}}
          function pp_tag_and_attribs(encode,indent,fmt,param)
           {var attrs=param[2],tag=param[1];
            open_box(indent,fmt);
            function _aGh_(_aGj_){return cut(indent,_aGj_)}
            var _aGi_=pp_attribs(encode,indent);
            caml_call5(pp$0(fmt),_lx_,tag,_aGi_,attrs,_aGh_);
            return close_box(indent,fmt)}
          function pp_closedtag(encode,indent,fmt,tag,attrs)
           {if(is_emptytag(tag))
             {var
               _aF9_=[0,tag,attrs],
               _aF__=
                function(_aGf_,_aGg_)
                 {return pp_tag_and_attribs(encode,indent,_aGf_,_aGg_)};
              return caml_call3(pp$0(fmt),_ly_,_aF__,_aF9_)}
            open_box(indent,fmt);
            function _aF$_(_aGe_){return cut(indent,_aGe_)}
            var _aGa_=[0,tag,attrs];
            function _aGb_(_aGc_,_aGd_)
             {return pp_tag_and_attribs(encode,indent,_aGc_,_aGd_)}
            caml_call5(pp$0(fmt),_lz_,_aGb_,_aGa_,_aF$_,tag);
            return close_box(indent,fmt)}
          function pp_elts(encode,indent)
           {function _aF3_(_aF7_,_aF8_)
             {return pp_elt(encode,indent,_aF7_,_aF8_)}
            var _aF4_=[0,function(fmt,param){return cut(indent,fmt)}];
            return function(_aF5_,_aF6_){return list(_aF4_,_aF3_,_aF5_,_aF6_)}}
          function pp_tag(encode,indent,fmt,tag,attrs,children)
           {if(children)
             {open_box(indent,fmt);
              var
               _aFQ_=function(_aF2_){return cut(indent,_aF2_)},
               _aFR_=function(_aF1_){return close_box(indent,_aF1_)},
               _aFS_=pp_elts(encode,indent),
               _aFT_=function(_aF0_){return cut(indent,_aF0_)},
               _aFU_=[0,tag,attrs],
               _aFV_=
                function(_aFY_,_aFZ_)
                 {return pp_tag_and_attribs(encode,indent,_aFY_,_aFZ_)},
               _aFW_=function(_aFX_){return open_box(indent,_aFX_)};
              caml_call10
               (pp$0(fmt),
                _lA_,
                _aFW_,
                _aFV_,
                _aFU_,
                _aFT_,
                _aFS_,
                children,
                _aFR_,
                _aFQ_,
                tag);
              return close_box(indent,fmt)}
            return pp_closedtag(encode,indent,fmt,tag,attrs)}
          function pp_elt(encode,indent,fmt,elt)
           {var _aFO_=Xml[27],match=caml_call1(_aFO_,elt);
            if(typeof match === "number")
             return 0;
            else
             switch(match[0])
              {case 0:
                var texte=match[1],_aFP_=escape_comment(texte);
                return caml_call2(pp$0(fmt),_lB_,_aFP_);
               case 1:var texte$0=match[1];return str(fmt,texte$0);
               case 2:
                var texte$1=match[1];
                return pp_encode(encode,indent,fmt,texte$1);
               case 3:var e=match[1];return caml_call2(pp$0(fmt),_lC_,e);
               case 4:
                var xh_attrs=match[2],name=match[1];
                return pp_closedtag(encode,indent,fmt,name,xh_attrs);
               default:
                var xh_taglist=match[3],xh_attrs$0=match[2],name$0=match[1];
                return pp_tag(encode,indent,fmt,name$0,xh_attrs$0,xh_taglist)}}
          function pp(opt,_aFL_,param)
           {if(opt)
             var sth=opt[1],encode=sth;
            else
             var encode=encode_unsafe_char;
            if(_aFL_)var sth$0=_aFL_[1],indent=sth$0;else var indent=0;
            return function(_aFM_,_aFN_)
             {return pp_elt(encode,indent,_aFM_,_aFN_)}}
          return [0,
                  open_box,
                  close_box,
                  sp,
                  cut,
                  S,
                  is_emptytag,
                  pp_encode,
                  pp_sep,
                  pp_attrib_value,
                  pp_attrib,
                  pp_attribs,
                  pp_tag_and_attribs,
                  pp_closedtag,
                  pp_tag,
                  pp_elt,
                  pp_elts,
                  pp]},
       Make$8=
        function(Xml,I,O)
         {var symbol=O[2];
          function separator_to_string(param){return param?_lD_:_lE_}
          function attrib_value_to_string(encode,a)
           {var _aFB_=Xml[26],match=caml_call1(_aFB_,a);
            switch(match[0])
             {case 0:
               var f=match[1],_aFC_=string_of_number(f);
               return caml_call1(sprintf(_lF_),_aFC_);
              case 1:var i=match[1];return caml_call1(sprintf(_lG_),i);
              case 2:
               var s=match[1],_aFD_=caml_call1(encode,s);
               return caml_call1(sprintf(_lH_),_aFD_);
              default:
               var
                slist=match[2],
                sep=match[1],
                _aFE_=separator_to_string(sep),
                _aFF_=join(_aFE_,slist),
                _aFG_=caml_call1(encode,_aFF_);
               return caml_call1(sprintf(_lI_),_aFG_)}}
          function attrib_to_string(encode,a)
           {var
             _aFy_=attrib_value_to_string(encode,a),
             _aFz_=Xml[25],
             _aFA_=caml_call1(_aFz_,a);
            return caml_call2(sprintf(_lJ_),_aFA_,_aFy_)}
          function xh_print_attrs(encode,attrs)
           {if(attrs)
             {var
               queue=attrs[2],
               attr=attrs[1],
               _aFu_=xh_print_attrs(encode,queue),
               _aFv_=attrib_to_string(encode,attr),
               _aFw_=cat(_lK_,_aFv_),
               _aFx_=O[3];
              return caml_call2(symbol,caml_call1(_aFx_,_aFw_),_aFu_)}
            return O[1]}
          function xh_print_closedtag(encode,tag,attrs)
           {if(0 !== I[1])
             {var _aFl_=I[1];
              if(! mem(tag,_aFl_))
               {var
                 _aFm_=cat(tag,_lN_),
                 _aFn_=cat(_lO_,_aFm_),
                 _aFo_=O[3],
                 _aFp_=caml_call1(_aFo_,_aFn_),
                 _aFq_=xh_print_attrs(encode,attrs),
                 _aFr_=cat(_lP_,tag),
                 _aFs_=O[3],
                 _aFt_=caml_call1(_aFs_,_aFr_);
                return caml_call2(symbol,caml_call2(symbol,_aFt_,_aFq_),_aFp_)}}
            var
             _aFf_=O[3],
             _aFg_=caml_call1(_aFf_,_lL_),
             _aFh_=xh_print_attrs(encode,attrs),
             _aFi_=cat(_lM_,tag),
             _aFj_=O[3],
             _aFk_=caml_call1(_aFj_,_aFi_);
            return caml_call2(symbol,caml_call2(symbol,_aFk_,_aFh_),_aFg_)}
          function xh_print_taglist(encode,taglist)
           {var taglist$0=taglist;
            for(;;)
             {if(taglist$0)
               {var
                 queue=taglist$0[2],
                 elt=taglist$0[1],
                 _aE2_=Xml[27],
                 match=caml_call1(_aE2_,elt);
                if(typeof match === "number")
                 {var taglist$0=queue;continue}
                else
                 switch(match[0])
                  {case 0:
                    var
                     texte=match[1],
                     _aE3_=xh_print_taglist(encode,queue),
                     _aE4_=caml_call1(encode,texte),
                     _aE5_=cat(_aE4_,_lU_),
                     _aE6_=cat(_lV_,_aE5_),
                     _aE7_=O[3];
                    return caml_call2(symbol,caml_call1(_aE7_,_aE6_),_aE3_);
                   case 1:
                    var
                     texte$0=match[1],
                     _aE8_=xh_print_taglist(encode,queue),
                     _aE9_=O[3];
                    return caml_call2(symbol,caml_call1(_aE9_,texte$0),_aE8_);
                   case 2:
                    var
                     texte$1=match[1],
                     _aE__=xh_print_taglist(encode,queue),
                     _aE$_=caml_call1(encode,texte$1),
                     _aFa_=O[3];
                    return caml_call2(symbol,caml_call1(_aFa_,_aE$_),_aE__);
                   case 3:
                    var
                     e=match[1],
                     _aFb_=xh_print_taglist(encode,queue),
                     _aFc_=cat(e,_lW_),
                     _aFd_=cat(_lX_,_aFc_),
                     _aFe_=O[3];
                    return caml_call2(symbol,caml_call1(_aFe_,_aFd_),_aFb_);
                   case 4:
                    var xh_attrs=match[2],name=match[1];
                    return print_nodes(encode,name,xh_attrs,0,queue);
                   default:
                    var xh_taglist=match[3],xh_attrs$0=match[2],name$0=match[1];
                    return print_nodes
                            (encode,name$0,xh_attrs$0,xh_taglist,queue)}}
              return O[1]}}
          function print_nodes(encode,name,xh_attrs,xh_taglist,queue)
           {var _aE1_=xh_print_taglist(encode,queue);
            return caml_call2
                    (symbol,xh_print_tag(encode,name,xh_attrs,xh_taglist),_aE1_)}
          function xh_print_tag(encode,tag,attrs,taglist)
           {if(0 === taglist)return xh_print_closedtag(encode,tag,attrs);
            var
             _aEO_=cat(tag,_lQ_),
             _aEP_=cat(_lR_,_aEO_),
             _aEQ_=O[3],
             _aER_=caml_call1(_aEQ_,_aEP_),
             _aES_=xh_print_taglist(encode,taglist),
             _aET_=O[3],
             _aEU_=caml_call1(_aET_,_lS_),
             _aEV_=xh_print_attrs(encode,attrs),
             _aEW_=cat(_lT_,tag),
             _aEX_=O[3],
             _aEY_=caml_call1(_aEX_,_aEW_),
             _aEZ_=caml_call2(symbol,_aEY_,_aEV_),
             _aE0_=caml_call2(symbol,_aEZ_,_aEU_);
            return caml_call2(symbol,caml_call2(symbol,_aE0_,_aES_),_aER_)}
          function print_list(opt,foret)
           {if(opt)
             var sth=opt[1],encode=sth;
            else
             var encode=encode_unsafe_char;
            var _aEN_=xh_print_taglist(encode,foret);
            return caml_call1(O[4],_aEN_)}
          return [0,
                  symbol,
                  separator_to_string,
                  attrib_value_to_string,
                  attrib_to_string,
                  xh_print_attrs,
                  xh_print_closedtag,
                  xh_print_tag,
                  print_nodes,
                  xh_print_taglist,
                  print_list]},
       Simple_output=
        function(M)
         {function empty(param){return 0}
          function concat(f1,f2,param)
           {var _aEM_=0;caml_call1(f1,_aEM_);return caml_call1(f2,0)}
          function put(s,param){return caml_call1(M[1],s)}
          function make(f){return caml_call1(f,0)}
          return [0,empty,concat,put,make]},
       Make_simple=
        function(Xml,I)
         {function print_list(output)
           {var _aEH_=Simple_output([0,output]);
            function _aEI_(_aEK_,_aEL_){return Make$8(Xml,_aEK_,_aEL_)}
            return function(_aEJ_){return _aEI_(I,_aEJ_)}(_aEH_)[10]}
          return [0,print_list]},
       _lY_=function(_aEG_,_aEF_){return [0,Make_fmt(_aEG_,_aEF_)[17]]},
       uri_of_string=function(s){return s},
       string_of_uri=function(s){return s},
       acontent=function(param){var a=param[2];return a},
       aname=function(param){var name=param[1];return name},
       float_attrib=function(name,value){return [0,name,[0,value]]},
       int_attrib=function(name,value){return [0,name,[1,value]]},
       string_attrib=function(name,value){return [0,name,[2,value]]},
       space_sep_attrib=function(name,values){return [0,name,[3,0,values]]},
       comma_sep_attrib=function(name,values){return [0,name,[3,1,values]]},
       event_handler_attrib=function(name,value){return [0,name,[2,value]]},
       mouse_event_handler_attrib=
        function(name,value){return [0,name,[2,value]]},
       keyboard_event_handler_attrib=
        function(name,value){return [0,name,[2,value]]},
       touch_event_handler_attrib=
        function(name,value){return [0,name,[2,value]]},
       uri_attrib=function(name,value){return [0,name,[2,value]]},
       uris_attrib=function(name,values){return [0,name,[3,0,values]]},
       content=function(elt){return elt},
       empty$5=function(param){return 0},
       comment=function(c){return [0,c]},
       pcdata=function(d){return [2,d]},
       encodedpcdata=function(d){return [1,d]},
       entity=function(e){return [3,e]},
       _l0_=str$0(_lZ_),
       re_end_cdata=compile(_l0_),
       encoded_cdata=
        function(s1,s2,s)
         {var
           _aEC_=0,
           _aED_=0,
           _aEE_=replace_string(_aED_,_aEC_,_l2_,re_end_cdata,_l1_,s);
          return encodedpcdata(caml_call3(sprintf(_l3_),s1,_aEE_,s2))},
       cdata=function(_aEB_){return encoded_cdata(_l5_,_l4_,_aEB_)},
       cdata_script=function(_aEA_){return encoded_cdata(_l7_,_l6_,_aEA_)},
       cdata_style=function(_aEz_){return encoded_cdata(_l9_,_l8_,_aEz_)},
       leaf=
        function(opt,name)
         {if(opt)var sth=opt[1],a=sth;else var a=0;return [4,name,a]},
       node=
        function(opt,name,children)
         {if(opt)var sth=opt[1],a=sth;else var a=0;return [5,name,a,children]},
       _l__=[0,0],
       _l$_=
        [0,
         _kP_,
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty$5,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style,
         aname,
         acontent,
         content];
      (function(_aEy_){return Make_simple(_l$_,_aEy_)}(_l__));
      var
       _ma_=[0,0],
       _mb_=
        [0,
         _kP_,
         string_of_uri,
         uri_of_string,
         float_attrib,
         int_attrib,
         string_attrib,
         space_sep_attrib,
         comma_sep_attrib,
         event_handler_attrib,
         mouse_event_handler_attrib,
         keyboard_event_handler_attrib,
         touch_event_handler_attrib,
         uri_attrib,
         uris_attrib,
         empty$5,
         comment,
         pcdata,
         encodedpcdata,
         entity,
         leaf,
         node,
         cdata,
         cdata_script,
         cdata_style,
         aname,
         acontent,
         content],
       pp$1=function(_aEx_){return _lY_(_mb_,_aEx_)}(_ma_)[1],
       remove$3=
        function(node)
         {var
           _aEv_=node[4],
           _aEw_=
            _aEv_
             ?(node[4] = 0,node[1][2] = node[2],node[2][1] = node[1],0)
             :_aEv_;
          return _aEw_},
       create$10=
        function(param)
         {var seq=[],_aEu_=[0,seq,seq];
          caml_update_dummy(seq,_aEu_);
          return seq},
       compare$15=function(_aEt_,_aEs_){return caml_compare(_aEt_,_aEs_)},
       Storage_map=_af_([0,compare$15]),
       to_public_promise=function(_aEr_){return _aEr_},
       to_internal_promise=function(p){return p},
       identical=
        function(p1,p2)
         {var _aEq_=to_public_promise(p2);
          return to_public_promise(p1) === _aEq_?1:0},
       underlying=
        function(p)
         {var _aEp_=p[1];
          switch(_aEp_[0])
           {case 0:return p;
            case 1:return p;
            case 2:return p;
            default:
             var p$0=_aEp_[1],p$1=underlying(p$0);
             if(1 - identical(p$1,p$0))p[1] = [3,p$1];
             return p$1}},
       set_promise_state=function(p,state){p[1] = state;return p},
       may_now_be_proxy=function(p){return p},
       current_storage=[0,Storage_map[1]],
       concat_regular_callbacks=
        function(l1,l2)
         {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[0,l1,l2]},
       concat_cancel_callbacks=
        function(l1,l2)
         {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[0,l1,l2]},
       clean_up_callback_cells=
        function(callbacks)
         {if(typeof callbacks !== "number")
           switch(callbacks[0])
            {case 0:
              var
               l2=callbacks[2],
               l1=callbacks[1],
               l1$0=clean_up_callback_cells(l1),
               l2$0=clean_up_callback_cells(l2);
              return concat_regular_callbacks(l1$0,l2$0);
             case 2:if(! callbacks[1][1])return 0;break
             }
          return callbacks},
       merge_callbacks=
        function(from,into)
         {var
           _aEk_=from[1],
           _aEl_=into[1],
           regular_callbacks=concat_regular_callbacks(_aEl_,_aEk_),
           cleanups_deferred=into[4] + from[4] | 0;
          if(42 < cleanups_deferred)
           var
            cleanups_deferred$0=0,
            _aEm_=clean_up_callback_cells(regular_callbacks),
            cleanups_deferred$1=cleanups_deferred$0,
            regular_callbacks$0=_aEm_;
          else
           var
            cleanups_deferred$1=cleanups_deferred,
            regular_callbacks$0=regular_callbacks;
          var
           _aEn_=from[2],
           _aEo_=into[2],
           cancel_callbacks=concat_cancel_callbacks(_aEo_,_aEn_);
          into[1] = regular_callbacks$0;
          into[2] = cancel_callbacks;
          into[4] = cleanups_deferred$1;
          return 0},
       add_regular_callback_list_node=
        function(callbacks,node)
         {var
           _aEj_=callbacks[1],
           node$0=typeof _aEj_ === "number"?node:[0,node,_aEj_];
          callbacks[1] = node$0;
          return 0},
       add_implicitly_removed_callbac=
        function(callbacks,f)
         {return add_regular_callback_list_node(callbacks,[1,f])},
       _mc_=
        function(exn)
         {prerr_string(_md_);
          var _aEh_=to_string$5(exn);
          prerr_string(_aEh_);
          var _aEi_=10;
          prerr_char(_aEi_);
          print_backtrace(stderr);
          flush(stderr);
          return exit(2)},
       handle_with_async_exception_ho=
        function(f,v)
         {try
           {var _aEg_=caml_call1(f,v);return _aEg_}
          catch(exn){exn = caml_wrap_exception(exn);return _mc_(exn)}},
       Canceled=[248,_me_,caml_fresh_oo_id(0)],
       run_callbacks=
        function(callbacks,result)
         {function run_cancel_callbacks(fs)
           {function iter_callback_list$0(counter,fs,rest)
             {var fs$0=fs,rest$0=rest;
              for(;;)
               if(typeof fs$0 === "number")
                {if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return iter_list(counter$0,rest$0)}
                 return caml_trampoline_return(iter_list,[0,rest$0])}
               else
                switch(fs$0[0])
                 {case 0:
                   var
                    fs$1=fs$0[2],
                    fs$2=fs$0[1],
                    rest$1=[0,fs$1,rest$0],
                    fs$0=fs$2,
                    rest$0=rest$1;
                   continue;
                  case 1:
                   var f=fs$0[2],storage=fs$0[1];
                   current_storage[1] = storage;
                   var _aEf_=0;
                   handle_with_async_exception_ho(f,_aEf_);
                   if(counter < 50)
                    {var counter$1=counter + 1 | 0;
                     return iter_list(counter$1,rest$0)}
                   return caml_trampoline_return(iter_list,[0,rest$0]);
                  default:
                   var node=fs$0[1];
                   remove$3(node);
                   if(counter < 50)
                    {var counter$2=counter + 1 | 0;
                     return iter_list(counter$2,rest$0)}
                   return caml_trampoline_return(iter_list,[0,rest$0])}}
            function iter_list(counter,rest)
             {if(rest)
               {var rest$0=rest[2],fs=rest[1];
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return iter_callback_list$0(counter$0,fs,rest$0)}
                return caml_trampoline_return
                        (iter_callback_list$0,[0,fs,rest$0])}
              return 0}
            function iter_callback_list(fs,rest)
             {return caml_trampoline(iter_callback_list$0(0,fs,rest))}
            return iter_callback_list(fs,0)}
          function run_regular_callbacks(fs)
           {function iter_callback_list$0(counter,fs,rest)
             {var fs$0=fs,rest$0=rest;
              for(;;)
               if(typeof fs$0 === "number")
                {if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return iter_list(counter$0,rest$0)}
                 return caml_trampoline_return(iter_list,[0,rest$0])}
               else
                switch(fs$0[0])
                 {case 0:
                   var
                    fs$1=fs$0[2],
                    fs$2=fs$0[1],
                    rest$1=[0,fs$1,rest$0],
                    fs$0=fs$2,
                    rest$0=rest$1;
                   continue;
                  case 1:
                   var f=fs$0[1];
                   caml_call1(f,result);
                   if(counter < 50)
                    {var counter$1=counter + 1 | 0;
                     return iter_list(counter$1,rest$0)}
                   return caml_trampoline_return(iter_list,[0,rest$0]);
                  default:
                   var _aEe_=fs$0[1][1];
                   if(_aEe_)
                    {var f$0=_aEe_[1];
                     caml_call1(f$0,result);
                     if(counter < 50)
                      {var counter$2=counter + 1 | 0;
                       return iter_list(counter$2,rest$0)}
                     return caml_trampoline_return(iter_list,[0,rest$0])}
                   if(counter < 50)
                    {var counter$3=counter + 1 | 0;
                     return iter_list(counter$3,rest$0)}
                   return caml_trampoline_return(iter_list,[0,rest$0])}}
            function iter_list(counter,rest)
             {if(rest)
               {var rest$0=rest[2],fs=rest[1];
                if(counter < 50)
                 {var counter$0=counter + 1 | 0;
                  return iter_callback_list$0(counter$0,fs,rest$0)}
                return caml_trampoline_return
                        (iter_callback_list$0,[0,fs,rest$0])}
              return 0}
            function iter_callback_list(fs,rest)
             {return caml_trampoline(iter_callback_list$0(0,fs,rest))}
            return iter_callback_list(fs,0)}
          if(1 === result[0])
           var _aEd_=result[1] === Canceled?1:0,is_canceled=_aEd_;
          else
           var is_canceled=0;
          if(is_canceled){var _aEc_=callbacks[2];run_cancel_callbacks(_aEc_)}
          return run_regular_callbacks(callbacks[1])},
       current_callback_nesting_depth=[0,0],
       default_maximum_callback_nesti=42,
       _mf_=0,
       deferred_callbacks=create$0(_mf_),
       enter_resolution_loop=
        function(param)
         {current_callback_nesting_depth[1]
          =
          current_callback_nesting_depth[1]
          +
          1
          |
          0;
          var storage_snapshot=current_storage[1];
          return storage_snapshot},
       leave_resolution_loop=
        function(storage_snapshot)
         {if(1 === current_callback_nesting_depth[1])
           for(;;)
            {if(! is_empty$0(deferred_callbacks))
              {var
                match=take(deferred_callbacks),
                result=match[2],
                callbacks=match[1];
               run_callbacks(callbacks,result);
               continue}
             break}
          current_callback_nesting_depth[1]
          =
          current_callback_nesting_depth[1]
          -
          1
          |
          0;
          current_storage[1] = storage_snapshot;
          return 0},
       run_in_resolution_loop=
        function(f)
         {var
           _aEa_=0,
           storage_snapshot=enter_resolution_loop(_aEa_),
           _aEb_=0,
           result=caml_call1(f,_aEb_);
          leave_resolution_loop(storage_snapshot);
          return result},
       run_callbacks_or_defer_them=
        function(opt,_aD$_,callbacks,result)
         {if(opt)
           var sth=opt[1],allow_deferring=sth;
          else
           var allow_deferring=1;
          if(_aD$_)
           var sth$0=_aD$_[1],maximum_callback_nesting_depth=sth$0;
          else
           var maximum_callback_nesting_depth=default_maximum_callback_nesti;
          var
           should_defer=
            allow_deferring
             ?maximum_callback_nesting_depth
               <=
               current_callback_nesting_depth[1]
               ?1
               :0
             :allow_deferring;
          return should_defer
                  ?add([0,callbacks,result],deferred_callbacks)
                  :run_in_resolution_loop
                    (function(param){return run_callbacks(callbacks,result)})},
       resolve=
        function(allow_deferring,maximum_callback_nesting_depth,p,result)
         {var match=p[1],callbacks=match[1],p$0=set_promise_state(p,result);
          run_callbacks_or_defer_them
           (allow_deferring,maximum_callback_nesting_depth,callbacks,result);
          return p$0},
       run_callback_or_defer_it=
        function(opt,f,if_deferred)
         {if(opt)
           var sth=opt[1],run_immediately_and_ensure_tai=sth;
          else
           var run_immediately_and_ensure_tai=0;
          if(run_immediately_and_ensure_tai)return caml_call1(f,0);
          var should_defer=42 <= current_callback_nesting_depth[1]?1:0;
          if(should_defer)
           {var
             _aD9_=0,
             match=caml_call1(if_deferred,_aD9_),
             deferred_result=match[3],
             deferred_callback=match[2],
             immediate_result=match[1],
             deferred_record=[0,[1,deferred_callback],0,0,0],
             _aD__=[0,deferred_record,deferred_result];
            add(_aD__,deferred_callbacks);
            return immediate_result}
          return run_in_resolution_loop
                  (function(param){return caml_call1(f,0)})},
       return$0=function(v){return to_public_promise([0,[0,v]])},
       fail=function(exn){return to_public_promise([0,[1,exn]])},
       _mg_=0;
      return$0(_mg_);
      var _mh_=0;
      return$0(_mh_);
      var _mi_=0;
      return$0(_mi_);
      var _mj_=1;
      return$0(_mj_);
      var _mk_=0;
      return$0(_mk_);
      var
       new_pending=
        function(how_to_cancel)
         {var state=[2,[0,0,0,how_to_cancel,0]];return [0,state]},
       make_into_proxy=
        function(outer_promise,user_provided_promise)
         {var p=underlying(user_provided_promise);
          if(identical(p,outer_promise))return p;
          var _aD7_=p[1];
          switch(_aD7_[0])
           {case 1:return resolve(_mm_,0,outer_promise,p[1]);
            case 2:
             var
              p_callbacks=_aD7_[1],
              match=outer_promise[1],
              outer_callbacks=match[1];
             merge_callbacks(p_callbacks,outer_callbacks);
             outer_callbacks[3] = p_callbacks[3];
             var _aD8_=[3,outer_promise];
             set_promise_state(p,_aD8_);
             return outer_promise;
            default:return resolve(_ml_,0,outer_promise,p[1])}},
       backtrace_bind=
        function(add_loc,p,f)
         {var p$0=to_internal_promise(p),p$1=underlying(p$0);
          function create_result_promise_and_call(param)
           {var
             _aD2_=[0,p$1],
             p=new_pending(_aD2_),
             saved_storage=current_storage[1];
            function callback(p_result)
             {if(1 === p_result[0])
               {var
                 exn=p_result[1],
                 p$4=may_now_be_proxy(p),
                 p$5=underlying(p$4),
                 _aD5_=[1,caml_call1(add_loc,exn)],
                 _aD6_=0;
                resolve(_mn_,_aD6_,p$5,_aD5_);
                return 0}
              var v=p_result[1];
              current_storage[1] = saved_storage;
              try
               {var _aD4_=caml_call1(f,v),p$0=_aD4_}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                var _aD3_=caml_call1(add_loc,exn),p$0=fail(_aD3_)}
              var
               p$1=to_internal_promise(p$0),
               p$2=may_now_be_proxy(p),
               p$3=underlying(p$2);
              make_into_proxy(p$3,p$1);
              return 0}
            return [0,to_public_promise(p),callback]}
          var _aDY_=p$1[1];
          switch(_aDY_[0])
           {case 1:
             var exn=_aDY_[1];
             return to_public_promise([0,[1,caml_call1(add_loc,exn)]]);
            case 2:
             var
              p_callbacks=_aDY_[1],
              _aD0_=0,
              match=create_result_promise_and_call(_aD0_),
              callback=match[2],
              p$2=match[1];
             add_implicitly_removed_callbac(p_callbacks,callback);
             return p$2;
            default:
             var
              v=_aDY_[1],
              _aDZ_=
               function(param)
                {var
                  _aD1_=0,
                  match=create_result_promise_and_call(_aD1_),
                  callback=match[2],
                  p=match[1];
                 return [0,p,callback,p$1[1]]};
             return run_callback_or_defer_it
                     (_mo_,function(param){return caml_call1(f,v)},_aDZ_)}},
       _mp_=0;
      create$10(_mp_);
      var
       OTProduct=
        function(X,Y)
         {function compare(param,_aDW_)
           {var
             y2=_aDW_[2],
             x2=_aDW_[1],
             y1=param[2],
             x1=param[1],
             _aDX_=X[1],
             cv=caml_call2(_aDX_,x1,x2);
            return 0 === cv?caml_call2(Y[1],y1,y2):cv}
          return [0,compare]},
       Dfs=
        function(G)
         {var _aB7_=G[2],H=Make$1([0,_aB7_[3],_aB7_[2]]);
          function fold(f,i,g)
           {var
             _aDN_=97,
             _aDO_=H[1],
             h=caml_call1(_aDO_,_aDN_),
             _aDP_=0,
             s=create(_aDP_);
            function push$0(v)
             {var _aDS_=H[11],_aDT_=1 - caml_call2(_aDS_,h,v);
              if(_aDT_)
               {var _aDU_=0,_aDV_=H[5];
                caml_call3(_aDV_,h,v,_aDU_);
                return push(v,s)}
              return _aDT_}
            function loop(acc)
             {var acc$0=acc;
              for(;;)
               {if(is_empty(s))return acc$0;
                var v=pop(s),acc$1=caml_call2(f,v,acc$0),_aDR_=G[5];
                caml_call3(_aDR_,push$0,g,v);
                var acc$0=acc$1;
                continue}}
            function _aDQ_(v,s){push$0(v);return loop(s)}
            return caml_call3(G[4],_aDQ_,g,i)}
          function iter(opt,_aDF_,g)
           {if(opt)
             var sth=opt[1],pre=sth;
            else
             var pre=function(param){return 0};
            if(_aDF_)
             var sth$0=_aDF_[1],post=sth$0;
            else
             var post=function(param){return 0};
            var _aDG_=97,_aDH_=H[1],h=caml_call1(_aDH_,_aDG_);
            function visit(v)
             {var _aDI_=H[11],_aDJ_=1 - caml_call2(_aDI_,h,v);
              if(_aDJ_)
               {var _aDK_=0,_aDL_=H[5];
                caml_call3(_aDL_,h,v,_aDK_);
                caml_call1(pre,v);
                var _aDM_=G[5];
                caml_call3(_aDM_,visit,g,v);
                return caml_call1(post,v)}
              return _aDJ_}
            return caml_call2(G[3],visit,g)}
          function postfix(post,g){return iter(0,[0,post],g)}
          function fold_component(f,i,g,v0)
           {var
             _aDx_=97,
             _aDy_=H[1],
             h=caml_call1(_aDy_,_aDx_),
             _aDz_=0,
             s=create(_aDz_);
            function push$0(v)
             {var _aDB_=H[11],_aDC_=1 - caml_call2(_aDB_,h,v);
              if(_aDC_)
               {var _aDD_=0,_aDE_=H[5];
                caml_call3(_aDE_,h,v,_aDD_);
                return push(v,s)}
              return _aDC_}
            push$0(v0);
            function loop(acc)
             {var acc$0=acc;
              for(;;)
               {if(is_empty(s))return acc$0;
                var v=pop(s),acc$1=caml_call2(f,v,acc$0),_aDA_=G[5];
                caml_call3(_aDA_,push$0,g,v);
                var acc$0=acc$1;
                continue}}
            return loop(i)}
          function iter_component(opt,_aDo_,g,v)
           {if(opt)
             var sth=opt[1],pre=sth;
            else
             var pre=function(param){return 0};
            if(_aDo_)
             var sth$0=_aDo_[1],post=sth$0;
            else
             var post=function(param){return 0};
            var _aDp_=97,_aDq_=H[1],h=caml_call1(_aDq_,_aDp_);
            function visit(v)
             {var _aDr_=0,_aDs_=H[5];
              caml_call3(_aDs_,h,v,_aDr_);
              caml_call1(pre,v);
              function _aDt_(w)
               {var _aDv_=H[11],_aDw_=1 - caml_call2(_aDv_,h,w);
                return _aDw_?visit(w):_aDw_}
              var _aDu_=G[5];
              caml_call3(_aDu_,_aDt_,g,v);
              return caml_call1(post,v)}
            return visit(v)}
          function postfix_component(post,g)
           {var _aDl_=[0,post],_aDm_=0;
            return function(_aDn_){return iter_component(_aDm_,_aDl_,g,_aDn_)}}
          function _aB8_(g)
           {var
             _aC4_=97,
             _aC5_=H[1],
             h=caml_call1(_aC5_,_aC4_),
             _aC6_=0,
             stack=create(_aC6_);
            function loop(param)
             {for(;;)
               {if(is_empty(stack))return 0;
                var v=top(stack),_aDb_=H[11];
                if(caml_call2(_aDb_,h,v))
                 {var _aDc_=0,_aDd_=H[10];
                  caml_call3(_aDd_,h,v,_aDc_);
                  pop(stack)}
                else
                 {var _aDe_=1,_aDf_=H[5];
                  caml_call3(_aDf_,h,v,_aDe_);
                  var
                   _aDg_=
                    function(w)
                     {try
                       {var _aDi_=H[7],_aDj_=caml_call2(_aDi_,h,w);
                        if(_aDj_)throw Exit;
                        return _aDj_}
                      catch(_aDk_)
                       {_aDk_ = caml_wrap_exception(_aDk_);
                        if(_aDk_ === Not_found)return push(w,stack);
                        throw _aDk_}},
                   _aDh_=G[5];
                  caml_call3(_aDh_,_aDg_,g,v)}
                continue}}
            try
             {var
               _aC7_=
                function(v)
                 {var _aC$_=H[11],_aDa_=1 - caml_call2(_aC$_,h,v);
                  return _aDa_?(push(v,stack),loop(0)):_aDa_},
               _aC8_=G[3];
              caml_call2(_aC8_,_aC7_,g);
              var _aC9_=0;
              return _aC9_}
            catch(_aC__)
             {_aC__ = caml_wrap_exception(_aC__);
              if(_aC__ === Exit)return 1;
              throw _aC__}}
          function has_cycle_undirected(g)
           {var
             _aCB_=97,
             _aCC_=H[1],
             h=caml_call1(_aCC_,_aCB_),
             _aCD_=97,
             _aCE_=H[1],
             father=caml_call1(_aCE_,_aCD_);
            function is_father(u,v)
             {try
               {var
                 _aCZ_=H[7],
                 _aC0_=caml_call2(_aCZ_,father,v),
                 _aC1_=G[2][3],
                 _aC2_=caml_call2(_aC1_,_aC0_,u);
                return _aC2_}
              catch(_aC3_)
               {_aC3_ = caml_wrap_exception(_aC3_);
                if(_aC3_ === Not_found)return 0;
                throw _aC3_}}
            var _aCF_=0,stack=create(_aCF_);
            function loop(param)
             {for(;;)
               {if(is_empty(stack))return 0;
                var v=top(stack),_aCM_=H[11];
                if(caml_call2(_aCM_,h,v))
                 {var _aCN_=H[6];
                  caml_call2(_aCN_,father,v);
                  var _aCO_=0,_aCP_=H[10];
                  caml_call3(_aCP_,h,v,_aCO_);
                  pop(stack)}
                else
                 {var _aCQ_=1,_aCR_=H[5];
                  caml_call3(_aCR_,h,v,_aCQ_);
                  var
                   _aCS_=
                    function(v)
                      {return function(w)
                        {try
                          {var
                            _aCV_=H[7],
                            _aCW_=caml_call2(_aCV_,h,w),
                            _aCX_=_aCW_?1 - is_father(w,v):_aCW_;
                           if(_aCX_)throw Exit;
                           return _aCX_}
                         catch(_aCY_)
                          {_aCY_ = caml_wrap_exception(_aCY_);
                           if(_aCY_ === Not_found)
                            {var _aCU_=H[5];
                             caml_call3(_aCU_,father,w,v);
                             return push(w,stack)}
                           throw _aCY_}}}
                     (v),
                   _aCT_=G[5];
                  caml_call3(_aCT_,_aCS_,g,v)}
                continue}}
            try
             {var
               _aCG_=
                function(v)
                 {var _aCK_=H[11],_aCL_=1 - caml_call2(_aCK_,h,v);
                  return _aCL_?(push(v,stack),loop(0)):_aCL_},
               _aCH_=G[3];
              caml_call2(_aCH_,_aCG_,g);
              var _aCI_=0;
              return _aCI_}
            catch(_aCJ_)
             {_aCJ_ = caml_wrap_exception(_aCJ_);
              if(_aCJ_ === Exit)return 1;
              throw _aCJ_}}
          function has_cycle(g){return G[1]?_aB8_(g):has_cycle_undirected(g)}
          function iter$0(f,g)
           {var
             _aCo_=97,
             _aCp_=H[1],
             h=caml_call1(_aCp_,_aCo_),
             _aCq_=0,
             stack=create(_aCq_);
            function loop(param)
             {for(;;)
               {if(is_empty(stack))return 0;
                var v=pop(stack),_aCu_=H[11];
                if(1 - caml_call2(_aCu_,h,v))
                 {var _aCv_=0,_aCw_=H[5];
                  caml_call3(_aCw_,h,v,_aCv_);
                  caml_call1(f,v);
                  var
                   _aCx_=
                    function(w)
                     {var _aCz_=H[11],_aCA_=1 - caml_call2(_aCz_,h,w);
                      return _aCA_?push(w,stack):_aCA_},
                   _aCy_=G[5];
                  caml_call3(_aCy_,_aCx_,g,v)}
                continue}}
            function _aCr_(v)
             {var _aCs_=H[11],_aCt_=1 - caml_call2(_aCs_,h,v);
              return _aCt_?(push(v,stack),loop(0)):_aCt_}
            return caml_call2(G[3],_aCr_,g)}
          function iter_component$0(f,g,v0)
           {var
             _aCe_=97,
             _aCf_=H[1],
             h=caml_call1(_aCf_,_aCe_),
             _aCg_=0,
             stack=create(_aCg_);
            push(v0,stack);
            for(;;)
             {if(is_empty(stack))return 0;
              var v=pop(stack),_aCh_=H[11];
              if(1 - caml_call2(_aCh_,h,v))
               {var _aCi_=0,_aCj_=H[5];
                caml_call3(_aCj_,h,v,_aCi_);
                caml_call1(f,v);
                var
                 _aCk_=
                  function(w)
                   {var _aCm_=H[11],_aCn_=1 - caml_call2(_aCm_,h,w);
                    return _aCn_?push(w,stack):_aCn_},
                 _aCl_=G[5];
                caml_call3(_aCl_,_aCk_,g,v)}
              continue}}
          var
           Tail=[0,has_cycle_undirected,has_cycle,iter$0,iter_component$0],
           prefix=Tail[3],
           has_cycle$0=Tail[2],
           prefix_component=Tail[4],
           S=_Y_([0,G[2][1]]);
          function start(g)
           {var _aCb_=0;
            function _aCc_(v,st){return [0,v,st]}
            var _aCd_=G[4],st=caml_call3(_aCd_,_aCc_,g,_aCb_);
            return [0,S[1],st,g]}
          function get(param)
           {var st=param[2];if(st){var v=st[1];return v}throw Exit}
          function step(param)
           {var g=param[3],st=param[2],s=param[1];
            if(st)
             {var
               st$0=st[2],
               v=st[1],
               _aB9_=S[4],
               s$0=caml_call2(_aB9_,v,s),
               _aB__=function(w,st){return [0,w,st]},
               _aB$_=G[6],
               st$1=caml_call4(_aB$_,_aB__,g,v,st$0),
               clean=
                function(st)
                 {var st$0=st;
                  for(;;)
                   {if(st$0)
                     {var st$1=st$0[2],w=st$0[1],_aCa_=S[3];
                      if(caml_call2(_aCa_,w,s$0)){var st$0=st$1;continue}}
                    return st$0}};
              return [0,s$0,clean(st$1),g]}
            throw Exit}
          return [0,
                  H,
                  fold,
                  iter,
                  postfix,
                  fold_component,
                  iter_component,
                  postfix_component,
                  Tail,
                  prefix,
                  has_cycle$0,
                  prefix_component,
                  S,
                  start,
                  get,
                  step]},
       _mq_=
        function(_aB5_)
         {var _aB6_=Dfs(_aB5_);
          return [0,
                  _aB6_[3],
                  _aB6_[9],
                  _aB6_[4],
                  _aB6_[6],
                  _aB6_[11],
                  _aB6_[7],
                  _aB6_[2],
                  _aB6_[5],
                  _aB6_[13],
                  _aB6_[15],
                  _aB6_[14],
                  _aB6_[10]]},
       Make_Map=
        function(X)
         {var
           include=_af_([0,X[1]]),
           empty=include[1],
           is_empty=include[2],
           mem=include[3],
           add=include[4],
           update=include[5],
           singleton=include[6],
           remove=include[7],
           merge=include[8],
           union=include[9],
           compare=include[10],
           equal=include[11],
           iter=include[12],
           fold=include[13],
           for_all=include[14],
           exists=include[15],
           filter=include[16],
           filter_map=include[17],
           partition=include[18],
           cardinal=include[19],
           bindings=include[20],
           min_binding=include[21],
           min_binding_opt=include[22],
           max_binding=include[23],
           max_binding_opt=include[24],
           choose=include[25],
           choose_opt=include[26],
           split=include[27],
           find=include[28],
           find_opt=include[29],
           find_first=include[30],
           find_first_opt=include[31],
           find_last=include[32],
           find_last_opt=include[33],
           mapi=include[35],
           to_seq=include[36],
           to_rev_seq=include[37],
           to_seq_from=include[38],
           add_seq=include[39],
           of_seq=include[40];
          function create(param,_aB4_){throw [0,Assert_failure,_mr_]}
          function create_from(param){return empty}
          function copy(m){return m}
          function map(f,m)
           {return caml_call3
                    (fold,
                     function(k,v,m)
                      {var match=caml_call2(f,k,v),v$0=match[2],k$0=match[1];
                       return caml_call3(add,k$0,v$0,m)},
                     m,
                     empty)}
          function find_and_raise(k,h,s)
           {try
             {var _aB2_=caml_call2(find,k,h);return _aB2_}
            catch(_aB3_)
             {_aB3_ = caml_wrap_exception(_aB3_);
              if(_aB3_ === Not_found)return invalid_arg(s);
              throw _aB3_}}
          function clear(param){throw [0,Assert_failure,_ms_]}
          return [0,
                  empty,
                  is_empty,
                  mem,
                  add,
                  update,
                  singleton,
                  remove,
                  merge,
                  union,
                  compare,
                  equal,
                  iter,
                  fold,
                  for_all,
                  exists,
                  filter,
                  filter_map,
                  partition,
                  cardinal,
                  bindings,
                  min_binding,
                  min_binding_opt,
                  max_binding,
                  max_binding_opt,
                  choose,
                  choose_opt,
                  split,
                  find,
                  find_opt,
                  find_first,
                  find_first_opt,
                  find_last,
                  find_last_opt,
                  mapi,
                  to_seq,
                  to_rev_seq,
                  to_seq_from,
                  add_seq,
                  of_seq,
                  create,
                  create_from,
                  copy,
                  map,
                  find_and_raise,
                  clear]},
       Minimal=
        function(S,HM)
         {var
           empty=HM[3],
           create=HM[1],
           is_empty=HM[5],
           copy=HM[14],
           clear=HM[4],
           is_directed=1;
          function nb_vertex(g)
           {var _aBY_=0;
            function _aBZ_(param,_aB0_)
             {return function(_aB1_){return _aB1_ + 1 | 0}}
            return caml_call3(HM[13],_aBZ_,g,_aBY_)}
          function nb_edges(g)
           {var _aBV_=0;
            function _aBW_(param,s,n)
             {var _aBX_=S[22];return n + caml_call1(_aBX_,s) | 0}
            return caml_call3(HM[13],_aBW_,g,_aBV_)}
          function out_degree(g,v)
           {try
             {var _aBS_=HM[9],_aBT_=caml_call2(_aBS_,v,g),_aBR_=_aBT_}
            catch(_aBU_)
             {_aBU_ = caml_wrap_exception(_aBU_);
              if(_aBU_ !== Not_found)throw _aBU_;
              var _aBQ_=invalid_arg(_mt_),_aBR_=_aBQ_}
            return caml_call1(S[22],_aBR_)}
          function mem_vertex(g,v){return caml_call2(HM[8],v,g)}
          function unsafe_add_vertex(g,v){return caml_call3(HM[6],v,S[1],g)}
          function unsafe_add_edge(g,v1,v2)
           {var
             _aBM_=HM[9],
             _aBN_=caml_call2(_aBM_,v1,g),
             _aBO_=S[4],
             _aBP_=caml_call2(_aBO_,v2,_aBN_);
            return caml_call3(HM[6],v1,_aBP_,g)}
          function add_vertex(g,v)
           {var _aBL_=HM[8];
            return caml_call2(_aBL_,v,g)?g:unsafe_add_vertex(g,v)}
          function iter_vertex(f)
           {function _aBK_(v,param){return caml_call1(f,v)}
            return caml_call1(HM[11],_aBK_)}
          function fold_vertex(f)
           {function _aBJ_(v,param){return caml_call1(f,v)}
            return caml_call1(HM[13],_aBJ_)}
          return [0,
                  is_directed,
                  empty,
                  create,
                  is_empty,
                  copy,
                  clear,
                  nb_vertex,
                  nb_edges,
                  out_degree,
                  mem_vertex,
                  unsafe_add_vertex,
                  unsafe_add_edge,
                  add_vertex,
                  iter_vertex,
                  fold_vertex]},
       Pred=
        function(S)
         {function iter_pred(f,g,v)
           {var _aBF_=S[3];
            if(1 - caml_call2(_aBF_,v,g))invalid_arg(_mu_);
            function _aBG_(v1,v2)
             {var _aBH_=S[1][3],_aBI_=caml_call2(_aBH_,v,v2);
              return _aBI_?caml_call1(f,v1):_aBI_}
            return caml_call2(S[4],_aBG_,g)}
          function fold_pred(f,g,v)
           {var _aBC_=S[3];
            if(1 - caml_call2(_aBC_,v,g))invalid_arg(_mv_);
            function _aBD_(v1,v2,a)
             {var _aBE_=S[1][3];
              return caml_call2(_aBE_,v,v2)?caml_call2(f,v1,a):a}
            return caml_call2(S[5],_aBD_,g)}
          function pred(g,v)
           {var _aBB_=0;
            return caml_call1
                    (fold_pred(function(v,l){return [0,v,l]},g,v),_aBB_)}
          function in_degree(g,v)
           {var _aBz_=S[3];
            if(1 - caml_call2(_aBz_,v,g))invalid_arg(_mw_);
            var _aBA_=0;
            return caml_call1
                    (fold_pred(function(param,n){return n + 1 | 0},g,v),_aBA_)}
          function iter_pred_e(f,g,v)
           {var _aBt_=S[3];
            if(1 - caml_call2(_aBt_,v,g))invalid_arg(_mx_);
            function _aBu_(e)
             {var
               _aBv_=S[2][3],
               _aBw_=caml_call1(_aBv_,e),
               _aBx_=S[1][3],
               _aBy_=caml_call2(_aBx_,v,_aBw_);
              return _aBy_?caml_call1(f,e):_aBy_}
            return caml_call2(S[6],_aBu_,g)}
          function fold_pred_e(f,g,v)
           {var _aBo_=S[3];
            if(1 - caml_call2(_aBo_,v,g))invalid_arg(_my_);
            function _aBp_(e,a)
             {var _aBq_=S[2][3],_aBr_=caml_call1(_aBq_,e),_aBs_=S[1][3];
              return caml_call2(_aBs_,v,_aBr_)?caml_call2(f,e,a):a}
            return caml_call2(S[7],_aBp_,g)}
          function pred_e(g,v)
           {var _aBn_=0;
            return caml_call1
                    (fold_pred_e(function(v,l){return [0,v,l]},g,v),_aBn_)}
          return [0,
                  iter_pred,
                  fold_pred,
                  pred,
                  in_degree,
                  iter_pred_e,
                  fold_pred_e,
                  pred_e]},
       Unlabeled=
        function(V,HM)
         {var
           S=_Y_([0,V[1]]),
           _aAM_=[0,V[1]],
           _aAN_=[0,V[1]],
           include=function(_aBm_){return OTProduct(_aAN_,_aBm_)}(_aAM_),
           compare=include[1];
          function src(_aBl_){return _aBl_[1]}
          function dst(_aBk_){return _aBk_[2]}
          function label(param){return 0}
          function create(v1,param,v2){return [0,v1,v2]}
          var E=[0,compare,src,dst,label,create];
          function mem_edge(g,v1,v2)
           {try
             {var
               _aBf_=HM[9],
               _aBg_=caml_call2(_aBf_,v1,g),
               _aBh_=S[3],
               _aBi_=caml_call2(_aBh_,v2,_aBg_);
              return _aBi_}
            catch(_aBj_)
             {_aBj_ = caml_wrap_exception(_aBj_);
              if(_aBj_ === Not_found)return 0;
              throw _aBj_}}
          function mem_edge_e(g,param)
           {var v2=param[2],v1=param[1];return mem_edge(g,v1,v2)}
          function find_edge(g,v1,v2)
           {if(mem_edge(g,v1,v2))return [0,v1,v2];throw Not_found}
          function find_all_edges(g,v1,v2)
           {try
             {var _aBc_=0,_aBd_=[0,find_edge(g,v1,v2),_aBc_];return _aBd_}
            catch(_aBe_)
             {_aBe_ = caml_wrap_exception(_aBe_);
              if(_aBe_ === Not_found)return 0;
              throw _aBe_}}
          function unsafe_remove_edge(g,v1,v2)
           {var
             _aA__=HM[9],
             _aA$_=caml_call2(_aA__,v1,g),
             _aBa_=S[6],
             _aBb_=caml_call2(_aBa_,v2,_aA$_);
            return caml_call3(HM[6],v1,_aBb_,g)}
          function unsafe_remove_edge_e(g,param)
           {var v2=param[2],v1=param[1];return unsafe_remove_edge(g,v1,v2)}
          function remove_edge(g,v1,v2)
           {var _aA5_=HM[8];
            if(1 - caml_call2(_aA5_,v2,g))invalid_arg(_mz_);
            var
             _aA6_=HM[10],
             _aA7_=caml_call3(_aA6_,v1,g,_mA_),
             _aA8_=S[6],
             _aA9_=caml_call2(_aA8_,v2,_aA7_);
            return caml_call3(HM[6],v1,_aA9_,g)}
          function remove_edge_e(g,param)
           {var v2=param[2],v1=param[1];return remove_edge(g,v1,v2)}
          function iter_succ(f,g,v)
           {var _aA3_=HM[10],_aA4_=caml_call3(_aA3_,v,g,_mB_);
            return caml_call2(S[14],f,_aA4_)}
          function fold_succ(f,g,v)
           {var _aA1_=HM[10],_aA2_=caml_call3(_aA1_,v,g,_mC_);
            return caml_call2(S[16],f,_aA2_)}
          function iter_succ_e(f,g,v)
           {return iter_succ(function(v2){return caml_call1(f,[0,v,v2])},g,v)}
          function fold_succ_e(f,g,v)
           {return fold_succ(function(v2){return caml_call1(f,[0,v,v2])},g,v)}
          function succ(g,v)
           {var _aAZ_=HM[10],_aA0_=caml_call3(_aAZ_,v,g,_mD_);
            return caml_call1(S[23],_aA0_)}
          function succ_e(g,v)
           {var _aAY_=0;
            return caml_call1
                    (fold_succ_e(function(e,l){return [0,e,l]},g,v),_aAY_)}
          function map_vertex(f)
           {function _aAS_(v,s)
             {var _aAT_=S[1];
              function _aAU_(v,s)
               {var _aAX_=caml_call1(f,v);return caml_call2(S[4],_aAX_,s)}
              var _aAV_=S[16],_aAW_=caml_call3(_aAV_,_aAU_,s,_aAT_);
              return [0,caml_call1(f,v),_aAW_]}
            return caml_call1(HM[12],_aAS_)}
          function iter_edges(f)
           {function _aAQ_(v)
             {var _aAR_=caml_call1(f,v);return caml_call1(S[14],_aAR_)}
            return caml_call1(HM[11],_aAQ_)}
          function fold_edges(f)
           {function _aAO_(v)
             {var _aAP_=caml_call1(f,v);return caml_call1(S[16],_aAP_)}
            return caml_call1(HM[13],_aAO_)}
          function iter_edges_e(f)
           {return iter_edges(function(v1,v2){return caml_call1(f,[0,v1,v2])})}
          function fold_edges_e(f)
           {return fold_edges
                    (function(v1,v2,a){return caml_call2(f,[0,v1,v2],a)})}
          var
           I=[0,V,iter_edges,fold_edges,iter_edges_e,fold_edges_e],
           PV=I[1],
           iter_edges$0=I[2],
           fold_edges$0=I[3],
           iter_edges_e$0=I[4],
           fold_edges_e$0=I[5],
           PV$0=I[1],
           iter_edges$1=I[2],
           fold_edges$1=I[3],
           iter_edges_e$1=I[4],
           fold_edges_e$1=I[5],
           mem_vertex=HM[8],
           include$0=
            Pred
             ([0,
               PV$0,
               [0,E[1],E[2],E[3],E[5],E[4]],
               mem_vertex,
               iter_edges$1,
               fold_edges$1,
               iter_edges_e$1,
               fold_edges_e$1]),
           iter_pred=include$0[1],
           fold_pred=include$0[2],
           pred=include$0[3],
           in_degree=include$0[4],
           iter_pred_e=include$0[5],
           fold_pred_e=include$0[6],
           pred_e=include$0[7];
          return [0,
                  S,
                  E,
                  mem_edge,
                  mem_edge_e,
                  find_edge,
                  find_all_edges,
                  unsafe_remove_edge,
                  unsafe_remove_edge_e,
                  remove_edge,
                  remove_edge_e,
                  iter_succ,
                  fold_succ,
                  iter_succ_e,
                  fold_succ_e,
                  succ,
                  succ_e,
                  map_vertex,
                  I,
                  PV,
                  iter_edges$0,
                  fold_edges$0,
                  iter_edges_e$0,
                  fold_edges_e$0,
                  iter_pred,
                  fold_pred,
                  pred,
                  in_degree,
                  iter_pred_e,
                  fold_pred_e,
                  pred_e]},
       Labeled=
        function(V,E,HM)
         {var
           _azs_=[0,V[1]],
           VE=function(_aAL_){return OTProduct(_azs_,_aAL_)}(E),
           S=_Y_(VE);
          function src(param){var v=param[1];return v}
          function dst(param){var v=param[3];return v}
          function label(param){var l=param[2];return l}
          function create(v1,l,v2){return [0,v1,l,v2]}
          var
           _azt_=[0,V[1]],
           C=function(_aAK_){return OTProduct(_azt_,_aAK_)}(VE);
          function compare(param,_aAJ_)
           {var
             y3=_aAJ_[3],
             y2=_aAJ_[2],
             y1=_aAJ_[1],
             x3=param[3],
             x2=param[2],
             x1=param[1];
            return caml_call2(C[1],[0,x1,[0,x3,x2]],[0,y1,[0,y3,y2]])}
          var E$0=[0,src,dst,label,create,C,compare];
          function mem_edge(g,v1,v2)
           {try
             {var
               _aAD_=HM[9],
               _aAE_=caml_call2(_aAD_,v1,g),
               _aAF_=
                function(param)
                 {var v2$0=param[1];return caml_call2(V[3],v2,v2$0)},
               _aAG_=S[18],
               _aAH_=caml_call2(_aAG_,_aAF_,_aAE_);
              return _aAH_}
            catch(_aAI_)
             {_aAI_ = caml_wrap_exception(_aAI_);
              if(_aAI_ === Not_found)return 0;
              throw _aAI_}}
          function mem_edge_e(g,param)
           {var v2=param[3],l=param[2],v1=param[1];
            try
             {var
               ve=[0,v2,l],
               _aAw_=HM[9],
               _aAx_=caml_call2(_aAw_,v1,g),
               _aAy_=
                function(ve$0)
                 {var _aAC_=VE[1];return 0 === caml_call2(_aAC_,ve,ve$0)?1:0},
               _aAz_=S[18],
               _aAA_=caml_call2(_aAz_,_aAy_,_aAx_);
              return _aAA_}
            catch(_aAB_)
             {_aAB_ = caml_wrap_exception(_aAB_);
              if(_aAB_ === Not_found)return 0;
              throw _aAB_}}
          var Found=[248,_mE_,caml_fresh_oo_id(0)];
          function find_edge(g,v1,v2)
           {try
             {var
               _aAq_=HM[9],
               _aAr_=caml_call2(_aAq_,v1,g),
               _aAs_=
                function(param)
                 {var
                   l=param[2],
                   v2$0=param[1],
                   _aAu_=V[3],
                   _aAv_=caml_call2(_aAu_,v2,v2$0);
                  if(_aAv_)throw [0,Found,[0,v1,l,v2$0]];
                  return _aAv_},
               _aAt_=S[14];
              caml_call2(_aAt_,_aAs_,_aAr_);
              throw Not_found}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(exn[1] === Found){var e=exn[2];return e}
              throw exn}}
          function find_all_edges(g,v1,v2)
           {try
             {var
               _aAi_=0,
               _aAj_=HM[9],
               _aAk_=caml_call2(_aAj_,v1,g),
               _aAl_=
                function(param,acc)
                 {var l=param[2],v2$0=param[1],_aAp_=V[3];
                  return caml_call2(_aAp_,v2,v2$0)?[0,[0,v1,l,v2$0],acc]:acc},
               _aAm_=S[16],
               _aAn_=caml_call3(_aAm_,_aAl_,_aAk_,_aAi_);
              return _aAn_}
            catch(_aAo_)
             {_aAo_ = caml_wrap_exception(_aAo_);
              if(_aAo_ === Not_found)return 0;
              throw _aAo_}}
          function unsafe_remove_edge(g,v1,v2)
           {var _aAc_=HM[9],_aAd_=caml_call2(_aAc_,v1,g);
            function _aAe_(param)
             {var v2$0=param[1],_aAh_=V[3];
              return 1 - caml_call2(_aAh_,v2,v2$0)}
            var _aAf_=S[19],_aAg_=caml_call2(_aAf_,_aAe_,_aAd_);
            return caml_call3(HM[6],v1,_aAg_,g)}
          function unsafe_remove_edge_e(g,param)
           {var
             v2=param[3],
             l=param[2],
             v1=param[1],
             _az9_=HM[9],
             _az__=caml_call2(_az9_,v1,g),
             _az$_=[0,v2,l],
             _aAa_=S[6],
             _aAb_=caml_call2(_aAa_,_az$_,_az__);
            return caml_call3(HM[6],v1,_aAb_,g)}
          function remove_edge(g,v1,v2)
           {var _az2_=HM[8];
            if(1 - caml_call2(_az2_,v2,g))invalid_arg(_mF_);
            var _az3_=HM[10],_az4_=caml_call3(_az3_,v1,g,_mG_);
            function _az5_(param)
             {var v2$0=param[1],_az8_=V[3];
              return 1 - caml_call2(_az8_,v2,v2$0)}
            var _az6_=S[19],_az7_=caml_call2(_az6_,_az5_,_az4_);
            return caml_call3(HM[6],v1,_az7_,g)}
          function remove_edge_e(g,param)
           {var v2=param[3],l=param[2],v1=param[1],_azW_=HM[8];
            if(1 - caml_call2(_azW_,v2,g))invalid_arg(_mH_);
            var
             _azX_=HM[10],
             _azY_=caml_call3(_azX_,v1,g,_mI_),
             _azZ_=[0,v2,l],
             _az0_=S[6],
             _az1_=caml_call2(_az0_,_azZ_,_azY_);
            return caml_call3(HM[6],v1,_az1_,g)}
          function iter_succ(f,g,v)
           {var _azT_=HM[10],_azU_=caml_call3(_azT_,v,g,_mJ_);
            function _azV_(param){var w=param[1];return caml_call1(f,w)}
            return caml_call2(S[14],_azV_,_azU_)}
          function fold_succ(f,g,v)
           {var _azQ_=HM[10],_azR_=caml_call3(_azQ_,v,g,_mK_);
            function _azS_(param){var w=param[1];return caml_call1(f,w)}
            return caml_call2(S[16],_azS_,_azR_)}
          function iter_succ_e(f,g,v)
           {var _azN_=HM[10],_azO_=caml_call3(_azN_,v,g,_mL_);
            function _azP_(param)
             {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
            return caml_call2(S[14],_azP_,_azO_)}
          function fold_succ_e(f,g,v)
           {var _azK_=HM[10],_azL_=caml_call3(_azK_,v,g,_mM_);
            function _azM_(param)
             {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
            return caml_call2(S[16],_azM_,_azL_)}
          function succ(g,v)
           {var _azJ_=0;
            return caml_call1
                    (fold_succ(function(w,l){return [0,w,l]},g,v),_azJ_)}
          function succ_e(g,v)
           {var _azI_=0;
            return caml_call1
                    (fold_succ_e(function(e,l){return [0,e,l]},g,v),_azI_)}
          function map_vertex(f)
           {function _azC_(v,s)
             {var _azD_=S[1];
              function _azE_(param,s)
               {var l=param[2],v=param[1],_azH_=[0,caml_call1(f,v),l];
                return caml_call2(S[4],_azH_,s)}
              var _azF_=S[16],_azG_=caml_call3(_azF_,_azE_,s,_azD_);
              return [0,caml_call1(f,v),_azG_]}
            return caml_call1(HM[12],_azC_)}
          function iter_edges(f)
           {function _azA_(v)
             {function _azB_(param){var w=param[1];return caml_call2(f,v,w)}
              return caml_call1(S[14],_azB_)}
            return caml_call1(HM[11],_azA_)}
          function fold_edges(f)
           {function _azy_(v)
             {function _azz_(param){var w=param[1];return caml_call2(f,v,w)}
              return caml_call1(S[16],_azz_)}
            return caml_call1(HM[13],_azy_)}
          function iter_edges_e(f)
           {function _azw_(v)
             {function _azx_(param)
               {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
              return caml_call1(S[14],_azx_)}
            return caml_call1(HM[11],_azw_)}
          function fold_edges_e(f)
           {function _azu_(v)
             {function _azv_(param)
               {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
              return caml_call1(S[16],_azv_)}
            return caml_call1(HM[13],_azu_)}
          var
           I=[0,V,iter_edges,fold_edges,iter_edges_e,fold_edges_e],
           PV=I[1],
           iter_edges$0=I[2],
           fold_edges$0=I[3],
           iter_edges_e$0=I[4],
           fold_edges_e$0=I[5],
           PV$0=I[1],
           iter_edges$1=I[2],
           fold_edges$1=I[3],
           iter_edges_e$1=I[4],
           fold_edges_e$1=I[5],
           mem_vertex=HM[8],
           include=
            Pred
             ([0,
               PV$0,
               [0,E$0[6],E$0[1],E$0[2],E$0[4],E$0[3]],
               mem_vertex,
               iter_edges$1,
               fold_edges$1,
               iter_edges_e$1,
               fold_edges_e$1]),
           iter_pred=include[1],
           fold_pred=include[2],
           pred=include[3],
           in_degree=include[4],
           iter_pred_e=include[5],
           fold_pred_e=include[6],
           pred_e=include[7];
          return [0,
                  VE,
                  S,
                  E$0,
                  mem_edge,
                  mem_edge_e,
                  Found,
                  find_edge,
                  find_all_edges,
                  unsafe_remove_edge,
                  unsafe_remove_edge_e,
                  remove_edge,
                  remove_edge_e,
                  iter_succ,
                  fold_succ,
                  iter_succ_e,
                  fold_succ_e,
                  succ,
                  succ_e,
                  map_vertex,
                  I,
                  PV,
                  iter_edges$0,
                  fold_edges$0,
                  iter_edges_e$0,
                  fold_edges_e$0,
                  iter_pred,
                  fold_pred,
                  pred,
                  in_degree,
                  iter_pred_e,
                  fold_pred_e,
                  pred_e]},
       ConcreteVertex=
        function(F,V)
         {var compare=V[1],hash=V[2],equal=V[3];
          function label(v){return v}
          function create(v){return v}
          var
           V$0=[0,compare,hash,equal,label,create],
           HM=caml_call1(F,[0,V$0[1],V$0[2],V$0[3]]);
          return [0,V$0,HM]},
       Make_Abstract=
        function(G)
         {var PV=G[3],PE=G[4];
          function iter_edges(f,g){return caml_call2(G[22],f,g[1])}
          function fold_edges(f,g){return caml_call2(G[23],f,g[1])}
          function iter_edges_e(f,g){return caml_call2(G[24],f,g[1])}
          function fold_edges_e(f,g){return caml_call2(G[25],f,g[1])}
          function mem_vertex(v,g){return caml_call2(G[11],g[1],v)}
          function create(size,param)
           {var _azp_=0,_azq_=0,_azr_=G[40];
            return [0,caml_call2(_azr_,size,_azq_),_azp_]}
          function clear(g)
           {var _azn_=g[1],_azo_=G[41];
            caml_call1(_azo_,_azn_);
            g[2] = 0;
            return 0}
          var
           I=
            [0,
             PV,
             PE,
             iter_edges,
             fold_edges,
             iter_edges_e,
             fold_edges_e,
             mem_vertex,
             create,
             clear],
           PV$0=I[1],
           PE$0=I[2],
           iter_edges$0=I[3],
           fold_edges$0=I[4],
           iter_edges_e$0=I[5],
           fold_edges_e$0=I[6],
           create$0=I[8],
           clear$0=I[9],
           _ay$_=I[1],
           include=
            Pred
             ([0,[0,_ay$_[1],_ay$_[2],_ay$_[3]],I[2],I[7],I[3],I[4],I[5],I[6]]),
           iter_pred=include[1],
           fold_pred=include[2],
           pred=include[3],
           iter_pred_e=include[5],
           fold_pred_e=include[6],
           pred_e=include[7];
          function is_empty(g){return 0 === g[2]?1:0}
          function nb_vertex(g){return g[2]}
          var
           V=G[3],
           E=G[4],
           HM=G[1],
           S=G[2],
           unsafe_add_edge=G[37],
           unsafe_remove_edge=G[38],
           unsafe_remove_edge_e=G[39],
           is_directed=G[5];
          function remove_edge(g){return caml_call1(G[35],g[1])}
          function remove_edge_e(g){return caml_call1(G[36],g[1])}
          function out_degree(g){return caml_call1(G[9],g[1])}
          function in_degree(g){return caml_call1(G[10],g[1])}
          function nb_edges(g){return caml_call1(G[8],g[1])}
          function succ(g){return caml_call1(G[16],g[1])}
          function mem_vertex$0(g){return caml_call1(G[11],g[1])}
          function mem_edge(g){return caml_call1(G[12],g[1])}
          function mem_edge_e(g){return caml_call1(G[13],g[1])}
          function find_edge(g){return caml_call1(G[14],g[1])}
          function find_all_edges(g){return caml_call1(G[15],g[1])}
          function iter_vertex(f,g){return caml_call2(G[20],f,g[1])}
          function fold_vertex(f,g){return caml_call2(G[21],f,g[1])}
          function iter_succ(f,g){return caml_call2(G[27],f,g[1])}
          function fold_succ(f,g){return caml_call2(G[29],f,g[1])}
          function succ_e(g){return caml_call1(G[18],g[1])}
          function iter_succ_e(f,g){return caml_call2(G[31],f,g[1])}
          function fold_succ_e(f,g){return caml_call2(G[32],f,g[1])}
          function map_vertex(f,g)
           {var _azk_=g[2],_azl_=g[1],_azm_=G[26];
            return [0,caml_call2(_azm_,f,_azl_),_azk_]}
          function copy(g)
           {var _aza_=0,_azb_=0,_azc_=HM[1],h=caml_call2(_azc_,_azb_,_aza_);
            function vertex(v)
             {try
               {var _azh_=HM[9],_azi_=caml_call2(_azh_,v,h);return _azi_}
              catch(_azj_)
               {_azj_ = caml_wrap_exception(_azj_);
                if(_azj_ === Not_found)
                 {var
                   _azd_=V[5],
                   _aze_=caml_call1(_azd_,v),
                   _azf_=V[4],
                   v$0=caml_call1(_azf_,_aze_),
                   _azg_=HM[6],
                   h$0=caml_call3(_azg_,v,v$0,h);
                  if(h === h$0)return v$0;
                  throw [0,Assert_failure,_mN_]}
                throw _azj_}}
            return map_vertex(vertex,g)}
          return [0,
                  I,
                  PV$0,
                  PE$0,
                  iter_edges$0,
                  fold_edges$0,
                  iter_edges_e$0,
                  fold_edges_e$0,
                  create$0,
                  clear$0,
                  iter_pred,
                  fold_pred,
                  pred,
                  iter_pred_e,
                  fold_pred_e,
                  pred_e,
                  is_empty,
                  nb_vertex,
                  V,
                  E,
                  HM,
                  S,
                  unsafe_add_edge,
                  unsafe_remove_edge,
                  unsafe_remove_edge_e,
                  is_directed,
                  remove_edge,
                  remove_edge_e,
                  out_degree,
                  in_degree,
                  nb_edges,
                  succ,
                  mem_vertex$0,
                  mem_edge,
                  mem_edge_e,
                  find_edge,
                  find_all_edges,
                  iter_vertex,
                  fold_vertex,
                  iter_succ,
                  fold_succ,
                  succ_e,
                  iter_succ_e,
                  fold_succ_e,
                  map_vertex,
                  copy]},
       BidirectionalMinimal=
        function(S,HM)
         {var
           empty=HM[3],
           create=HM[1],
           clear=HM[4],
           is_empty=HM[5],
           copy=HM[14],
           is_directed=1;
          function nb_vertex(g)
           {var _ay7_=0;
            function _ay8_(param,_ay9_)
             {return function(_ay__){return _ay__ + 1 | 0}}
            return caml_call3(HM[13],_ay8_,g,_ay7_)}
          function nb_edges(g)
           {var _ay3_=0;
            function _ay4_(param,_ay5_,n)
             {var s=_ay5_[2],_ay6_=S[22];return n + caml_call1(_ay6_,s) | 0}
            return caml_call3(HM[13],_ay4_,g,_ay3_)}
          function out_degree(g,v)
           {try
             {var _ay0_=HM[9],_ay1_=caml_call2(_ay0_,v,g),_ayZ_=_ay1_}
            catch(_ay2_)
             {_ay2_ = caml_wrap_exception(_ay2_);
              if(_ay2_ !== Not_found)throw _ay2_;
              var _ayY_=invalid_arg(_mO_),_ayZ_=_ayY_}
            return caml_call1(S[22],_ayZ_[2])}
          function mem_vertex(g,v){return caml_call2(HM[8],v,g)}
          function unsafe_add_vertex(g,v)
           {return caml_call3(HM[6],v,[0,S[1],S[1]],g)}
          function add_vertex(g,v)
           {var _ayX_=HM[8];
            return caml_call2(_ayX_,v,g)?g:unsafe_add_vertex(g,v)}
          function iter_vertex(f)
           {function _ayW_(v,param){return caml_call1(f,v)}
            return caml_call1(HM[11],_ayW_)}
          function fold_vertex(f)
           {function _ayV_(v,param){return caml_call1(f,v)}
            return caml_call1(HM[13],_ayV_)}
          return [0,
                  is_directed,
                  empty,
                  create,
                  clear,
                  is_empty,
                  copy,
                  nb_vertex,
                  nb_edges,
                  out_degree,
                  mem_vertex,
                  unsafe_add_vertex,
                  add_vertex,
                  iter_vertex,
                  fold_vertex]},
       BidirectionalUnlabeled=
        function(V,HM)
         {var
           S=_Y_([0,V[1]]),
           _ax1_=[0,V[1]],
           _ax2_=[0,V[1]],
           include=function(_ayU_){return OTProduct(_ax2_,_ayU_)}(_ax1_),
           compare=include[1];
          function src(_ayT_){return _ayT_[1]}
          function dst(_ayS_){return _ayS_[2]}
          function label(param){return 0}
          function create(v1,param,v2){return [0,v1,v2]}
          var E=[0,compare,src,dst,label,create];
          function mem_edge(g,v1,v2)
           {try
             {var
               _ayN_=HM[9],
               _ayO_=caml_call2(_ayN_,v1,g)[2],
               _ayP_=S[3],
               _ayQ_=caml_call2(_ayP_,v2,_ayO_);
              return _ayQ_}
            catch(_ayR_)
             {_ayR_ = caml_wrap_exception(_ayR_);
              if(_ayR_ === Not_found)return 0;
              throw _ayR_}}
          function mem_edge_e(g,param)
           {var v2=param[2],v1=param[1];return mem_edge(g,v1,v2)}
          function find_edge(g,v1,v2)
           {if(mem_edge(g,v1,v2))return [0,v1,v2];throw Not_found}
          function find_all_edges(g,v1,v2)
           {try
             {var _ayK_=0,_ayL_=[0,find_edge(g,v1,v2),_ayK_];return _ayL_}
            catch(_ayM_)
             {_ayM_ = caml_wrap_exception(_ayM_);
              if(_ayM_ === Not_found)return 0;
              throw _ayM_}}
          function unsafe_remove_edge(g,v1,v2)
           {var
             _ayD_=HM[9],
             match=caml_call2(_ayD_,v1,g),
             out_set=match[2],
             in_set=match[1],
             _ayE_=S[6],
             _ayF_=[0,in_set,caml_call2(_ayE_,v2,out_set)],
             _ayG_=HM[6],
             g$0=caml_call3(_ayG_,v1,_ayF_,g),
             _ayH_=HM[9],
             match$0=caml_call2(_ayH_,v2,g$0),
             out_set$0=match$0[2],
             in_set$0=match$0[1],
             _ayI_=S[6],
             _ayJ_=[0,caml_call2(_ayI_,v1,in_set$0),out_set$0];
            return caml_call3(HM[6],v2,_ayJ_,g$0)}
          function unsafe_remove_edge_e(g,param)
           {var v2=param[2],v1=param[1];return unsafe_remove_edge(g,v1,v2)}
          function remove_edge(g,v1,v2)
           {var _ayz_=HM[8],_ayA_=caml_call2(_ayz_,v2,g);
            if(_ayA_)
             var _ayB_=HM[8],_ayC_=caml_call2(_ayB_,v1,g);
            else
             var _ayC_=_ayA_;
            if(1 - _ayC_)invalid_arg(_mP_);
            return unsafe_remove_edge(g,v1,v2)}
          function remove_edge_e(g,param)
           {var v2=param[2],v1=param[1];return remove_edge(g,v1,v2)}
          function iter_succ(f,g,v)
           {var _ayx_=HM[10],_ayy_=caml_call3(_ayx_,v,g,_mQ_)[2];
            return caml_call2(S[14],f,_ayy_)}
          function fold_succ(f,g,v)
           {var _ayv_=HM[10],_ayw_=caml_call3(_ayv_,v,g,_mR_)[2];
            return caml_call2(S[16],f,_ayw_)}
          function iter_succ_e(f,g,v)
           {return iter_succ(function(v2){return caml_call1(f,[0,v,v2])},g,v)}
          function fold_succ_e(f,g,v)
           {return fold_succ(function(v2){return caml_call1(f,[0,v,v2])},g,v)}
          function succ(g,v)
           {var _ayt_=HM[10],_ayu_=caml_call3(_ayt_,v,g,_mS_)[2];
            return caml_call1(S[23],_ayu_)}
          function succ_e(g,v)
           {var _ays_=0;
            return caml_call1
                    (fold_succ_e(function(e,l){return [0,e,l]},g,v),_ays_)}
          function map_vertex(f)
           {function _ayh_(v,param)
             {var s2=param[2],s1=param[1],_ayi_=S[1];
              function _ayj_(v,s)
               {var _ayr_=caml_call1(f,v);return caml_call2(S[4],_ayr_,s)}
              var
               _ayk_=S[16],
               _ayl_=caml_call3(_ayk_,_ayj_,s2,_ayi_),
               _aym_=S[1];
              function _ayn_(v,s)
               {var _ayq_=caml_call1(f,v);return caml_call2(S[4],_ayq_,s)}
              var
               _ayo_=S[16],
               _ayp_=[0,caml_call3(_ayo_,_ayn_,s1,_aym_),_ayl_];
              return [0,caml_call1(f,v),_ayp_]}
            return caml_call1(HM[12],_ayh_)}
          function iter_edges(f)
           {function _ayf_(v,param)
             {var outset=param[2],_ayg_=caml_call1(f,v);
              return caml_call2(S[14],_ayg_,outset)}
            return caml_call1(HM[11],_ayf_)}
          function fold_edges(f)
           {function _ayd_(v,param)
             {var outset=param[2],_aye_=caml_call1(f,v);
              return caml_call2(S[16],_aye_,outset)}
            return caml_call1(HM[13],_ayd_)}
          function iter_edges_e(f)
           {return iter_edges(function(v1,v2){return caml_call1(f,[0,v1,v2])})}
          function fold_edges_e(f)
           {return fold_edges
                    (function(v1,v2,a){return caml_call2(f,[0,v1,v2],a)})}
          var
           I=[0,V,iter_edges,fold_edges,iter_edges_e,fold_edges_e],
           PV=I[1],
           iter_edges$0=I[2],
           fold_edges$0=I[3],
           iter_edges_e$0=I[4],
           fold_edges_e$0=I[5];
          function iter_pred(f,g,v)
           {var _ayb_=HM[10],_ayc_=caml_call3(_ayb_,v,g,_mT_)[1];
            return caml_call2(S[14],f,_ayc_)}
          function fold_pred(f,g,v)
           {var _ax$_=HM[10],_aya_=caml_call3(_ax$_,v,g,_mU_)[1];
            return caml_call2(S[16],f,_aya_)}
          function pred(g,v)
           {var _ax9_=HM[10],_ax__=caml_call3(_ax9_,v,g,_mV_)[1];
            return caml_call1(S[23],_ax__)}
          function in_degree(g,v)
           {try
             {var _ax6_=HM[9],_ax7_=caml_call2(_ax6_,v,g),_ax5_=_ax7_}
            catch(_ax8_)
             {_ax8_ = caml_wrap_exception(_ax8_);
              if(_ax8_ !== Not_found)throw _ax8_;
              var _ax4_=invalid_arg(_mW_),_ax5_=_ax4_}
            return caml_call1(S[22],_ax5_[1])}
          function iter_pred_e(f,g,v)
           {return iter_pred(function(v2){return caml_call1(f,[0,v2,v])},g,v)}
          function fold_pred_e(f,g,v)
           {return fold_pred(function(v2){return caml_call1(f,[0,v2,v])},g,v)}
          function pred_e(g,v)
           {var _ax3_=0;
            return caml_call1
                    (fold_pred_e(function(e,l){return [0,e,l]},g,v),_ax3_)}
          return [0,
                  S,
                  E,
                  mem_edge,
                  mem_edge_e,
                  find_edge,
                  find_all_edges,
                  unsafe_remove_edge,
                  unsafe_remove_edge_e,
                  remove_edge,
                  remove_edge_e,
                  iter_succ,
                  fold_succ,
                  iter_succ_e,
                  fold_succ_e,
                  succ,
                  succ_e,
                  map_vertex,
                  I,
                  PV,
                  iter_edges$0,
                  fold_edges$0,
                  iter_edges_e$0,
                  fold_edges_e$0,
                  iter_pred,
                  fold_pred,
                  pred,
                  in_degree,
                  iter_pred_e,
                  fold_pred_e,
                  pred_e]},
       BidirectionalLabeled=
        function(V,E,HM)
         {var
           _awb_=[0,V[1]],
           VE=function(_ax0_){return OTProduct(_awb_,_ax0_)}(E),
           S=_Y_(VE);
          function src(param){var v=param[1];return v}
          function dst(param){var v=param[3];return v}
          function label(param){var l=param[2];return l}
          function create(v1,l,v2){return [0,v1,l,v2]}
          var
           _awc_=[0,V[1]],
           C=function(_axZ_){return OTProduct(_awc_,_axZ_)}(VE);
          function compare(param,_axY_)
           {var
             y3=_axY_[3],
             y2=_axY_[2],
             y1=_axY_[1],
             x3=param[3],
             x2=param[2],
             x1=param[1];
            return caml_call2(C[1],[0,x1,[0,x3,x2]],[0,y1,[0,y3,y2]])}
          var E$0=[0,src,dst,label,create,C,compare];
          function mem_edge(g,v1,v2)
           {try
             {var
               _axS_=HM[9],
               _axT_=caml_call2(_axS_,v1,g)[2],
               _axU_=
                function(param)
                 {var v2$0=param[1];return caml_call2(V[3],v2,v2$0)},
               _axV_=S[18],
               _axW_=caml_call2(_axV_,_axU_,_axT_);
              return _axW_}
            catch(_axX_)
             {_axX_ = caml_wrap_exception(_axX_);
              if(_axX_ === Not_found)return 0;
              throw _axX_}}
          function mem_edge_e(g,param)
           {var v2=param[3],l=param[2],v1=param[1];
            try
             {var
               ve=[0,v2,l],
               _axL_=HM[9],
               _axM_=caml_call2(_axL_,v1,g)[2],
               _axN_=
                function(ve$0)
                 {var _axR_=VE[1];return 0 === caml_call2(_axR_,ve,ve$0)?1:0},
               _axO_=S[18],
               _axP_=caml_call2(_axO_,_axN_,_axM_);
              return _axP_}
            catch(_axQ_)
             {_axQ_ = caml_wrap_exception(_axQ_);
              if(_axQ_ === Not_found)return 0;
              throw _axQ_}}
          var Found=[248,_mX_,caml_fresh_oo_id(0)];
          function find_edge(g,v1,v2)
           {try
             {var
               _axF_=HM[9],
               _axG_=caml_call2(_axF_,v1,g)[2],
               _axH_=
                function(param)
                 {var
                   l=param[2],
                   v2$0=param[1],
                   _axJ_=V[3],
                   _axK_=caml_call2(_axJ_,v2,v2$0);
                  if(_axK_)throw [0,Found,[0,v1,l,v2$0]];
                  return _axK_},
               _axI_=S[14];
              caml_call2(_axI_,_axH_,_axG_);
              throw Not_found}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(exn[1] === Found){var e=exn[2];return e}
              throw exn}}
          function find_all_edges(g,v1,v2)
           {try
             {var
               _axx_=0,
               _axy_=HM[9],
               _axz_=caml_call2(_axy_,v1,g)[2],
               _axA_=
                function(param,acc)
                 {var l=param[2],v2$0=param[1],_axE_=V[3];
                  return caml_call2(_axE_,v2,v2$0)?[0,[0,v1,l,v2$0],acc]:acc},
               _axB_=S[16],
               _axC_=caml_call3(_axB_,_axA_,_axz_,_axx_);
              return _axC_}
            catch(_axD_)
             {_axD_ = caml_wrap_exception(_axD_);
              if(_axD_ === Not_found)return 0;
              throw _axD_}}
          function unsafe_remove_edge(g,v1,v2)
           {var
             _axq_=HM[9],
             match=caml_call2(_axq_,v1,g),
             out_set=match[2],
             in_set=match[1];
            function del(v,set)
             {function _axv_(param)
               {var v$0=param[1],_axw_=V[3];
                return 1 - caml_call2(_axw_,v,v$0)}
              return caml_call2(S[19],_axv_,set)}
            var
             _axr_=[0,in_set,del(v2,out_set)],
             _axs_=HM[6],
             g$0=caml_call3(_axs_,v1,_axr_,g),
             _axt_=HM[9],
             match$0=caml_call2(_axt_,v2,g$0),
             out_set$0=match$0[2],
             in_set$0=match$0[1],
             _axu_=[0,del(v1,in_set$0),out_set$0];
            return caml_call3(HM[6],v2,_axu_,g$0)}
          function unsafe_remove_edge_e(g,param)
           {var
             v2=param[3],
             l=param[2],
             v1=param[1],
             _axh_=HM[9],
             match=caml_call2(_axh_,v1,g),
             out_set=match[2],
             in_set=match[1],
             _axi_=[0,v2,l],
             _axj_=S[6],
             _axk_=[0,in_set,caml_call2(_axj_,_axi_,out_set)],
             _axl_=HM[6],
             g$0=caml_call3(_axl_,v1,_axk_,g),
             _axm_=HM[9],
             match$0=caml_call2(_axm_,v2,g$0),
             out_set$0=match$0[2],
             in_set$0=match$0[1],
             _axn_=[0,v1,l],
             _axo_=S[6],
             _axp_=[0,caml_call2(_axo_,_axn_,in_set$0),out_set$0];
            return caml_call3(HM[6],v2,_axp_,g$0)}
          function remove_edge(g,v1,v2)
           {var
             _axa_=HM[10],
             match=caml_call3(_axa_,v1,g,_mY_),
             out_set=match[2],
             in_set=match[1];
            function del(v,set)
             {function _axf_(param)
               {var v$0=param[1],_axg_=V[3];
                return 1 - caml_call2(_axg_,v,v$0)}
              return caml_call2(S[19],_axf_,set)}
            var
             _axb_=[0,in_set,del(v2,out_set)],
             _axc_=HM[6],
             g$0=caml_call3(_axc_,v1,_axb_,g),
             _axd_=HM[10],
             match$0=caml_call3(_axd_,v2,g$0,_mZ_),
             out_set$0=match$0[2],
             in_set$0=match$0[1],
             _axe_=[0,del(v1,in_set$0),out_set$0];
            return caml_call3(HM[6],v2,_axe_,g$0)}
          function remove_edge_e(g,param)
           {var
             v2=param[3],
             l=param[2],
             v1=param[1],
             _aw3_=HM[10],
             match=caml_call3(_aw3_,v1,g,_m0_),
             out_set=match[2],
             in_set=match[1],
             _aw4_=[0,v2,l],
             _aw5_=S[6],
             _aw6_=[0,in_set,caml_call2(_aw5_,_aw4_,out_set)],
             _aw7_=HM[6],
             g$0=caml_call3(_aw7_,v1,_aw6_,g),
             _aw8_=HM[10],
             match$0=caml_call3(_aw8_,v2,g$0,_m1_),
             out_set$0=match$0[2],
             in_set$0=match$0[1],
             _aw9_=[0,v1,l],
             _aw__=S[6],
             _aw$_=[0,caml_call2(_aw__,_aw9_,in_set$0),out_set$0];
            return caml_call3(HM[6],v2,_aw$_,g$0)}
          function iter_succ(f,g,v)
           {var _aw0_=HM[10],_aw1_=caml_call3(_aw0_,v,g,_m2_)[2];
            function _aw2_(param){var w=param[1];return caml_call1(f,w)}
            return caml_call2(S[14],_aw2_,_aw1_)}
          function fold_succ(f,g,v)
           {var _awX_=HM[10],_awY_=caml_call3(_awX_,v,g,_m3_)[2];
            function _awZ_(param){var w=param[1];return caml_call1(f,w)}
            return caml_call2(S[16],_awZ_,_awY_)}
          function iter_succ_e(f,g,v)
           {var _awU_=HM[10],_awV_=caml_call3(_awU_,v,g,_m4_)[2];
            function _awW_(param)
             {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
            return caml_call2(S[14],_awW_,_awV_)}
          function fold_succ_e(f,g,v)
           {var _awR_=HM[10],_awS_=caml_call3(_awR_,v,g,_m5_)[2];
            function _awT_(param)
             {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
            return caml_call2(S[16],_awT_,_awS_)}
          function succ(g,v)
           {var _awQ_=0;
            return caml_call1
                    (fold_succ(function(w,l){return [0,w,l]},g,v),_awQ_)}
          function succ_e(g,v)
           {var _awP_=0;
            return caml_call1
                    (fold_succ_e(function(e,l){return [0,e,l]},g,v),_awP_)}
          function map_vertex(f)
           {function _awE_(v,param)
             {var s2=param[2],s1=param[1],_awF_=S[1];
              function _awG_(param,s)
               {var l=param[2],v=param[1],_awO_=[0,caml_call1(f,v),l];
                return caml_call2(S[4],_awO_,s)}
              var
               _awH_=S[16],
               _awI_=caml_call3(_awH_,_awG_,s2,_awF_),
               _awJ_=S[1];
              function _awK_(param,s)
               {var l=param[2],v=param[1],_awN_=[0,caml_call1(f,v),l];
                return caml_call2(S[4],_awN_,s)}
              var
               _awL_=S[16],
               _awM_=[0,caml_call3(_awL_,_awK_,s1,_awJ_),_awI_];
              return [0,caml_call1(f,v),_awM_]}
            return caml_call1(HM[12],_awE_)}
          function iter_edges(f)
           {function _awC_(v,param)
             {var outset=param[2];
              function _awD_(param){var w=param[1];return caml_call2(f,v,w)}
              return caml_call2(S[14],_awD_,outset)}
            return caml_call1(HM[11],_awC_)}
          function fold_edges(f)
           {function _awA_(v,param)
             {var outset=param[2];
              function _awB_(param){var w=param[1];return caml_call2(f,v,w)}
              return caml_call2(S[16],_awB_,outset)}
            return caml_call1(HM[13],_awA_)}
          function iter_edges_e(f)
           {function _awy_(v,param)
             {var outset=param[2];
              function _awz_(param)
               {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
              return caml_call2(S[14],_awz_,outset)}
            return caml_call1(HM[11],_awy_)}
          function fold_edges_e(f)
           {function _aww_(v,param)
             {var outset=param[2];
              function _awx_(param)
               {var l=param[2],w=param[1];return caml_call1(f,[0,v,l,w])}
              return caml_call2(S[16],_awx_,outset)}
            return caml_call1(HM[13],_aww_)}
          var
           I=[0,V,iter_edges,fold_edges,iter_edges_e,fold_edges_e],
           PV=I[1],
           iter_edges$0=I[2],
           fold_edges$0=I[3],
           iter_edges_e$0=I[4],
           fold_edges_e$0=I[5];
          function iter_pred(f,g,v)
           {var _awt_=HM[10],_awu_=caml_call3(_awt_,v,g,_m6_)[1];
            function _awv_(param){var w=param[1];return caml_call1(f,w)}
            return caml_call2(S[14],_awv_,_awu_)}
          function fold_pred(f,g,v)
           {var _awq_=HM[10],_awr_=caml_call3(_awq_,v,g,_m7_)[1];
            function _aws_(param){var w=param[1];return caml_call1(f,w)}
            return caml_call2(S[16],_aws_,_awr_)}
          function in_degree(g,v)
           {try
             {var _awn_=HM[9],_awo_=caml_call2(_awn_,v,g),_awm_=_awo_}
            catch(_awp_)
             {_awp_ = caml_wrap_exception(_awp_);
              if(_awp_ !== Not_found)throw _awp_;
              var _awl_=invalid_arg(_m8_),_awm_=_awl_}
            return caml_call1(S[22],_awm_[1])}
          function iter_pred_e(f,g,v)
           {var _awi_=HM[10],_awj_=caml_call3(_awi_,v,g,_m9_)[1];
            function _awk_(param)
             {var l=param[2],w=param[1];return caml_call1(f,[0,w,l,v])}
            return caml_call2(S[14],_awk_,_awj_)}
          function fold_pred_e(f,g,v)
           {var _awf_=HM[10],_awg_=caml_call3(_awf_,v,g,_m__)[1];
            function _awh_(param)
             {var l=param[2],w=param[1];return caml_call1(f,[0,w,l,v])}
            return caml_call2(S[16],_awh_,_awg_)}
          function pred(g,v)
           {var _awe_=0;
            return caml_call1
                    (fold_pred(function(w,l){return [0,w,l]},g,v),_awe_)}
          function pred_e(g,v)
           {var _awd_=0;
            return caml_call1
                    (fold_pred_e(function(e,l){return [0,e,l]},g,v),_awd_)}
          return [0,
                  VE,
                  S,
                  E$0,
                  mem_edge,
                  mem_edge_e,
                  Found,
                  find_edge,
                  find_all_edges,
                  unsafe_remove_edge,
                  unsafe_remove_edge_e,
                  remove_edge,
                  remove_edge_e,
                  iter_succ,
                  fold_succ,
                  iter_succ_e,
                  fold_succ_e,
                  succ,
                  succ_e,
                  map_vertex,
                  I,
                  PV,
                  iter_edges$0,
                  fold_edges$0,
                  iter_edges_e$0,
                  fold_edges_e$0,
                  iter_pred,
                  fold_pred,
                  in_degree,
                  iter_pred_e,
                  fold_pred_e,
                  pred,
                  pred_e]},
       Make$9=
        function(F)
         {function Concrete(_av6_)
           {var
             _av7_=function(_awa_){return ConcreteVertex(F,_awa_)}(_av6_),
             V=_av7_[1],
             HM=_av7_[2],
             _av8_=[0,V[1],V[2],V[3]],
             _av9_=function(_av$_){return Unlabeled(_av8_,_av$_)}(HM),
             S=_av9_[1],
             E=_av9_[2],
             mem_edge=_av9_[3],
             mem_edge_e=_av9_[4],
             find_edge=_av9_[5],
             find_all_edges=_av9_[6],
             unsafe_remove_edge=_av9_[7],
             unsafe_remove_edge_e=_av9_[8],
             remove_edge=_av9_[9],
             remove_edge_e=_av9_[10],
             iter_succ=_av9_[11],
             fold_succ=_av9_[12],
             iter_succ_e=_av9_[13],
             fold_succ_e=_av9_[14],
             succ=_av9_[15],
             succ_e=_av9_[16],
             map_vertex=_av9_[17],
             I=_av9_[18],
             PV=_av9_[19],
             iter_edges=_av9_[20],
             fold_edges=_av9_[21],
             iter_edges_e=_av9_[22],
             fold_edges_e=_av9_[23],
             iter_pred=_av9_[24],
             fold_pred=_av9_[25],
             pred=_av9_[26],
             in_degree=_av9_[27],
             iter_pred_e=_av9_[28],
             fold_pred_e=_av9_[29],
             pred_e=_av9_[30],
             include=function(_av__){return Minimal(S,_av__)}(HM),
             is_directed=include[1],
             empty=include[2],
             create=include[3],
             is_empty=include[4],
             copy=include[5],
             clear=include[6],
             nb_vertex=include[7],
             nb_edges=include[8],
             out_degree=include[9],
             mem_vertex=include[10],
             unsafe_add_vertex=include[11],
             unsafe_add_edge=include[12],
             add_vertex=include[13],
             iter_vertex=include[14],
             fold_vertex=include[15];
            function add_edge(g,v1,v2)
             {if(caml_call3(mem_edge,g,v1,v2))return g;
              var
               g$0=caml_call2(add_vertex,g,v1),
               g$1=caml_call2(add_vertex,g$0,v2);
              return caml_call3(unsafe_add_edge,g$1,v1,v2)}
            function add_edge_e(g,param)
             {var v2=param[2],v1=param[1];return add_edge(g,v1,v2)}
            return [0,
                    V,
                    HM,
                    S,
                    E,
                    mem_edge,
                    mem_edge_e,
                    find_edge,
                    find_all_edges,
                    unsafe_remove_edge,
                    unsafe_remove_edge_e,
                    remove_edge,
                    remove_edge_e,
                    iter_succ,
                    fold_succ,
                    iter_succ_e,
                    fold_succ_e,
                    succ,
                    succ_e,
                    map_vertex,
                    I,
                    PV,
                    iter_edges,
                    fold_edges,
                    iter_edges_e,
                    fold_edges_e,
                    iter_pred,
                    fold_pred,
                    pred,
                    in_degree,
                    iter_pred_e,
                    fold_pred_e,
                    pred_e,
                    is_directed,
                    empty,
                    create,
                    is_empty,
                    copy,
                    clear,
                    nb_vertex,
                    nb_edges,
                    out_degree,
                    mem_vertex,
                    unsafe_add_vertex,
                    unsafe_add_edge,
                    add_vertex,
                    iter_vertex,
                    fold_vertex,
                    add_edge,
                    add_edge_e]}
          function ConcreteBidirectional(_avR_)
           {var
             _avS_=function(_av5_){return ConcreteVertex(F,_av5_)}(_avR_),
             V=_avS_[1],
             HM=_avS_[2],
             _avT_=[0,V[1],V[2],V[3]],
             _avU_=
              function(_av4_){return BidirectionalUnlabeled(_avT_,_av4_)}(HM),
             S=_avU_[1],
             E=_avU_[2],
             mem_edge=_avU_[3],
             mem_edge_e=_avU_[4],
             find_edge=_avU_[5],
             find_all_edges=_avU_[6],
             unsafe_remove_edge=_avU_[7],
             unsafe_remove_edge_e=_avU_[8],
             remove_edge=_avU_[9],
             remove_edge_e=_avU_[10],
             iter_succ=_avU_[11],
             fold_succ=_avU_[12],
             iter_succ_e=_avU_[13],
             fold_succ_e=_avU_[14],
             succ=_avU_[15],
             succ_e=_avU_[16],
             map_vertex=_avU_[17],
             I=_avU_[18],
             PV=_avU_[19],
             iter_edges=_avU_[20],
             fold_edges=_avU_[21],
             iter_edges_e=_avU_[22],
             fold_edges_e=_avU_[23],
             iter_pred=_avU_[24],
             fold_pred=_avU_[25],
             pred=_avU_[26],
             in_degree=_avU_[27],
             iter_pred_e=_avU_[28],
             fold_pred_e=_avU_[29],
             pred_e=_avU_[30],
             include=function(_av3_){return BidirectionalMinimal(S,_av3_)}(HM),
             is_directed=include[1],
             empty=include[2],
             create=include[3],
             clear=include[4],
             is_empty=include[5],
             copy=include[6],
             nb_vertex=include[7],
             nb_edges=include[8],
             out_degree=include[9],
             mem_vertex=include[10],
             unsafe_add_vertex=include[11],
             add_vertex=include[12],
             iter_vertex=include[13],
             fold_vertex=include[14];
            function unsafe_add_edge(g,v1,v2)
             {function find(v,g)
               {try
                 {var _av0_=HM[9],_av1_=caml_call2(_av0_,v,g);return _av1_}
                catch(_av2_)
                 {_av2_ = caml_wrap_exception(_av2_);
                  if(_av2_ === Not_found)return [0,S[1],S[1]];
                  throw _av2_}}
              var
               match=find(v1,g),
               out_set=match[2],
               in_set=match[1],
               _avV_=S[4],
               _avW_=[0,in_set,caml_call2(_avV_,v2,out_set)],
               _avX_=HM[6],
               g$0=caml_call3(_avX_,v1,_avW_,g),
               match$0=find(v2,g$0),
               out_set$0=match$0[2],
               in_set$0=match$0[1],
               _avY_=S[4],
               _avZ_=[0,caml_call2(_avY_,v1,in_set$0),out_set$0];
              return caml_call3(HM[6],v2,_avZ_,g$0)}
            function add_edge(g,v1,v2)
             {return caml_call3(mem_edge,g,v1,v2)?g:unsafe_add_edge(g,v1,v2)}
            function add_edge_e(g,param)
             {var v2=param[2],v1=param[1];return add_edge(g,v1,v2)}
            return [0,
                    V,
                    HM,
                    S,
                    E,
                    mem_edge,
                    mem_edge_e,
                    find_edge,
                    find_all_edges,
                    unsafe_remove_edge,
                    unsafe_remove_edge_e,
                    remove_edge,
                    remove_edge_e,
                    iter_succ,
                    fold_succ,
                    iter_succ_e,
                    fold_succ_e,
                    succ,
                    succ_e,
                    map_vertex,
                    I,
                    PV,
                    iter_edges,
                    fold_edges,
                    iter_edges_e,
                    fold_edges_e,
                    iter_pred,
                    fold_pred,
                    pred,
                    in_degree,
                    iter_pred_e,
                    fold_pred_e,
                    pred_e,
                    is_directed,
                    empty,
                    create,
                    clear,
                    is_empty,
                    copy,
                    nb_vertex,
                    nb_edges,
                    out_degree,
                    mem_vertex,
                    unsafe_add_vertex,
                    add_vertex,
                    iter_vertex,
                    fold_vertex,
                    unsafe_add_edge,
                    add_edge,
                    add_edge_e]}
          function ConcreteLabeled(_avG_,Edge)
           {var
             _avH_=function(_avQ_){return ConcreteVertex(F,_avQ_)}(_avG_),
             V=_avH_[1],
             HM=_avH_[2],
             _avI_=[0,Edge[1]],
             _avJ_=[0,V[1],V[2],V[3]];
            function _avK_(_avO_,_avP_){return Labeled(_avJ_,_avO_,_avP_)}
            var
             _avL_=function(_avN_){return _avK_(_avI_,_avN_)}(HM),
             VE=_avL_[1],
             S=_avL_[2],
             E=_avL_[3],
             mem_edge=_avL_[4],
             mem_edge_e=_avL_[5],
             Found=_avL_[6],
             find_edge=_avL_[7],
             find_all_edges=_avL_[8],
             unsafe_remove_edge=_avL_[9],
             unsafe_remove_edge_e=_avL_[10],
             remove_edge=_avL_[11],
             remove_edge_e=_avL_[12],
             iter_succ=_avL_[13],
             fold_succ=_avL_[14],
             iter_succ_e=_avL_[15],
             fold_succ_e=_avL_[16],
             succ=_avL_[17],
             succ_e=_avL_[18],
             map_vertex=_avL_[19],
             I=_avL_[20],
             PV=_avL_[21],
             iter_edges=_avL_[22],
             fold_edges=_avL_[23],
             iter_edges_e=_avL_[24],
             fold_edges_e=_avL_[25],
             iter_pred=_avL_[26],
             fold_pred=_avL_[27],
             pred=_avL_[28],
             in_degree=_avL_[29],
             iter_pred_e=_avL_[30],
             fold_pred_e=_avL_[31],
             pred_e=_avL_[32],
             include=function(_avM_){return Minimal(S,_avM_)}(HM),
             is_directed=include[1],
             empty=include[2],
             create=include[3],
             is_empty=include[4],
             copy=include[5],
             clear=include[6],
             nb_vertex=include[7],
             nb_edges=include[8],
             out_degree=include[9],
             mem_vertex=include[10],
             unsafe_add_vertex=include[11],
             unsafe_add_edge=include[12],
             add_vertex=include[13],
             iter_vertex=include[14],
             fold_vertex=include[15];
            function add_edge_e(g,e)
             {var v2=e[3],l=e[2],v1=e[1];
              if(caml_call2(mem_edge_e,g,e))return g;
              var
               g$0=caml_call2(add_vertex,g,v1),
               g$1=caml_call2(add_vertex,g$0,v2);
              return caml_call3(unsafe_add_edge,g$1,v1,[0,v2,l])}
            function add_edge(g,v1,v2){return add_edge_e(g,[0,v1,Edge[2],v2])}
            return [0,
                    V,
                    HM,
                    VE,
                    S,
                    E,
                    mem_edge,
                    mem_edge_e,
                    Found,
                    find_edge,
                    find_all_edges,
                    unsafe_remove_edge,
                    unsafe_remove_edge_e,
                    remove_edge,
                    remove_edge_e,
                    iter_succ,
                    fold_succ,
                    iter_succ_e,
                    fold_succ_e,
                    succ,
                    succ_e,
                    map_vertex,
                    I,
                    PV,
                    iter_edges,
                    fold_edges,
                    iter_edges_e,
                    fold_edges_e,
                    iter_pred,
                    fold_pred,
                    pred,
                    in_degree,
                    iter_pred_e,
                    fold_pred_e,
                    pred_e,
                    is_directed,
                    empty,
                    create,
                    is_empty,
                    copy,
                    clear,
                    nb_vertex,
                    nb_edges,
                    out_degree,
                    mem_vertex,
                    unsafe_add_vertex,
                    unsafe_add_edge,
                    add_vertex,
                    iter_vertex,
                    fold_vertex,
                    add_edge_e,
                    add_edge]}
          function ConcreteBidirectionalLabeled(_avl_,Edge)
           {var
             _avm_=function(_avF_){return ConcreteVertex(F,_avF_)}(_avl_),
             V=_avm_[1],
             HM=_avm_[2],
             _avn_=[0,Edge[1]],
             _avo_=[0,V[1],V[2],V[3]];
            function _avp_(_avD_,_avE_)
             {return BidirectionalLabeled(_avo_,_avD_,_avE_)}
            var
             _avq_=function(_avC_){return _avp_(_avn_,_avC_)}(HM),
             VE=_avq_[1],
             S=_avq_[2],
             E=_avq_[3],
             mem_edge=_avq_[4],
             mem_edge_e=_avq_[5],
             Found=_avq_[6],
             find_edge=_avq_[7],
             find_all_edges=_avq_[8],
             unsafe_remove_edge=_avq_[9],
             unsafe_remove_edge_e=_avq_[10],
             remove_edge=_avq_[11],
             remove_edge_e=_avq_[12],
             iter_succ=_avq_[13],
             fold_succ=_avq_[14],
             iter_succ_e=_avq_[15],
             fold_succ_e=_avq_[16],
             succ=_avq_[17],
             succ_e=_avq_[18],
             map_vertex=_avq_[19],
             I=_avq_[20],
             PV=_avq_[21],
             iter_edges=_avq_[22],
             fold_edges=_avq_[23],
             iter_edges_e=_avq_[24],
             fold_edges_e=_avq_[25],
             iter_pred=_avq_[26],
             fold_pred=_avq_[27],
             in_degree=_avq_[28],
             iter_pred_e=_avq_[29],
             fold_pred_e=_avq_[30],
             pred=_avq_[31],
             pred_e=_avq_[32],
             include=function(_avB_){return BidirectionalMinimal(S,_avB_)}(HM),
             is_directed=include[1],
             empty=include[2],
             create=include[3],
             clear=include[4],
             is_empty=include[5],
             copy=include[6],
             nb_vertex=include[7],
             nb_edges=include[8],
             out_degree=include[9],
             mem_vertex=include[10],
             unsafe_add_vertex=include[11],
             add_vertex=include[12],
             iter_vertex=include[13],
             fold_vertex=include[14];
            function unsafe_add_edge_e(g,param)
             {var v2=param[3],l=param[2],v1=param[1];
              function find(v,g)
               {try
                 {var _avy_=HM[9],_avz_=caml_call2(_avy_,v,g);return _avz_}
                catch(_avA_)
                 {_avA_ = caml_wrap_exception(_avA_);
                  if(_avA_ === Not_found)return [0,S[1],S[1]];
                  throw _avA_}}
              var
               match=find(v1,g),
               out_set=match[2],
               in_set=match[1],
               _avr_=[0,v2,l],
               _avs_=S[4],
               _avt_=[0,in_set,caml_call2(_avs_,_avr_,out_set)],
               _avu_=HM[6],
               g$0=caml_call3(_avu_,v1,_avt_,g),
               match$0=find(v2,g$0),
               out_set$0=match$0[2],
               in_set$0=match$0[1],
               _avv_=[0,v1,l],
               _avw_=S[4],
               _avx_=[0,caml_call2(_avw_,_avv_,in_set$0),out_set$0];
              return caml_call3(HM[6],v2,_avx_,g$0)}
            function add_edge_e(g,e)
             {return caml_call2(mem_edge_e,g,e)?g:unsafe_add_edge_e(g,e)}
            function add_edge(g,v1,v2){return add_edge_e(g,[0,v1,Edge[2],v2])}
            return [0,
                    V,
                    HM,
                    VE,
                    S,
                    E,
                    mem_edge,
                    mem_edge_e,
                    Found,
                    find_edge,
                    find_all_edges,
                    unsafe_remove_edge,
                    unsafe_remove_edge_e,
                    remove_edge,
                    remove_edge_e,
                    iter_succ,
                    fold_succ,
                    iter_succ_e,
                    fold_succ_e,
                    succ,
                    succ_e,
                    map_vertex,
                    I,
                    PV,
                    iter_edges,
                    fold_edges,
                    iter_edges_e,
                    fold_edges_e,
                    iter_pred,
                    fold_pred,
                    in_degree,
                    iter_pred_e,
                    fold_pred_e,
                    pred,
                    pred_e,
                    is_directed,
                    empty,
                    create,
                    clear,
                    is_empty,
                    copy,
                    nb_vertex,
                    nb_edges,
                    out_degree,
                    mem_vertex,
                    unsafe_add_vertex,
                    add_vertex,
                    iter_vertex,
                    fold_vertex,
                    unsafe_add_edge_e,
                    add_edge_e,
                    add_edge]}
          function Abstract(V)
           {var
             HM=caml_call1(F,[0,V[1],V[2],V[3]]),
             _avg_=[0,V[1],V[2],V[3]],
             _avh_=function(_avk_){return Unlabeled(_avg_,_avk_)}(HM),
             S=_avh_[1],
             E=_avh_[2],
             mem_edge=_avh_[3],
             mem_edge_e=_avh_[4],
             find_edge=_avh_[5],
             find_all_edges=_avh_[6],
             unsafe_remove_edge=_avh_[7],
             unsafe_remove_edge_e=_avh_[8],
             remove_edge=_avh_[9],
             remove_edge_e=_avh_[10],
             iter_succ=_avh_[11],
             fold_succ=_avh_[12],
             iter_succ_e=_avh_[13],
             fold_succ_e=_avh_[14],
             succ=_avh_[15],
             succ_e=_avh_[16],
             map_vertex=_avh_[17],
             I=_avh_[18],
             PV=_avh_[19],
             iter_edges=_avh_[20],
             fold_edges=_avh_[21],
             iter_edges_e=_avh_[22],
             fold_edges_e=_avh_[23],
             iter_pred=_avh_[24],
             fold_pred=_avh_[25],
             pred=_avh_[26],
             in_degree=_avh_[27],
             iter_pred_e=_avh_[28],
             fold_pred_e=_avh_[29],
             pred_e=_avh_[30],
             include=function(_avj_){return Minimal(S,_avj_)}(HM),
             is_directed=include[1],
             empty=include[2],
             create=include[3],
             is_empty=include[4],
             copy=include[5],
             clear=include[6],
             nb_vertex=include[7],
             nb_edges=include[8],
             out_degree=include[9],
             mem_vertex=include[10],
             unsafe_add_vertex=include[11],
             unsafe_add_edge=include[12],
             add_vertex=include[13],
             iter_vertex=include[14],
             fold_vertex=include[15],
             G=
              [0,
               V,
               HM,
               S,
               E,
               mem_edge,
               mem_edge_e,
               find_edge,
               find_all_edges,
               unsafe_remove_edge,
               unsafe_remove_edge_e,
               remove_edge,
               remove_edge_e,
               iter_succ,
               fold_succ,
               iter_succ_e,
               fold_succ_e,
               succ,
               succ_e,
               map_vertex,
               I,
               PV,
               iter_edges,
               fold_edges,
               iter_edges_e,
               fold_edges_e,
               iter_pred,
               fold_pred,
               pred,
               in_degree,
               iter_pred_e,
               fold_pred_e,
               pred_e,
               is_directed,
               empty,
               create,
               is_empty,
               copy,
               clear,
               nb_vertex,
               nb_edges,
               out_degree,
               mem_vertex,
               unsafe_add_vertex,
               unsafe_add_edge,
               add_vertex,
               iter_vertex,
               fold_vertex],
             _avi_=G[4],
             include$0=
              Make_Abstract
               ([0,
                 G[2],
                 G[3],
                 G[1],
                 [0,_avi_[1],_avi_[2],_avi_[3],_avi_[5],_avi_[4]],
                 G[33],
                 G[36],
                 G[39],
                 G[40],
                 G[41],
                 G[29],
                 G[42],
                 G[5],
                 G[6],
                 G[7],
                 G[8],
                 G[17],
                 G[28],
                 G[18],
                 G[32],
                 G[46],
                 G[47],
                 G[22],
                 G[23],
                 G[24],
                 G[25],
                 G[19],
                 G[13],
                 G[26],
                 G[14],
                 G[27],
                 G[15],
                 G[16],
                 G[30],
                 G[31],
                 G[11],
                 G[12],
                 G[44],
                 G[9],
                 G[10],
                 G[35],
                 G[38]]),
             I$0=include$0[1],
             PV$0=include$0[2],
             PE=include$0[3],
             iter_edges$0=include$0[4],
             fold_edges$0=include$0[5],
             iter_edges_e$0=include$0[6],
             fold_edges_e$0=include$0[7],
             create$0=include$0[8],
             clear$0=include$0[9],
             iter_pred$0=include$0[10],
             fold_pred$0=include$0[11],
             pred$0=include$0[12],
             iter_pred_e$0=include$0[13],
             fold_pred_e$0=include$0[14],
             pred_e$0=include$0[15],
             is_empty$0=include$0[16],
             nb_vertex$0=include$0[17],
             V$0=include$0[18],
             E$0=include$0[19],
             HM$0=include$0[20],
             S$0=include$0[21],
             unsafe_add_edge$0=include$0[22],
             unsafe_remove_edge$0=include$0[23],
             unsafe_remove_edge_e$0=include$0[24],
             is_directed$0=include$0[25],
             remove_edge$0=include$0[26],
             remove_edge_e$0=include$0[27],
             out_degree$0=include$0[28],
             in_degree$0=include$0[29],
             nb_edges$0=include$0[30],
             succ$0=include$0[31],
             mem_vertex$0=include$0[32],
             mem_edge$0=include$0[33],
             mem_edge_e$0=include$0[34],
             find_edge$0=include$0[35],
             find_all_edges$0=include$0[36],
             iter_vertex$0=include$0[37],
             fold_vertex$0=include$0[38],
             iter_succ$0=include$0[39],
             fold_succ$0=include$0[40],
             succ_e$0=include$0[41],
             iter_succ_e$0=include$0[42],
             fold_succ_e$0=include$0[43],
             map_vertex$0=include$0[44],
             copy$0=include$0[45];
            return [0,
                    G,
                    I$0,
                    PV$0,
                    PE,
                    iter_edges$0,
                    fold_edges$0,
                    iter_edges_e$0,
                    fold_edges_e$0,
                    create$0,
                    clear$0,
                    iter_pred$0,
                    fold_pred$0,
                    pred$0,
                    iter_pred_e$0,
                    fold_pred_e$0,
                    pred_e$0,
                    is_empty$0,
                    nb_vertex$0,
                    V$0,
                    E$0,
                    HM$0,
                    S$0,
                    unsafe_add_edge$0,
                    unsafe_remove_edge$0,
                    unsafe_remove_edge_e$0,
                    is_directed$0,
                    remove_edge$0,
                    remove_edge_e$0,
                    out_degree$0,
                    in_degree$0,
                    nb_edges$0,
                    succ$0,
                    mem_vertex$0,
                    mem_edge$0,
                    mem_edge_e$0,
                    find_edge$0,
                    find_all_edges$0,
                    iter_vertex$0,
                    fold_vertex$0,
                    iter_succ$0,
                    fold_succ$0,
                    succ_e$0,
                    iter_succ_e$0,
                    fold_succ_e$0,
                    map_vertex$0,
                    copy$0]}
          function AbstractLabeled(V,_au8_)
           {var
             HM=caml_call1(F,[0,V[1],V[2],V[3]]),
             _au9_=[0,_au8_[1]],
             _au__=[0,V[1],V[2],V[3]];
            function _au$_(_ave_,_avf_){return Labeled(_au__,_ave_,_avf_)}
            var
             _ava_=function(_avd_){return _au$_(_au9_,_avd_)}(HM),
             VE=_ava_[1],
             S=_ava_[2],
             E=_ava_[3],
             mem_edge=_ava_[4],
             mem_edge_e=_ava_[5],
             Found=_ava_[6],
             find_edge=_ava_[7],
             find_all_edges=_ava_[8],
             unsafe_remove_edge=_ava_[9],
             unsafe_remove_edge_e=_ava_[10],
             remove_edge=_ava_[11],
             remove_edge_e=_ava_[12],
             iter_succ=_ava_[13],
             fold_succ=_ava_[14],
             iter_succ_e=_ava_[15],
             fold_succ_e=_ava_[16],
             succ=_ava_[17],
             succ_e=_ava_[18],
             map_vertex=_ava_[19],
             I=_ava_[20],
             PV=_ava_[21],
             iter_edges=_ava_[22],
             fold_edges=_ava_[23],
             iter_edges_e=_ava_[24],
             fold_edges_e=_ava_[25],
             iter_pred=_ava_[26],
             fold_pred=_ava_[27],
             pred=_ava_[28],
             in_degree=_ava_[29],
             iter_pred_e=_ava_[30],
             fold_pred_e=_ava_[31],
             pred_e=_ava_[32],
             include=function(_avc_){return Minimal(S,_avc_)}(HM),
             is_directed=include[1],
             empty=include[2],
             create=include[3],
             is_empty=include[4],
             copy=include[5],
             clear=include[6],
             nb_vertex=include[7],
             nb_edges=include[8],
             out_degree=include[9],
             mem_vertex=include[10],
             unsafe_add_vertex=include[11],
             unsafe_add_edge=include[12],
             add_vertex=include[13],
             iter_vertex=include[14],
             fold_vertex=include[15],
             G=
              [0,
               V,
               HM,
               VE,
               S,
               E,
               mem_edge,
               mem_edge_e,
               Found,
               find_edge,
               find_all_edges,
               unsafe_remove_edge,
               unsafe_remove_edge_e,
               remove_edge,
               remove_edge_e,
               iter_succ,
               fold_succ,
               iter_succ_e,
               fold_succ_e,
               succ,
               succ_e,
               map_vertex,
               I,
               PV,
               iter_edges,
               fold_edges,
               iter_edges_e,
               fold_edges_e,
               iter_pred,
               fold_pred,
               pred,
               in_degree,
               iter_pred_e,
               fold_pred_e,
               pred_e,
               is_directed,
               empty,
               create,
               is_empty,
               copy,
               clear,
               nb_vertex,
               nb_edges,
               out_degree,
               mem_vertex,
               unsafe_add_vertex,
               unsafe_add_edge,
               add_vertex,
               iter_vertex,
               fold_vertex],
             _avb_=G[5],
             include$0=
              Make_Abstract
               ([0,
                 G[2],
                 G[4],
                 G[1],
                 [0,_avb_[6],_avb_[1],_avb_[2],_avb_[4],_avb_[3]],
                 G[35],
                 G[38],
                 G[41],
                 G[42],
                 G[43],
                 G[31],
                 G[44],
                 G[6],
                 G[7],
                 G[9],
                 G[10],
                 G[19],
                 G[30],
                 G[20],
                 G[34],
                 G[48],
                 G[49],
                 G[24],
                 G[25],
                 G[26],
                 G[27],
                 G[21],
                 G[15],
                 G[28],
                 G[16],
                 G[29],
                 G[17],
                 G[18],
                 G[32],
                 G[33],
                 G[13],
                 G[14],
                 G[46],
                 G[11],
                 G[12],
                 G[37],
                 G[40]]),
             I$0=include$0[1],
             PV$0=include$0[2],
             PE=include$0[3],
             iter_edges$0=include$0[4],
             fold_edges$0=include$0[5],
             iter_edges_e$0=include$0[6],
             fold_edges_e$0=include$0[7],
             create$0=include$0[8],
             clear$0=include$0[9],
             iter_pred$0=include$0[10],
             fold_pred$0=include$0[11],
             pred$0=include$0[12],
             iter_pred_e$0=include$0[13],
             fold_pred_e$0=include$0[14],
             pred_e$0=include$0[15],
             is_empty$0=include$0[16],
             nb_vertex$0=include$0[17],
             V$0=include$0[18],
             E$0=include$0[19],
             HM$0=include$0[20],
             S$0=include$0[21],
             unsafe_add_edge$0=include$0[22],
             unsafe_remove_edge$0=include$0[23],
             unsafe_remove_edge_e$0=include$0[24],
             is_directed$0=include$0[25],
             remove_edge$0=include$0[26],
             remove_edge_e$0=include$0[27],
             out_degree$0=include$0[28],
             in_degree$0=include$0[29],
             nb_edges$0=include$0[30],
             succ$0=include$0[31],
             mem_vertex$0=include$0[32],
             mem_edge$0=include$0[33],
             mem_edge_e$0=include$0[34],
             find_edge$0=include$0[35],
             find_all_edges$0=include$0[36],
             iter_vertex$0=include$0[37],
             fold_vertex$0=include$0[38],
             iter_succ$0=include$0[39],
             fold_succ$0=include$0[40],
             succ_e$0=include$0[41],
             iter_succ_e$0=include$0[42],
             fold_succ_e$0=include$0[43],
             map_vertex$0=include$0[44],
             copy$0=include$0[45];
            return [0,
                    G,
                    I$0,
                    PV$0,
                    PE,
                    iter_edges$0,
                    fold_edges$0,
                    iter_edges_e$0,
                    fold_edges_e$0,
                    create$0,
                    clear$0,
                    iter_pred$0,
                    fold_pred$0,
                    pred$0,
                    iter_pred_e$0,
                    fold_pred_e$0,
                    pred_e$0,
                    is_empty$0,
                    nb_vertex$0,
                    V$0,
                    E$0,
                    HM$0,
                    S$0,
                    unsafe_add_edge$0,
                    unsafe_remove_edge$0,
                    unsafe_remove_edge_e$0,
                    is_directed$0,
                    remove_edge$0,
                    remove_edge_e$0,
                    out_degree$0,
                    in_degree$0,
                    nb_edges$0,
                    succ$0,
                    mem_vertex$0,
                    mem_edge$0,
                    mem_edge_e$0,
                    find_edge$0,
                    find_all_edges$0,
                    iter_vertex$0,
                    fold_vertex$0,
                    iter_succ$0,
                    fold_succ$0,
                    succ_e$0,
                    iter_succ_e$0,
                    fold_succ_e$0,
                    map_vertex$0,
                    copy$0]}
          var
           Digraph=
            [0,
             Concrete,
             ConcreteBidirectional,
             ConcreteLabeled,
             ConcreteBidirectionalLabeled,
             Abstract,
             AbstractLabeled];
          return [0,Digraph]},
       P=
        Make$9
         (function(_au6_)
           {var _au7_=Make_Map(_au6_);
            return [0,
                    _au7_[40],
                    _au7_[41],
                    _au7_[1],
                    _au7_[45],
                    _au7_[2],
                    _au7_[4],
                    _au7_[7],
                    _au7_[3],
                    _au7_[28],
                    _au7_[44],
                    _au7_[12],
                    _au7_[43],
                    _au7_[13],
                    _au7_[42]]}),
       Concrete=
        function(_au0_)
         {var
           include=caml_call1(P[1][1],_au0_),
           V=include[1],
           HM=include[2],
           S=include[3],
           E=include[4],
           mem_edge=include[5],
           mem_edge_e=include[6],
           find_edge=include[7],
           find_all_edges=include[8],
           unsafe_remove_edge=include[9],
           unsafe_remove_edge_e=include[10],
           remove_edge=include[11],
           remove_edge_e=include[12],
           iter_succ=include[13],
           fold_succ=include[14],
           iter_succ_e=include[15],
           fold_succ_e=include[16],
           succ=include[17],
           succ_e=include[18],
           map_vertex=include[19],
           I=include[20],
           PV=include[21],
           iter_edges=include[22],
           fold_edges=include[23],
           iter_edges_e=include[24],
           fold_edges_e=include[25],
           iter_pred=include[26],
           fold_pred=include[27],
           pred=include[28],
           in_degree=include[29],
           iter_pred_e=include[30],
           fold_pred_e=include[31],
           pred_e=include[32],
           is_directed=include[33],
           empty=include[34],
           create=include[35],
           is_empty=include[36],
           copy=include[37],
           clear=include[38],
           nb_vertex=include[39],
           nb_edges=include[40],
           out_degree=include[41],
           mem_vertex=include[42],
           unsafe_add_vertex=include[43],
           unsafe_add_edge=include[44],
           add_vertex=include[45],
           iter_vertex=include[46],
           fold_vertex=include[47],
           add_edge=include[48],
           add_edge_e=include[49];
          function remove_vertex(g,v)
           {var _au1_=HM[8];
            if(caml_call2(_au1_,v,g))
             {var
               _au2_=HM[7],
               g$0=caml_call2(_au2_,v,g),
               _au3_=
                function(k,s)
                 {var _au4_=S[6],_au5_=caml_call2(_au4_,v,s);
                  return caml_call2(HM[6],k,_au5_)};
              return caml_call3(HM[13],_au3_,g$0,empty)}
            return g}
          return [0,
                  V,
                  HM,
                  S,
                  E,
                  mem_edge,
                  mem_edge_e,
                  find_edge,
                  find_all_edges,
                  unsafe_remove_edge,
                  unsafe_remove_edge_e,
                  remove_edge,
                  remove_edge_e,
                  iter_succ,
                  fold_succ,
                  iter_succ_e,
                  fold_succ_e,
                  succ,
                  succ_e,
                  map_vertex,
                  I,
                  PV,
                  iter_edges,
                  fold_edges,
                  iter_edges_e,
                  fold_edges_e,
                  iter_pred,
                  fold_pred,
                  pred,
                  in_degree,
                  iter_pred_e,
                  fold_pred_e,
                  pred_e,
                  is_directed,
                  empty,
                  create,
                  is_empty,
                  copy,
                  clear,
                  nb_vertex,
                  nb_edges,
                  out_degree,
                  mem_vertex,
                  unsafe_add_vertex,
                  unsafe_add_edge,
                  add_vertex,
                  iter_vertex,
                  fold_vertex,
                  add_edge,
                  add_edge_e,
                  remove_vertex]},
       _m$_=
        function(_auW_)
         {var _auX_=Concrete(_auW_),_auY_=_auX_[4],_auZ_=_auX_[1];
          return [0,
                  [0,_auZ_[1],_auZ_[2],_auZ_[3],_auZ_[5],_auZ_[4]],
                  [0,_auY_[1],_auY_[2],_auY_[3],_auY_[5],_auY_[4]],
                  _auX_[33],
                  _auX_[36],
                  _auX_[39],
                  _auX_[40],
                  _auX_[41],
                  _auX_[29],
                  _auX_[42],
                  _auX_[5],
                  _auX_[6],
                  _auX_[7],
                  _auX_[8],
                  _auX_[17],
                  _auX_[28],
                  _auX_[18],
                  _auX_[32],
                  _auX_[46],
                  _auX_[47],
                  _auX_[22],
                  _auX_[23],
                  _auX_[24],
                  _auX_[25],
                  _auX_[19],
                  _auX_[13],
                  _auX_[26],
                  _auX_[14],
                  _auX_[27],
                  _auX_[15],
                  _auX_[16],
                  _auX_[30],
                  _auX_[31],
                  _auX_[34],
                  _auX_[45],
                  _auX_[50],
                  _auX_[48],
                  _auX_[49],
                  _auX_[11],
                  _auX_[12]]},
       Error=[248,_na_,caml_fresh_oo_id(0)],
       _nb_=[0,Error,[0]];
      register_exception(_nc_,_nb_);
      var
       raise=function(exn){throw exn},
       global=globalThis,
       null$0=null,
       undefined$0=undefined,
       return$1=function(_auV_){return _auV_},
       case$0=
        function(x,f,g){return x == null$0?caml_call1(f,0):caml_call1(g,x)},
       option=
        function(x){if(x){var x$0=x[1];return return$1(x$0)}return null$0},
       to_option=
        function(x)
         {function _auU_(x){return [0,x]}
          return case$0(x,function(param){return 0},_auU_)},
       case$1=
        function(x,f,g)
         {return x === undefined$0?caml_call1(f,0):caml_call1(g,x)},
       to_option$0=
        function(x)
         {function _auT_(x){return [0,x]}
          return case$1(x,function(param){return 0},_auT_)},
       _nd_=
        function(x)
         {return caml_call1(caml_get_public_method(x,944440446,20),x)},
       _ne_=function(t2,param){return t2.Object},
       object_constructor=_ne_(global,_nd_),
       object_keys=
        function(o)
         {function _auS_(x)
           {return caml_call1(caml_get_public_method(x,-955850252,21),x)}
          return function(t4,t3,param){return t4.keys(t3)}
                  (object_constructor,o,_auS_)},
       _nf_=
        function(x)
         {return caml_call1(caml_get_public_method(x,883172538,22),x)},
       _ng_=function(t5,param){return t5.Array},
       array_length=_ng_(global,_nf_),
       _nh_=
        function(x)
         {return caml_call1(caml_get_public_method(x,37651177,26),x)},
       _ni_=function(t10,param){return t10.Error},
       error_constr=_ni_(global,_nh_),
       to_string$7=
        function(e)
         {function _auP_(x)
           {return caml_call1(caml_get_public_method(x,946786476,30),x)}
          function _auQ_(t14,param){return t14.toString()}
          var _auR_=_auQ_(e,_auP_);
          return caml_string_of_jsstring(_auR_)},
       raise_js_error=function(e){return caml_call1(raise,e)},
       _nj_=
        function(param)
         {if(param[1] === Error){var e=param[2];return [0,to_string$7(e)]}
          return 0};
      register_printer(_nj_);
      var
       _nk_=
        function(e)
         {if(e instanceof array_length)return 0;
          function _auM_(x)
           {return caml_call1(caml_get_public_method(x,946786476,41),x)}
          function _auN_(t25,param){return t25.toString()}
          var _auO_=_auN_(e,_auM_);
          return [0,caml_string_of_jsstring(_auO_)]};
      register_printer(_nk_);
      var
       export_js=
        function(field,x){var _auL_=jsoo_exports;return _auL_[field] = x},
       export$0=
        function(field,x){return export_js(caml_jsstring_of_string(field),x)},
       console=caml_js_get_console(0),
       js_log=
        function(s)
         {function _auJ_(x)
           {return caml_call1(caml_get_public_method(x,5395588,43),x)}
          var _auK_=caml_jsstring_of_string(s);
          return function(t1,t0,param){return t1.log(t0)}(console,_auK_,_auJ_)},
       snd_map=
        function(f,param)
         {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]},
       pair_map=
        function(f,param)
         {var y=param[2],x=param[1],_auI_=caml_call1(f,y);
          return [0,caml_call1(f,x),_auI_]},
       symbol$2=function(f,g,x){return caml_call1(g,caml_call1(f,x))},
       symbol$3=function(f,g,x){return caml_call1(f,caml_call1(g,x))},
       curry=
        function(f,param){var y=param[2],x=param[1];return caml_call2(f,x,y)},
       uncurry=function(f,x,y){return caml_call1(f,[0,x,y])},
       symbol$4=function(f,x,y){return caml_call2(f,y,x)},
       fold$3=
        function(f,acc,param)
         {if(param){var v=param[1];return caml_call2(f,acc,v)}return acc},
       fst=function(xs){return map$0(function(_auH_){return _auH_[1]},xs)},
       snd=function(xs){return map$0(function(_auG_){return _auG_[2]},xs)},
       pop_at=
        function(i,l)
         {function aux(acc,i,l)
           {var acc$0=acc,i$0=i,l$0=l;
            for(;;)
             {if(0 === i$0)
               {if(l$0)
                 {var l$1=l$0[2],x=l$0[1];return [0,x,rev_append(acc$0,l$1)]}}
              else
               if(l$0)
                {var
                  l$2=l$0[2],
                  x$0=l$0[1],
                  i$1=i$0 - 1 | 0,
                  acc$1=[0,x$0,acc$0],
                  acc$0=acc$1,
                  i$0=i$1,
                  l$0=l$2;
                 continue}
              throw Not_found}}
          return aux(0,i,l)},
       join$2=
        function(sep)
         {function doit(acc,xs)
           {var acc$0=acc,xs$0=xs;
            for(;;)
             {if(xs$0)
               {var
                 xs$1=xs$0[2],
                 x=xs$0[1],
                 acc$1=[0,x,[0,sep,acc$0]],
                 acc$0=acc$1,
                 xs$0=xs$1;
                continue}
              return rev(acc$0)}}
          return function(xs)
           {if(xs)
             {var _auF_=xs[1];
              if(xs[2]){var xs$0=xs[2];return doit([0,_auF_,0],xs$0)}}
            return xs}},
       of_option=function(x){if(x){var x$0=x[1];return [0,x$0,0]}return 0},
       pivoti=
        function(f)
         {function aux(i,pre,s)
           {var i$0=i,pre$0=pre,s$0=s;
            for(;;)
             {if(s$0)
               {var s$1=s$0[2],x=s$0[1];
                if(caml_call2(f,i$0,x))return [0,rev(pre$0),x,s$1];
                var
                 pre$1=[0,x,pre$0],
                 i$1=i$0 + 1 | 0,
                 i$0=i$1,
                 pre$0=pre$1,
                 s$0=s$1;
                continue}
              return invalid_arg(_nl_)}}
          return function(s){return aux(0,0,s)}},
       pivot=
        function(f,s){return caml_call1(pivoti(function(param){return f}),s)},
       find_map_opt=
        function(f)
         {function doit(xs)
           {var xs$0=xs;
            for(;;)
             {if(xs$0)
               {var xs$1=xs$0[2],x=xs$0[1],match=caml_call1(f,x);
                if(match){var v=match[1];return [0,v]}
                var xs$0=xs$1;
                continue}
              return 0}}
          return function(xs){return doit(xs)}},
       is_prefix=
        function(xs,pr)
         {var xs$0=xs,pr$0=pr;
          for(;;)
           {if(pr$0)
             {if(xs$0)
               {var
                 pr$1=pr$0[2],
                 y=pr$0[1],
                 xs$1=xs$0[2],
                 x=xs$0[1],
                 _auE_=caml_equal(x,y);
                if(_auE_){var xs$0=xs$1,pr$0=pr$1;continue}
                return _auE_}
              return 0}
            return 1}},
       to_string$8=
        function(opt,_auv_,_auu_,print)
         {if(opt)var sth=opt[1],sep=sth;else var sep=_no_;
          if(_auv_)var sth$0=_auv_[1],left=sth$0;else var left=_nn_;
          if(_auu_)var sth$1=_auu_[1],right=sth$1;else var right=_nm_;
          function _auw_(s){return cat(left,cat(s,right))}
          function _aux_(_auD_){return join(sep,_auD_)}
          function _auy_(_auC_){return map$0(print,_auC_)}
          function _auz_(_auB_){return symbol$2(_auy_,_aux_,_auB_)}
          return function(_auA_){return symbol$2(_auz_,_auw_,_auA_)}},
       empty$6=[0,empty$1,empty$1],
       inverse=function(param){var l=param[2],r=param[1];return [0,l,r]},
       add$8=
        function(k,v,param)
         {var l=param[2],r=param[1],_aut_=add$6(v,k,l);
          return [0,add$6(k,v,r),_aut_]},
       find$4=function(k,param){var r=param[1];return find$2(k,r)},
       find_opt$1=function(k,param){var r=param[1];return find_opt$0(k,r)},
       codomain=function(param){var l=param[2];return of_enum$1(keys$0(l))},
       count$0=[0,-1],
       fresh=function(param){count$0[1]++;return count$0[1]},
       Disposed=[248,_np_,caml_fresh_oo_id(0)],
       get$5=
        function(p)
         {var _aus_=p[1];
          if(_aus_){var match=_aus_[1],x=match[2];return x}
          throw Disposed},
       create$11=function(cb,x){var r=[0,[0,[0,cb,x]]];return r},
       pr=
        function(opt,c)
         {if(opt)var sth=opt[1],doit=sth;else var doit=1;
          return doit?caml_call1(sprintf$0(_nq_),c):c},
       spaced=
        function(opt,_aup_,c)
         {if(opt)var sth=opt[1],left=sth;else var left=1;
          if(_aup_)var sth$0=_aup_[1],right=sth$0;else var right=1;
          var _auq_=right?_nr_:_nv_,_aur_=left?_ns_:_nu_;
          return caml_call3(sprintf$0(_nt_),_aur_,c,_auq_)},
       span=function(a){return function(_auo_){return node(a,_nw_,_auo_)}},
       spaced$0=
        function(opt,_auj_,c)
         {if(opt)var sth=opt[1],left=sth;else var left=1;
          if(_auj_)var sth$0=_auj_[1],right=sth$0;else var right=1;
          var
           _auk_=0,
           _aul_=0,
           _aum_=[0,entity(_nx_),_aul_],
           _aun_=0,
           sp=[0,caml_call1(span(_aun_),_aum_),_auk_],
           c$0=left?append(sp,c):c,
           c$1=right?append(c$0,sp):c$0;
          return c$1},
       pr$0=
        function(opt,c)
         {if(opt)var sth=opt[1],doit=sth;else var doit=1;
          var
           _aub_=0,
           _auc_=0,
           _aud_=[0,pcdata(_ny_),_auc_],
           _aue_=0,
           l=[0,caml_call1(span(_aue_),_aud_),_aub_],
           _auf_=0,
           _aug_=0,
           _auh_=[0,pcdata(_nz_),_aug_],
           _aui_=0,
           r=[0,caml_call1(span(_aui_),_auh_),_auf_];
          return doit?append(l,append(c,r)):c},
       math=function(a){return function(_aua_){return node(a,_nA_,_aua_)}},
       row=function(a){return function(_at$_){return node(a,_nB_,_at$_)}},
       mo=function(c){var _at__=0;return node(0,_nC_,[0,pcdata(c),_at__])},
       mi=function(c){var _at9_=0;return node(0,_nD_,[0,pcdata(c),_at9_])},
       mn=function(c){var _at8_=0;return node(0,_nE_,[0,pcdata(c),_at8_])},
       pr$1=
        function(opt,c)
         {if(opt)var sth=opt[1],doit=sth;else var doit=1;
          if(doit)
           {var
             _at5_=0,
             _at6_=[0,c,[0,mo(_nF_),_at5_]],
             _at7_=[0,mo(_nG_),_at6_];
            return caml_call1(row(0),_at7_)}
          return c},
       make$6=
        function(p1,p2)
         {function mkpos(p){return [0,p[2],p[4] - p[3] | 0]}
          var _at1_=p2[4],_at2_=p1[4],_at3_=mkpos(p2),_at4_=mkpos(p1);
          return [0,p1[1],_at4_,_at3_,_at2_,_at1_]},
       of_lexbuf=
        function(lb)
         {var p1=lexeme_start_p(lb),p2=lexeme_end_p(lb);return make$6(p1,p2)},
       unloc=function(x){return x[2]},
       mkloc=function(loc,x){return [0,loc,x]},
       ParseError=[248,_nH_,caml_fresh_oo_id(0)],
       State=
        function(T)
         {function return$0(x,st){return [0,x,st]}
          function bind(m,f,st)
           {var match=caml_call1(m,st),st$0=match[2],x=match[1];
            return caml_call2(f,x,st$0)}
          function fold$0(f,x,l,st)
           {var _at0_=[0,x,st];
            return fold
                    (function(param,y)
                      {var st=param[2],x=param[1];return caml_call3(f,x,y,st)},
                     _at0_,
                     l)}
          function iter(f,l)
           {var _atX_=0;
            function _atY_(param,y){return caml_call1(f,y)}
            return function(_atZ_){return fold$0(_atY_,_atX_,l,_atZ_)}}
          function get(st){return [0,st,st]}
          function put(st,param){return [0,0,st]}
          function run(m)
           {function _atU_(_atW_){return _atW_[1]}
            return function(_atV_){return symbol$2(m,_atU_,_atV_)}}
          return [0,return$0,bind,bind,bind,fold$0,iter,get,put,run]},
       return$2=function(x){return [0,x,0]},
       bind=function(m,f){return flatten$0(map$4(f,m))},
       concat$1=
        function(param)
         {if(param){var _atT_=param[1];if(_atT_){var x=_atT_[1];return [0,x]}}
          return 0},
       concat_map$0=function(f,x){return concat$1(map$3(f,x))},
       return$3=function(x){return [0,x]},
       bind$0=function(x,f){return concat_map$0(f,x)},
       e_vars=
        function(param)
         {if(0 === param[0]){var x=param[1];return return$2(x)}
          var ts=param[2];
          return bind(ts,e_vars)},
       term_of_expr=function(e){return [0,69,e]},
       term_of_form=function(f){return [0,70,f]},
       expr_of_term=
        function(t)
         {if(typeof t !== "number" && 69 === t[1]){var e=t[2];return e}
          throw [0,Invalid_argument,_nI_]},
       form_of_term=
        function(t)
         {if(typeof t !== "number" && 70 === t[1]){var f=t[2];return f}
          throw [0,Invalid_argument,_nJ_]},
       succ$3=function(n){return [1,_nK_,[0,n,0]]},
       _nN_=function(_atS_){return add$6(_nM_,_nL_,_atS_)},
       _nO_=_nN_(empty$1),
       _nP_=[0,0,nat],
       _nR_=function(_atR_){return add$6(_nQ_,_nP_,_atR_)},
       _nS_=_nR_(empty$1),
       _nT_=[0,[0,nat,0],nat],
       _nV_=function(_atQ_){return add$6(_nU_,_nT_,_atQ_)},
       _nW_=_nV_(_nS_),
       _nX_=[0,[0,nat,[0,nat,0]],nat],
       _nZ_=function(_atP_){return add$6(_nY_,_nX_,_atP_)},
       _n0_=_nZ_(_nW_),
       _n1_=[0,[0,nat,[0,nat,0]],nat],
       _n3_=function(_atO_){return add$6(_n2_,_n1_,_atO_)},
       empty$7=[0,empty$1,_n3_(_n0_),empty$1,_nO_,empty$1,empty$6],
       DuplicatedEntry=[248,_n4_,caml_fresh_oo_id(0)],
       empty$8=[0,empty$1,0],
       indices=function(lenv){return lenv[1]},
       get_index=function(lenv,name){return find$2(name,lenv[1])},
       exists$2=
        function(lenv,x){var _atN_=lenv[1];return mem(x,bindings(_atN_))},
       enter=
        function(lenv,name)
         {var _atE_=[0,name,lenv[2]],_atF_=lenv[1],_atG_=1;
          function _atH_(_atM_,_atL_){return _atM_ + _atL_ | 0}
          function _atI_(_atK_){return _atH_(_atG_,_atK_)}
          var _atJ_=-1;
          return [0,modify_def$0(_atJ_,name,_atI_,_atF_),_atE_]},
       push$1=
        function(env,param)
         {var sg=param[2],name=param[1],_atx_=env[1];
          if(mem$1(name,_atx_))throw [0,DuplicatedEntry,4003854,name];
          var
           _aty_=env[6],
           _atz_=env[5],
           _atA_=env[4],
           _atB_=env[3],
           _atC_=env[2],
           _atD_=env[1];
          return [0,add$6(name,sg,_atD_),_atC_,_atB_,_atA_,_atz_,_aty_]},
       get$6=function(env,name){return find$3(name,env[1])},
       all=function(env){return env[1]},
       push$2=
        function(init,param)
         {var sg=param[2],name=param[1],_atq_=init[1];
          if(mem$1(name,_atq_))throw [0,DuplicatedEntry,3507231,name];
          var
           _atr_=init[6],
           _ats_=init[5],
           _att_=init[4],
           _atu_=init[3],
           _atv_=init[2],
           _atw_=add$6(name,sg,_atv_);
          return [0,init[1],_atw_,_atu_,_att_,_ats_,_atr_]},
       get$7=function(env,name){return find$3(name,env[2])},
       all$0=function(env){return env[2]},
       push$3=
        function(init,param)
         {var
           body=param[2],
           name=param[1],
           _atk_=init[6],
           _atl_=init[5],
           _atm_=init[4];
          function _atn_(bds)
           {var _atp_=0,v=[0,body,default$0(_atp_,bds)];return [0,v]}
          var _ato_=modify_opt$0(name,_atn_,_atm_);
          return [0,init[1],init[2],init[3],_ato_,_atl_,_atk_]},
       get$8=
        function(env,param)
         {var
           idx=param[2],
           name=param[1],
           _ati_=env[4],
           _atj_=0,
           bds=find_default$0(_atj_,name,_ati_);
          return nth_opt(bds,idx)},
       exists$3=function(env,x){return is_some(get$8(env,x))},
       prio_of_form=function _ath_(_atg_){return _ath_.fun(_atg_)},
       prio_of_expr=function _atf_(_ate_){return _atf_.fun(_ate_)},
       prio_of_type=function _atd_(_atc_){return _atd_.fun(_atc_)},
       prio_of_op=function _atb_(_ata_){return _atb_.fun(_ata_)},
       prio_of_fun=function _as$_(_as__){return _as$_.fun(_as__)},
       prio_Not=5,
       prio_And=4,
       prio_Or=3,
       prio_Imp=2,
       prio_Equiv=1;
      caml_update_dummy
       (prio_of_form,
        function(param)
         {if(typeof param === "number")
           return 0 === param?max_num:max_num;
          else
           switch(param[0])
            {case 0:return max_num;
             case 1:var op=param[1];return caml_call1(prio_of_op,op);
             default:return min_num}});
      caml_update_dummy
       (prio_of_expr,
        function(param)
         {if(0 === param[0])return max_num;
          var f=param[1];
          return caml_call1(prio_of_fun,f)});
      caml_update_dummy
       (prio_of_type,
        function(param)
         {if(typeof param === "number")
           return max_num;
          else
           switch(param[0])
            {case 0:return max_num;
             case 1:return prio_And;
             case 2:return prio_Or;
             default:return min_num}});
      caml_update_dummy
       (prio_of_op,
        function(param)
         {return 3257015 === param
                  ?prio_And
                  :3903731 <= param
                    ?95438486 <= param?prio_Equiv:prio_Not
                    :3654636 <= param?prio_Imp:prio_Or});
      caml_update_dummy
       (prio_of_fun,
        function(param)
         {return caml_string_notequal(param,_n5_)
                  ?caml_string_notequal(param,_n6_)
                    ?caml_string_notequal(param,_n7_)
                      ?caml_string_notequal(param,_n8_)?min_num:2
                      :1
                    :max_num
                  :3});
      var
       _n9_=0,
       _n__=[0,function(_as9_,_as8_){return caml_lessequal(_as9_,_as8_)},_n9_],
       left_assoc=
        [0,function(_as7_,_as6_){return caml_lessthan(_as7_,_as6_)},_n__],
       _n$_=0,
       _oa_=[0,function(_as5_,_as4_){return caml_lessthan(_as5_,_as4_)},_n$_],
       right_assoc=
        [0,function(_as3_,_as2_){return caml_lessequal(_as3_,_as2_)},_oa_],
       _ob_=0,
       _oc_=[0,function(_as1_,_as0_){return caml_lessequal(_as1_,_as0_)},_ob_],
       no_assoc=
        [0,function(_asZ_,_asY_){return caml_lessequal(_asZ_,_asY_)},_oc_],
       assoc_of_op=
        function(param)
         {if(3903731 <= param)
           {if(95438486 <= param)return no_assoc;
            var _asV_=0;
            return [0,
                    function(_asX_,_asW_){return caml_lessthan(_asX_,_asW_)},
                    _asV_]}
          return 3654636 <= param?right_assoc:left_assoc},
       assoc_of_fun=
        function(param)
         {if(caml_string_notequal(param,_od_))
           {if(caml_string_notequal(param,_oe_))
             {if
               (caml_string_notequal(param,_of_)
                &&
                caml_string_notequal(param,_og_))
               throw [0,Assert_failure,_oh_];
              return left_assoc}
            return 0}
          var _asS_=0;
          return [0,
                  function(_asU_,_asT_){return caml_lessthan(_asU_,_asT_)},
                  _asS_]},
       unicode_of_op=
        function(param)
         {return 3257015 === param
                  ?8743
                  :3903731 <= param
                    ?95438486 <= param?10234:172
                    :3654636 <= param?10233:8744},
       ascii_of_op=
        function(param)
         {return 3257015 === param
                  ?_oi_
                  :3903731 <= param
                    ?95438486 <= param?_oj_:_ok_
                    :3654636 <= param?_ol_:_om_},
       for_type=
        function(opt)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          function _asy_(ty)
           {if(typeof ty === "number")
             return _on_;
            else
             switch(ty[0])
              {case 0:
                var _asD_=ty[1],_asE_=_asD_[1];
                if(0 === _asD_[2])return of_latin1(_asE_);
                var i=_asD_[2],_asF_=of_latin1(_asE_);
                return caml_call2(sprintf(_oo_),_asF_,i);
               case 3:
                var
                 t=ty[2],
                 x=ty[1],
                 _asP_=0,
                 _asQ_=caml_call1(for_type(_asP_),t),
                 _asR_=of_latin1(x);
                return caml_call2(sprintf$0(_oq_),_asR_,_asQ_);
               default:
                var
                 t2=ty[2],
                 t1=ty[1],
                 _asG_=caml_call1(prio_of_type,ty),
                 _asH_=[0,caml_call1(prio_of_type,t1) < _asG_?1:0],
                 t1$0=caml_call1(for_type(_asH_),t1),
                 _asI_=caml_call1(prio_of_type,ty),
                 _asJ_=[0,caml_call1(prio_of_type,t2) <= _asI_?1:0],
                 t2$0=caml_call1(for_type(_asJ_),t2),
                 switch$0=0;
                if(typeof ty !== "number")
                 switch(ty[0])
                  {case 1:var tycon=42;switch$0 = 1;break;
                   case 2:var tycon=43;switch$0 = 1;break
                   }
                if(switch$0)
                 {var
                   _asK_=of_char(tycon),
                   _asL_=of_char$0(_asK_),
                   _asM_=0,
                   _asN_=0,
                   _asO_=spaced(_asN_,_asM_,_asL_);
                  return cat(t1$0,cat(_asO_,t2$0))}
                throw [0,Assert_failure,_op_]}}
          var _asz_=[0,is_pr];
          function _asA_(_asC_){return pr(_asz_,_asC_)}
          return function(_asB_){return symbol$3(_asA_,_asy_,_asB_)}},
       for_expr=
        function(param)
         {if(0 === param[0])
           {var _ass_=param[1],_ast_=_ass_[1];
            if(0 === _ass_[2])return of_latin1(_ast_);
            var i=_ass_[2],_asu_=of_latin1(_ast_);
            return caml_call2(sprintf$0(_or_),_asu_,i)}
          var
           args=param[2],
           f=param[1],
           _asv_=map$4(for_expr,args),
           args$0=join(_os_,_asv_),
           _asw_=0,
           _asx_=pr(_asw_,args$0);
          return cat(of_latin1(f),_asx_)},
       for_form=
        function(opt)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          function _ar1_(param)
           {if(typeof param === "number")
             return 0 === param?_ot_:_ou_;
            else
             switch(param[0])
              {case 0:
                var _ar6_=param[1],switch$0=0;
                if(caml_string_notequal(_ar6_,_ov_))
                 switch$0 = 1;
                else
                 {var _ar9_=param[2];
                  if(_ar9_)
                   {var _ar__=_ar9_[2];
                    if(_ar__ && ! _ar__[2])
                     {var
                       e2=_ar__[1],
                       e1=_ar9_[1],
                       _ar$_=for_expr(e2),
                       _asa_=for_expr(e1);
                      return caml_call2(sprintf$0(_ox_),_asa_,_ar$_)}}
                  else
                   switch$0 = 1}
                if(switch$0 && ! param[2])return of_latin1(_ar6_);
                var
                 args=param[2],
                 args$0=map$4(for_expr,args),
                 args$1=join(_ow_,args$0),
                 _ar7_=0,
                 _ar8_=pr(_ar7_,args$1);
                return cat(of_latin1(_ar6_),_ar8_);
               case 1:
                var
                 fs=param[2],
                 lg=param[1],
                 text_lg=ascii_of_op(lg),
                 _asb_=assoc_of_op(lg),
                 _asc_=combine(fs,_asb_),
                 _asd_=
                  function(param)
                   {var
                     cmp=param[2],
                     f=param[1],
                     _asq_=caml_call1(prio_of_op,lg),
                     _asr_=caml_call1(prio_of_form,f);
                    return caml_call1
                            (for_form([0,caml_call2(cmp,_asr_,_asq_)]),f)},
                 _ase_=function(_asp_){return map$4(_asd_,_asp_)},
                 text_fs=_ase_(_asc_);
                if(3903731 === lg)
                 {if(text_fs && ! text_fs[2])
                   {var f=text_fs[1],_asf_=0;
                    return cat(spaced(_oz_,_asf_,text_lg),f)}}
                else
                 if(text_fs)
                  {var _asg_=text_fs[2];
                   if(_asg_ && ! _asg_[2])
                    {var
                      f2=_asg_[1],
                      f1=text_fs[1],
                      _ash_=0,
                      _asi_=0,
                      _asj_=spaced(_asi_,_ash_,text_lg);
                     return cat(f1,cat(_asj_,f2))}}
                throw [0,Assert_failure,_oy_];
               default:
                var
                 f$0=param[4],
                 ty=param[3],
                 x=param[2],
                 bd=param[1],
                 bd$0=840561112 <= bd?_oA_:_oC_,
                 _ask_=0,
                 _asl_=caml_call1(for_form(_ask_),f$0),
                 _asm_=0,
                 _asn_=caml_call1(for_type(_asm_),ty),
                 _aso_=of_latin1(x);
                return caml_call4(sprintf$0(_oB_),bd$0,_aso_,_asn_,_asl_)}}
          var _ar2_=[0,is_pr];
          function _ar3_(_ar5_){return pr(_ar2_,_ar5_)}
          return function(_ar4_){return symbol$3(_ar3_,_ar1_,_ar4_)}},
       t_toascii=function(t){return caml_call1(for_type(0),t)},
       e_toascii=function(e){return for_expr(e)},
       f_toascii=function(f){return caml_call1(for_form(0),f)},
       for_type$0=
        function(opt)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          function _arH_(ty)
           {if(typeof ty === "number")
             return _oD_;
            else
             switch(ty[0])
              {case 0:
                var _arM_=ty[1],_arN_=_arM_[1];
                if(caml_string_notequal(_arN_,_oE_))
                 {if(0 === _arM_[2])return of_latin1(_arN_);
                  var i=_arM_[2],_arO_=of_latin1(_arN_);
                  return caml_call2(sprintf(_oF_),_arO_,i)}
                return _oG_;
               case 3:
                var
                 t=ty[2],
                 x=ty[1],
                 _arY_=0,
                 _arZ_=caml_call1(for_type$0(_arY_),t),
                 _ar0_=of_latin1(x);
                return caml_call2(sprintf$0(_oI_),_ar0_,_arZ_);
               default:
                var
                 t2=ty[2],
                 t1=ty[1],
                 _arP_=caml_call1(prio_of_type,ty),
                 _arQ_=[0,caml_call1(prio_of_type,t1) < _arP_?1:0],
                 t1$0=caml_call1(for_type$0(_arQ_),t1),
                 _arR_=caml_call1(prio_of_type,ty),
                 _arS_=[0,caml_call1(prio_of_type,t2) <= _arR_?1:0],
                 t2$0=caml_call1(for_type$0(_arS_),t2),
                 switch$0=0;
                if(typeof ty !== "number")
                 switch(ty[0])
                  {case 1:var tycon=42;switch$0 = 1;break;
                   case 2:var tycon=43;switch$0 = 1;break
                   }
                if(switch$0)
                 {var
                   _arT_=of_char(tycon),
                   _arU_=of_char$0(_arT_),
                   _arV_=0,
                   _arW_=0,
                   _arX_=spaced(_arW_,_arV_,_arU_);
                  return cat(t1$0,cat(_arX_,t2$0))}
                throw [0,Assert_failure,_oH_]}}
          var _arI_=[0,is_pr];
          function _arJ_(_arL_){return pr(_arI_,_arL_)}
          return function(_arK_){return symbol$3(_arJ_,_arH_,_arK_)}},
       arg=
        function(opt,expr)
         {if(0 === expr[0])
           {var _arf_=expr[1],_arg_=_arf_[1];
            if(0 === _arf_[2])return of_latin1(_arg_);
            var i=_arf_[2],_arh_=of_latin1(_arg_);
            return caml_call2(sprintf$0(_oJ_),_arh_,i)}
          var _ari_=expr[1];
          if
           (caml_string_notequal(_ari_,_oK_)
            &&
            caml_string_notequal(_ari_,_oL_)
            &&
            caml_string_notequal(_ari_,_oM_)
            &&
            caml_string_notequal(_ari_,_oN_))
           {var
             args=expr[2],
             _arj_=function(eta){return arg(0,eta)},
             _ark_=map$4(_arj_,args),
             args$0=join(_oO_,_ark_),
             _arl_=0,
             _arm_=pr(_arl_,args$0);
            return cat(of_latin1(_ari_),_arm_)}
          var es=expr[2];
          function str(es)
           {var _arB_=assoc_of_fun(_ari_),_arC_=combine(es,_arB_);
            function _arD_(i,param)
             {var
               cmp=param[2],
               e=param[1],
               _arF_=caml_call1(prio_of_fun,_ari_),
               _arG_=caml_call1(prio_of_expr,e);
              return arg([0,caml_call2(cmp,_arG_,_arF_)],e)}
            return function(_arE_){return mapi(_arD_,_arE_)}(_arC_)}
          var match=str(es);
          if(caml_string_notequal(_ari_,_oP_))
           {if(caml_string_notequal(_ari_,_oQ_))
             {if(caml_string_notequal(_ari_,_oR_))
               {if(! caml_string_notequal(_ari_,_oS_) && match)
                 {var _arn_=match[2];
                  if(_arn_ && ! _arn_[2])
                   {var
                     e2=_arn_[1],
                     e1=match[1],
                     _aro_=0,
                     _arp_=0,
                     _arq_=spaced(_arp_,_aro_,_oU_);
                    return cat(e1,cat(_arq_,e2))}}}
              else
               if(match)
                {var _arr_=match[2];
                 if(_arr_ && ! _arr_[2])
                  {var
                    e2$0=_arr_[1],
                    e1$0=match[1],
                    _ars_=0,
                    _art_=0,
                    _aru_=spaced(_art_,_ars_,_oV_);
                   return cat(e1$0,cat(_aru_,e2$0))}}}
            else
             if(! match)return _oW_;
            throw [0,Assert_failure,_oT_]}
          function numeral(num,e)
           {var num$0=num,e$0=e;
            for(;;)
             {if(1 === e$0[0])
               {var _arz_=e$0[1];
                if(caml_string_notequal(_arz_,_oY_))
                 {if(! caml_string_notequal(_arz_,_oZ_) && ! e$0[2])
                   return to_string(num$0)}
                else
                 {var _arA_=e$0[2];
                  if(_arA_ && ! _arA_[2])
                   {var e$1=_arA_[1],num$1=num$0 + 1 | 0,num$0=num$1,e$0=e$1;
                    continue}}}
              var
               _arv_=to_string(num$0),
               _arw_=cat(_oX_,_arv_),
               _arx_=[0,e$0,0],
               _ary_=str(_arx_);
              return cat(hd(_ary_),_arw_)}}
          return numeral(0,expr)},
       for_form$0=
        function(opt)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          function _aqo_(param)
           {if(typeof param === "number")
             {if(0 === param){var _aqt_=8868;return of_char$0(chr$0(_aqt_))}
              var _aqu_=8869;
              return of_char$0(chr$0(_aqu_))}
            else
             switch(param[0])
              {case 0:
                var _aqv_=param[1],switch$0=0;
                if(caml_string_notequal(_aqv_,_o0_))
                 switch$0 = 1;
                else
                 {var _aqz_=param[2];
                  if(_aqz_)
                   {var _aqA_=_aqz_[2];
                    if(_aqA_ && ! _aqA_[2])
                     {var
                       e2=_aqA_[1],
                       e1=_aqz_[1],
                       _aqB_=0,
                       _aqC_=arg(_aqB_,e2),
                       _aqD_=0,
                       _aqE_=arg(_aqD_,e1);
                      return caml_call2(sprintf$0(_o2_),_aqE_,_aqC_)}}
                  else
                   switch$0 = 1}
                if(switch$0 && ! param[2])return of_latin1(_aqv_);
                var
                 args=param[2],
                 _aqw_=function(eta){return arg(0,eta)},
                 args$0=map$4(_aqw_,args),
                 args$1=join(_o1_,args$0),
                 _aqx_=0,
                 _aqy_=pr(_aqx_,args$1);
                return cat(of_latin1(_aqv_),_aqy_);
               case 1:
                var _aqF_=param[1];
                if(3903731 === _aqF_)
                 {var _aqG_=param[2];
                  if(_aqG_)
                   {var _aqH_=_aqG_[1],switch$1=0;
                    if(typeof _aqH_ === "number" || ! (0 === _aqH_[0]))
                     switch$1 = 1;
                    else
                     if(! caml_string_notequal(_aqH_[1],_o5_))
                      {var _aqT_=_aqH_[2];
                       if(_aqT_)
                        {var _aqU_=_aqT_[2];
                         if(_aqU_ && ! _aqU_[2] && ! _aqG_[2])
                          {var
                            e2$0=_aqU_[1],
                            e1$0=_aqT_[1],
                            _aqV_=0,
                            _aqW_=arg(_aqV_,e2$0),
                            _aqX_=8800,
                            _aqY_=chr$0(_aqX_),
                            _aqZ_=of_char$0(_aqY_),
                            _aq0_=0,
                            _aq1_=0,
                            _aq2_=spaced(_aq1_,_aq0_,_aqZ_),
                            _aq3_=cat(_aq2_,_aqW_),
                            _aq4_=0;
                           return cat(arg(_aq4_,e1$0),_aq3_)}}}}}
                var
                 fs=param[2],
                 _aqI_=unicode_of_op(_aqF_),
                 _aqJ_=chr$0(_aqI_),
                 text_lg=of_char$0(_aqJ_),
                 _aqK_=assoc_of_op(_aqF_),
                 _aqL_=combine(fs,_aqK_),
                 _aqM_=
                  function(param)
                   {var
                     cmp=param[2],
                     f=param[1],
                     _ard_=caml_call1(prio_of_op,_aqF_),
                     _are_=caml_call1(prio_of_form,f);
                    return caml_call1
                            (for_form$0([0,caml_call2(cmp,_are_,_ard_)]),f)},
                 _aqN_=function(_arc_){return map$4(_aqM_,_arc_)},
                 text_fs=_aqN_(_aqL_);
                if(3903731 === _aqF_)
                 {if(text_fs && ! text_fs[2])
                   {var f=text_fs[1],_aqO_=0;
                    return cat(spaced(_o4_,_aqO_,text_lg),f)}}
                else
                 if(text_fs)
                  {var _aqP_=text_fs[2];
                   if(_aqP_ && ! _aqP_[2])
                    {var
                      f2=_aqP_[1],
                      f1=text_fs[1],
                      _aqQ_=0,
                      _aqR_=0,
                      _aqS_=spaced(_aqR_,_aqQ_,text_lg);
                     return cat(f1,cat(_aqS_,f2))}}
                throw [0,Assert_failure,_o3_];
               default:
                var f$0=param[4],ty=param[3],x=param[2],bd=param[1];
                if(840561112 <= bd)
                 var _aq5_=8704,_aq6_=chr$0(_aq5_),bd$0=of_char$0(_aq6_);
                else
                 var _ara_=8707,_arb_=chr$0(_ara_),bd$0=of_char$0(_arb_);
                var
                 _aq7_=0,
                 _aq8_=caml_call1(for_form$0(_aq7_),f$0),
                 _aq9_=0,
                 _aq__=caml_call1(for_type$0(_aq9_),ty),
                 _aq$_=of_latin1(x);
                return caml_call4(sprintf$0(_o6_),bd$0,_aq$_,_aq__,_aq8_)}}
          var _aqp_=[0,is_pr];
          function _aqq_(_aqs_){return pr(_aqp_,_aqs_)}
          return function(_aqr_){return symbol$3(_aqq_,_aqo_,_aqr_)}},
       t_tostring=function(t){return caml_call1(for_type$0(0),t)},
       e_tostring=function(e){return arg(0,e)},
       f_tostring=function(f){return caml_call1(for_form$0(0),f)},
       for_type$1=
        function(opt,ty)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          if(typeof ty === "number")
           var
            _apg_=0,
            _aph_=0,
            _api_=[0,pcdata(_o7_),_aph_],
            _apj_=0,
            data=[0,caml_call1(span(_apj_),_api_),_apg_];
          else
           switch(ty[0])
            {case 0:
              var _apo_=ty[1],_app_=_apo_[1];
              if(caml_string_notequal(_app_,_o8_))
               {if(0 === _apo_[2])
                 var
                  _apq_=0,
                  _apr_=0,
                  _aps_=of_latin1(_app_),
                  _apt_=[0,pcdata(_aps_),_apr_],
                  _apu_=0,
                  _apv_=[0,caml_call1(span(_apu_),_apt_),_apq_];
                else
                 var
                  i=_apo_[2],
                  _apx_=0,
                  _apy_=0,
                  _apz_=of_latin1(_app_),
                  _apA_=caml_call2(sprintf(_o9_),_apz_,i),
                  _apB_=[0,pcdata(_apA_),_apy_],
                  _apC_=0,
                  _apv_=[0,caml_call1(span(_apC_),_apB_),_apx_];
                var _apw_=_apv_}
              else
               var
                _apD_=0,
                _apE_=0,
                _apF_=[0,pcdata(_o__),_apE_],
                _apG_=0,
                _apw_=[0,caml_call1(span(_apG_),_apF_),_apD_];
              var data=_apw_;
              break;
             case 3:
              var
               t=ty[2],
               x=ty[1],
               _apT_=0,
               _apU_=0,
               _apV_=0,
               _apW_=for_type$1(_apV_,t),
               _apX_=0,
               _apY_=[0,[0,caml_call1(span(_apX_),_apW_),_apU_],_apT_],
               _apZ_=0,
               _ap0_=0,
               _ap1_=0,
               _ap2_=[0,pcdata(_pa_),_ap1_],
               _ap3_=0,
               _ap4_=[0,[0,caml_call1(span(_ap3_),_ap2_),_ap0_],_apZ_],
               _ap5_=append(_ap4_,_apY_),
               _ap6_=0,
               _ap7_=0,
               _ap8_=0,
               _ap9_=of_latin1(x),
               _ap__=[0,pcdata(_ap9_),_ap8_],
               _ap$_=0,
               _aqa_=[0,[0,caml_call1(span(_ap$_),_ap__),_ap7_],_ap6_],
               _aqb_=append(_aqa_,_ap5_),
               _aqc_=0,
               _aqd_=0,
               _aqe_=0,
               _aqf_=[0,pcdata(_pb_),_aqe_],
               _aqg_=0,
               _aqh_=[0,[0,caml_call1(span(_aqg_),_aqf_),_aqd_],_aqc_],
               aout=append(_aqh_,_aqb_),
               _aqi_=0,
               _aqj_=0,
               _aqk_=[0,entity(_pc_),_aqj_],
               _aql_=0,
               _aqm_=[0,caml_call1(span(_aql_),_aqk_),_aqi_],
               _aqn_=caml_call1(join$2(_aqm_),aout),
               data=flatten$0(_aqn_);
              break;
             default:
              var
               t2=ty[2],
               t1=ty[1],
               _apH_=caml_call1(prio_of_type,ty),
               _apI_=[0,caml_call1(prio_of_type,t1) < _apH_?1:0],
               t1$0=for_type$1(_apI_,t1),
               _apJ_=caml_call1(prio_of_type,ty),
               _apK_=[0,caml_call1(prio_of_type,t2) <= _apJ_?1:0],
               t2$0=for_type$1(_apK_,t2),
               switch$0=0;
              if(typeof ty !== "number")
               switch(ty[0])
                {case 1:var tycon=42;switch$0 = 1;break;
                 case 2:var tycon=43;switch$0 = 1;break
                 }
              if(! switch$0)throw [0,Assert_failure,_o$_];
              var
               _apL_=0,
               _apM_=of_char(tycon),
               _apN_=of_char$0(_apM_),
               _apO_=[0,pcdata(_apN_),_apL_],
               _apP_=0,
               _apQ_=0,
               _apR_=spaced$0(_apQ_,_apP_,_apO_),
               _apS_=append(_apR_,t2$0),
               data=append(t1$0,_apS_)}
          var _apk_=0,_apl_=[0,is_pr],_apm_=pr$0(_apl_,data),_apn_=0;
          return [0,caml_call1(span(_apn_),_apm_),_apk_]},
       for_expr$0=
        function(id,opt,p)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          return function(expr)
           {function for_expr(_ape_,_apf_){return for_expr$0(id,_ape_,_apf_)}
            function thisid(p)
             {function _ao8_(prefix)
               {var _apd_=rev_map(to_string,p),p$0=join(_pd_,_apd_);
                return fold$3
                        (function(p,prefix)
                          {return caml_call2(sprintf$0(_pe_),prefix,p)},
                         p$0,
                         prefix)}
              function _ao9_(_apc_){return map$3(_ao8_,_apc_)}
              var _ao__=_ao9_(id);
              function _ao$_(x){return string_attrib(_pf_,x)}
              function _apa_(_apb_){return map$3(_ao$_,_apb_)}
              return of_option(_apa_(_ao__))}
            var id$0=[0,1];
            if(0 === expr[0])
             {var _anr_=expr[1],_ans_=_anr_[1];
              if(0 === _anr_[2])
               var
                _ant_=0,
                _anu_=0,
                _anv_=of_latin1(_ans_),
                _anw_=[0,pcdata(_anv_),_anu_],
                _anx_=0,
                _any_=[0,caml_call1(span(_anx_),_anw_),_ant_];
              else
               var
                i=_anr_[2],
                _anE_=0,
                _anF_=0,
                _anG_=of_latin1(_ans_),
                _anH_=caml_call2(sprintf(_pg_),_anG_,i),
                _anI_=[0,pcdata(_anH_),_anF_],
                _anJ_=0,
                _any_=[0,caml_call1(span(_anJ_),_anI_),_anE_];
              var data=_any_}
            else
             {var _anK_=expr[1],switch$0=0;
              if
               (caml_string_notequal(_anK_,_ph_)
                &&
                caml_string_notequal(_anK_,_pi_)
                &&
                caml_string_notequal(_anK_,_pj_)
                &&
                caml_string_notequal(_anK_,_pk_))
               {var
                 args=expr[2],
                 _anL_=function(i,e){return caml_call1(for_expr(0,[0,i,p]),e)},
                 args$0=mapi(_anL_,args),
                 _anM_=0,
                 _anN_=0,
                 _anO_=0,
                 _anP_=[0,entity(_pl_),_anO_],
                 _anQ_=[0,pcdata(_pm_),_anP_],
                 _anR_=0,
                 _anS_=[0,caml_call1(span(_anR_),_anQ_),_anN_],
                 _anT_=caml_call1(join$2(_anS_),args$0),
                 _anU_=flatten$0(_anT_),
                 _anV_=0,
                 _anW_=[0,pr$0(_anV_,_anU_),_anM_],
                 _anX_=0,
                 _anY_=0,
                 _anZ_=0,
                 _an0_=of_latin1(_anK_),
                 _an1_=[0,pcdata(_an0_),_anZ_],
                 _an2_=0,
                 _an3_=[0,[0,caml_call1(span(_an2_),_an1_),_anY_],_anX_],
                 aout=append(_an3_,_anW_),
                 _an4_=0,
                 _an5_=0,
                 _an6_=[0,entity(_pn_),_an5_],
                 _an7_=0,
                 _an8_=[0,caml_call1(span(_an7_),_an6_),_an4_],
                 _an9_=caml_call1(join$2(_an8_),aout),
                 _an__=flatten$0(_an9_);
                switch$0 = 1}
              if(! switch$0)
               {var
                 es=expr[2],
                 xml=
                  function(es,p)
                   {var _ao1_=assoc_of_fun(_anK_),_ao2_=combine(es,_ao1_);
                    function _ao3_(i,param)
                     {var
                       cmp=param[2],
                       e=param[1],
                       _ao5_=[0,i,p],
                       _ao6_=caml_call1(prio_of_fun,_anK_),
                       _ao7_=caml_call1(prio_of_expr,e);
                      return caml_call1
                              (for_expr([0,caml_call2(cmp,_ao7_,_ao6_)],_ao5_),e)}
                    return function(_ao4_){return mapi(_ao3_,_ao4_)}(_ao2_)},
                 match=xml(es,p);
                if(caml_string_notequal(_anK_,_po_))
                 {var switch$1=0;
                  if(caml_string_notequal(_anK_,_pp_))
                   {if(caml_string_notequal(_anK_,_pq_))
                     {if(! caml_string_notequal(_anK_,_pr_) && match)
                       {var _an$_=match[2];
                        if(_an$_ && ! _an$_[2])
                         {var
                           e2=_an$_[1],
                           e1=match[1],
                           _aoa_=0,
                           _aob_=0,
                           _aoc_=[0,pcdata(_pt_),_aob_],
                           _aod_=0,
                           _aoe_=[0,caml_call1(span(_aod_),_aoc_),_aoa_],
                           _aof_=0,
                           _aog_=0,
                           _aoh_=spaced$0(_aog_,_aof_,_aoe_),
                           _aoi_=append(_aoh_,e2),
                           _aoj_=append(e1,_aoi_),
                           _aok_=_aoj_;
                          switch$1 = 1}}}
                    else
                     if(match)
                      {var _aol_=match[2];
                       if(_aol_ && ! _aol_[2])
                        {var
                          e2$0=_aol_[1],
                          e1$0=match[1],
                          _aom_=0,
                          _aon_=0,
                          _aoo_=[0,pcdata(_pu_),_aon_],
                          _aop_=0,
                          _aoq_=[0,caml_call1(span(_aop_),_aoo_),_aom_],
                          _aor_=0,
                          _aos_=0,
                          _aot_=spaced$0(_aos_,_aor_,_aoq_),
                          _aou_=append(_aot_,e2$0),
                          _aov_=append(e1$0,_aou_),
                          _aok_=_aov_;
                         switch$1 = 1}}}
                  else
                   if(! match)
                    {var
                      _aow_=0,
                      _aox_=0,
                      _aoy_=[0,pcdata(_pv_),_aox_],
                      _aoz_=0,
                      _aok_=[0,caml_call1(span(_aoz_),_aoy_),_aow_];
                     switch$1 = 1}
                  if(! switch$1)throw [0,Assert_failure,_ps_]}
                else
                 {id$0[1] = 0;
                  var
                   numeral=
                    function(acc,num,sub,e)
                     {var acc$0=acc,num$0=num,sub$0=sub,e$0=e;
                      for(;;)
                       {if(1 === e$0[0])
                         {var _aoQ_=e$0[1];
                          if(caml_string_notequal(_aoQ_,_px_))
                           {if(! caml_string_notequal(_aoQ_,_py_) && ! e$0[2])
                             {var
                               _aoR_=0,
                               _aoS_=0,
                               _aoT_=to_string(num$0),
                               _aoU_=[0,pcdata(_aoT_),_aoS_],
                               _aoV_=caml_call1(acc$0,_aoU_),
                               _aoW_=[0,thisid(sub$0)];
                              return [0,caml_call1(span(_aoW_),_aoV_),_aoR_]}}
                          else
                           {var _aoX_=e$0[2];
                            if(_aoX_ && ! _aoX_[2])
                             {var
                               e$1=_aoX_[1],
                               sub$1=[0,0,sub$0],
                               num$1=num$0 + 1 | 0,
                               acc$2=
                                function(sub,acc)
                                 {function acc$0(x)
                                   {var _aoY_=0,_aoZ_=caml_call1(acc,x),_ao0_=[0,thisid(sub)];
                                    return [0,caml_call1(span(_ao0_),_aoZ_),_aoY_]}
                                  return acc$0},
                               acc$1=acc$2(sub$0,acc$0),
                               acc$0=acc$1,
                               num$0=num$1,
                               sub$0=sub$1,
                               e$0=e$1;
                              continue}}}
                        var
                         _aoD_=0,
                         _aoE_=to_string(num$0),
                         _aoF_=[0,pcdata(_aoE_),_aoD_],
                         _aoG_=0,
                         _aoH_=0,
                         _aoI_=[0,pcdata(_pw_),_aoH_],
                         _aoJ_=0,
                         _aoK_=[0,caml_call1(span(_aoJ_),_aoI_),_aoG_],
                         _aoL_=append(_aoK_,_aoF_),
                         _aoM_=tl(sub$0),
                         _aoN_=[0,e$0,0],
                         _aoO_=xml(_aoN_,_aoM_),
                         _aoP_=hd(_aoO_);
                        return caml_call1(acc$0,append(_aoP_,_aoL_))}},
                   _aoA_=0,
                   _aoB_=function(_aoC_){return _aoC_},
                   _aok_=numeral(_aoB_,_aoA_,p,expr)}
                var _an__=_aok_}
              var data=_an__}
            var
             _anz_=0,
             _anA_=[0,is_pr],
             _anB_=pr$0(_anA_,data),
             _anC_=id$0[1]?thisid(p):0,
             _anD_=[0,_anC_];
            return [0,caml_call1(span(_anD_),_anB_),_anz_]}},
       for_form$1=
        function(id,opt,p)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          return function(form)
           {function for_form(_anp_,_anq_){return for_form$1(id,_anp_,_anq_)}
            function thisid(p)
             {function _anh_(prefix)
               {var _ano_=rev_map(to_string,p),p$0=join(_pz_,_ano_);
                return fold$3
                        (function(p,prefix)
                          {return caml_call2(sprintf$0(_pA_),prefix,p)},
                         p$0,
                         prefix)}
              function _ani_(_ann_){return map$3(_anh_,_ann_)}
              var _anj_=_ani_(id);
              function _ank_(x){return string_attrib(_pB_,x)}
              function _anl_(_anm_){return map$3(_ank_,_anm_)}
              return of_option(_anl_(_anj_))}
            if(typeof form === "number")
             if(0 === form)
              var
               _akM_=0,
               _akN_=0,
               _akO_=[0,entity(_pC_),_akN_],
               _akP_=0,
               data=[0,caml_call1(span(_akP_),_akO_),_akM_];
             else
              var
               _akU_=0,
               _akV_=0,
               _akW_=[0,entity(_pD_),_akV_],
               _akX_=0,
               data=[0,caml_call1(span(_akX_),_akW_),_akU_];
            else
             switch(form[0])
              {case 0:
                var _akY_=form[1],switch$0=0;
                if(caml_string_notequal(_akY_,_pE_))
                 switch$0 = 2;
                else
                 {var _als_=form[2];
                  if(_als_)
                   {var _alt_=_als_[2];
                    if(_alt_ && ! _alt_[2])
                     {var
                       e2=_alt_[1],
                       e1=_als_[1],
                       _alu_=0,
                       _alv_=[0,1,p],
                       _alw_=0,
                       _alx_=caml_call1(for_expr$0(id,_alw_,_alv_),e2),
                       _aly_=0,
                       _alz_=[0,caml_call1(span(_aly_),_alx_),_alu_],
                       _alA_=0,
                       _alB_=[0,entity(_pI_),_alA_],
                       _alC_=[0,pcdata(_pJ_),_alB_],
                       _alD_=[0,entity(_pK_),_alC_],
                       _alE_=0,
                       _alF_=[0,caml_call1(span(_alE_),_alD_),_alz_],
                       _alG_=[0,0,p],
                       _alH_=0,
                       _alI_=caml_call1(for_expr$0(id,_alH_,_alG_),e1),
                       _alJ_=0,
                       _alK_=[0,caml_call1(span(_alJ_),_alI_),_alF_],
                       _alm_=_alK_;
                      switch$0 = 1}}
                  else
                   switch$0 = 2}
                var switch$1=0;
                switch(switch$0)
                 {case 2:
                   if(form[2])
                    switch$1 = 1;
                   else
                    var
                     _aln_=0,
                     _alo_=0,
                     _alp_=of_latin1(_akY_),
                     _alq_=[0,pcdata(_alp_),_alo_],
                     _alr_=0,
                     _alm_=[0,caml_call1(span(_alr_),_alq_),_aln_];
                   break;
                  case 0:switch$1 = 1;break
                  }
                if(switch$1)
                 var
                  args=form[2],
                  _akZ_=
                   function(i,e){return caml_call1(for_expr$0(id,0,[0,i,p]),e)},
                  args$0=mapi(_akZ_,args),
                  _ak0_=0,
                  _ak1_=0,
                  _ak2_=0,
                  _ak3_=[0,entity(_pF_),_ak2_],
                  _ak4_=[0,pcdata(_pG_),_ak3_],
                  _ak5_=0,
                  _ak6_=[0,caml_call1(span(_ak5_),_ak4_),_ak1_],
                  _ak7_=caml_call1(join$2(_ak6_),args$0),
                  _ak8_=flatten$0(_ak7_),
                  _ak9_=0,
                  _ak__=[0,pr$0(_ak9_,_ak8_),_ak0_],
                  _ak$_=0,
                  _ala_=0,
                  _alb_=0,
                  _alc_=of_latin1(_akY_),
                  _ald_=[0,pcdata(_alc_),_alb_],
                  _ale_=0,
                  _alf_=[0,[0,caml_call1(span(_ale_),_ald_),_ala_],_ak$_],
                  aout=append(_alf_,_ak__),
                  _alg_=0,
                  _alh_=0,
                  _ali_=[0,entity(_pH_),_alh_],
                  _alj_=0,
                  _alk_=[0,caml_call1(span(_alj_),_ali_),_alg_],
                  _all_=caml_call1(join$2(_alk_),aout),
                  _alm_=flatten$0(_all_);
                var data=_alm_;
                break;
               case 1:
                var _alL_=form[1],switch$2=0;
                if(3903731 === _alL_)
                 {var _alM_=form[2];
                  if(_alM_)
                   {var _alN_=_alM_[1],switch$3=0;
                    if(typeof _alN_ !== "number" && 0 === _alN_[0])
                     if(caml_string_notequal(_alN_[1],_pO_))
                      switch$3 = 1;
                     else
                      {var _al7_=_alN_[2];
                       if(_al7_)
                        {var _al8_=_al7_[2];
                         if(_al8_ && ! (_al8_[2] || _alM_[2]))
                          {var
                            e2$0=_al8_[1],
                            e1$0=_al7_[1],
                            _al9_=0,
                            _al__=0,
                            _al$_=[0,1,[0,0,p]],
                            _ama_=0,
                            _amb_=caml_call1(for_expr$0(id,_ama_,_al$_),e2$0),
                            _amc_=0,
                            _amd_=[0,caml_call1(span(_amc_),_amb_),_al__],
                            _ame_=0,
                            _amf_=[0,entity(_pP_),_ame_],
                            _amg_=[0,entity(_pQ_),_amf_],
                            _amh_=[0,entity(_pR_),_amg_],
                            _ami_=0,
                            _amj_=[0,caml_call1(span(_ami_),_amh_),_amd_],
                            _amk_=[0,0,[0,0,p]],
                            _aml_=0,
                            _amm_=caml_call1(for_expr$0(id,_aml_,_amk_),e1$0),
                            _amn_=0,
                            _amo_=[0,caml_call1(span(_amn_),_amm_),_amj_],
                            _amp_=[0,0,p],
                            _amq_=[0,thisid(_amp_)],
                            _amr_=[0,caml_call1(span(_amq_),_amo_),_al9_],
                            _al0_=_amr_;
                           switch$2 = 1;
                           switch$3 = 1}
                         else
                          switch$3 = 1}
                       else
                        switch$3 = 1}}}
                if(! switch$2)
                 {var
                   fs=form[2],
                   _alO_=unicode_of_op(_alL_),
                   hexcode=caml_call1(sprintf(_pL_),_alO_),
                   _alP_=0,
                   _alQ_=0,
                   _alR_=[0,entity(hexcode),_alQ_],
                   _alS_=0,
                   xml_lg=[0,caml_call1(span(_alS_),_alR_),_alP_],
                   _alT_=assoc_of_op(_alL_),
                   _alU_=combine(fs,_alT_),
                   _alV_=
                    function(i,param)
                     {var
                       cmp=param[2],
                       f=param[1],
                       _ane_=[0,i,p],
                       _anf_=caml_call1(prio_of_op,_alL_),
                       _ang_=caml_call1(prio_of_form,f);
                      return caml_call1
                              (for_form([0,caml_call2(cmp,_ang_,_anf_)],_ane_),f)},
                   _alW_=function(_and_){return mapi(_alV_,_and_)},
                   xml_fs=_alW_(_alU_),
                   switch$4=0;
                  if(3903731 === _alL_)
                   {if(xml_fs && ! xml_fs[2])
                     {var
                       f=xml_fs[1],
                       _alX_=0,
                       _alY_=spaced$0(_pN_,_alX_,xml_lg),
                       _alZ_=append(_alY_,f);
                      switch$4 = 1}}
                  else
                   if(xml_fs)
                    {var _al1_=xml_fs[2];
                     if(_al1_ && ! _al1_[2])
                      {var
                        f2=_al1_[1],
                        f1=xml_fs[1],
                        _al2_=0,
                        _al3_=0,
                        _al4_=spaced$0(_al3_,_al2_,xml_lg),
                        _al5_=append(_al4_,f2),
                        _al6_=append(f1,_al5_),
                        _alZ_=_al6_;
                       switch$4 = 1}}
                  if(! switch$4)throw [0,Assert_failure,_pM_];
                  var _al0_=_alZ_}
                var data=_al0_;
                break;
               default:
                var f$0=form[4],ty=form[3],x=form[2],bd=form[1];
                if(840561112 <= bd)
                 var _ams_=8704,_amt_=chr$0(_ams_),bd$0=of_char$0(_amt_);
                else
                 var _anb_=8707,_anc_=chr$0(_anb_),bd$0=of_char$0(_anc_);
                var
                 _amu_=0,
                 _amv_=[0,0,p],
                 _amw_=0,
                 _amx_=[0,caml_call1(for_form(_amw_,_amv_),f$0),_amu_],
                 _amy_=0,
                 _amz_=0,
                 _amA_=0,
                 _amB_=[0,pcdata(_pS_),_amA_],
                 _amC_=0,
                 _amD_=[0,[0,caml_call1(span(_amC_),_amB_),_amz_],_amy_],
                 _amE_=append(_amD_,_amx_),
                 _amF_=0,
                 _amG_=0,
                 _amH_=0,
                 _amI_=for_type$1(_amH_,ty),
                 _amJ_=0,
                 _amK_=[0,[0,caml_call1(span(_amJ_),_amI_),_amG_],_amF_],
                 _amL_=append(_amK_,_amE_),
                 _amM_=0,
                 _amN_=0,
                 _amO_=0,
                 _amP_=[0,pcdata(_pT_),_amO_],
                 _amQ_=0,
                 _amR_=[0,[0,caml_call1(span(_amQ_),_amP_),_amN_],_amM_],
                 _amS_=append(_amR_,_amL_),
                 _amT_=0,
                 _amU_=0,
                 _amV_=0,
                 _amW_=of_latin1(x),
                 _amX_=[0,pcdata(_amW_),_amV_],
                 _amY_=0,
                 _amZ_=[0,[0,caml_call1(span(_amY_),_amX_),_amU_],_amT_],
                 _am0_=append(_amZ_,_amS_),
                 _am1_=0,
                 _am2_=0,
                 _am3_=0,
                 _am4_=[0,pcdata(bd$0),_am3_],
                 _am5_=0,
                 _am6_=[0,[0,caml_call1(span(_am5_),_am4_),_am2_],_am1_],
                 aout$0=append(_am6_,_am0_),
                 _am7_=0,
                 _am8_=0,
                 _am9_=[0,entity(_pU_),_am8_],
                 _am__=0,
                 _am$_=[0,caml_call1(span(_am__),_am9_),_am7_],
                 _ana_=caml_call1(join$2(_am$_),aout$0),
                 data=flatten$0(_ana_)}
            var
             _akQ_=0,
             _akR_=[0,is_pr],
             _akS_=pr$0(_akR_,data),
             _akT_=[0,thisid(p)];
            return [0,caml_call1(span(_akT_),_akS_),_akQ_]}},
       t_tohtml=
        function(ty)
         {var _akK_=0,_akL_=for_type$1(_akK_,ty);
          return caml_call1(span(0),_akL_)},
       e_tohtml=
        function(id,expr)
         {var
           _akH_=0,
           _akI_=0,
           _akJ_=caml_call1(for_expr$0(id,_akI_,_akH_),expr);
          return caml_call1(span(0),_akJ_)},
       f_tohtml=
        function(id,form)
         {var
           _akE_=0,
           _akF_=0,
           _akG_=caml_call1(for_form$1(id,_akF_,_akE_),form);
          return caml_call1(span(0),_akG_)},
       for_type$2=
        function(opt,ty)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          if(typeof ty === "number")
           var
            _aj3_=0,
            _aj4_=8226,
            _aj5_=of_int$0(_aj4_),
            _aj6_=of_char$0(_aj5_),
            data=[0,mo(_aj6_),_aj3_];
          else
           switch(ty[0])
            {case 0:
              var _aj$_=ty[1],_aka_=_aj$_[1];
              if(caml_string_notequal(_aka_,_pV_))
               {if(0 === _aj$_[2])
                 var _akb_=0,_akc_=of_latin1(_aka_),_akd_=[0,mi(_akc_),_akb_];
                else
                 var
                  i=_aj$_[2],
                  _akf_=of_latin1(_aka_),
                  x=caml_call2(sprintf(_pW_),_akf_,i),
                  _akg_=0,
                  _akh_=of_latin1(x),
                  _akd_=[0,mi(_akh_),_akg_];
                var _ake_=_akd_}
              else
               var _aki_=0,_ake_=[0,mo(_pX_),_aki_];
              var data=_ake_;
              break;
             case 3:
              var
               t=ty[2],
               x$0=ty[1],
               _akt_=0,
               _aku_=for_type$2(_akt_,t),
               _akv_=0,
               _akw_=of_latin1(_pZ_),
               _akx_=[0,mo(_akw_),_akv_],
               _aky_=of_latin1(x$0),
               _akz_=[0,mi(_aky_),_akx_],
               _akA_=956,
               _akB_=of_int$0(_akA_),
               _akC_=of_char$0(_akB_),
               _akD_=[0,mo(_akC_),_akz_],
               data=append(_akD_,_aku_);
              break;
             default:
              var
               t2=ty[2],
               t1=ty[1],
               _akj_=caml_call1(prio_of_type,ty),
               _akk_=[0,caml_call1(prio_of_type,t1) < _akj_?1:0],
               t1$0=for_type$2(_akk_,t1),
               _akl_=caml_call1(prio_of_type,ty),
               _akm_=[0,caml_call1(prio_of_type,t2) <= _akl_?1:0],
               t2$0=for_type$2(_akm_,t2),
               switch$0=0;
              if(typeof ty !== "number")
               switch(ty[0])
                {case 1:
                  var _akn_=215,tycon=of_int$0(_akn_);switch$0 = 1;break;
                 case 2:var _aks_=43,tycon=of_int$0(_aks_);switch$0 = 1;break
                 }
              if(! switch$0)throw [0,Assert_failure,_pY_];
              var
               _ako_=0,
               _akp_=of_char$0(tycon),
               _akq_=[0,mo(_akp_),_ako_],
               _akr_=append(_akq_,t2$0),
               data=append(t1$0,_akr_)}
          var
           _aj7_=0,
           _aj8_=0,
           _aj9_=caml_call1(row(_aj8_),data),
           _aj__=[0,is_pr];
          return [0,pr$1(_aj__,_aj9_),_aj7_]},
       for_expr$1=
        function(id,opt,p)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          return function(expr)
           {function for_expr(_aj1_,_aj2_){return for_expr$1(id,_aj1_,_aj2_)}
            if(0 === expr[0])
             {var _aiU_=expr[1],_aiV_=_aiU_[1];
              if(0 === _aiU_[2])
               var _aiW_=0,_aiX_=of_latin1(_aiV_),_aiY_=[0,mi(_aiX_),_aiW_];
              else
               var
                i=_aiU_[2],
                _ai7_=of_latin1(_aiV_),
                x=caml_call2(sprintf(_p3_),_ai7_,i),
                _ai8_=0,
                _ai9_=of_latin1(x),
                _aiY_=[0,mi(_ai9_),_ai8_];
              var data=_aiY_}
            else
             {var _ai__=expr[1],switch$0=0;
              if
               (caml_string_notequal(_ai__,_p4_)
                &&
                caml_string_notequal(_ai__,_p5_)
                &&
                caml_string_notequal(_ai__,_p6_)
                &&
                caml_string_notequal(_ai__,_p7_))
               {var
                 args=expr[2],
                 _ai$_=function(i,e){return caml_call1(for_expr(0,[0,i,p]),e)},
                 args$0=mapi(_ai$_,args),
                 _aja_=0,
                 _ajb_=0,
                 _ajc_=[0,mo(_p8_),_ajb_],
                 _ajd_=caml_call1(join$2(_ajc_),args$0),
                 _aje_=flatten$0(_ajd_),
                 _ajf_=0,
                 _ajg_=caml_call1(row(_ajf_),_aje_),
                 _ajh_=0,
                 _aji_=[0,pr$1(_ajh_,_ajg_),_aja_],
                 _ajj_=0,
                 _ajk_=of_latin1(_ai__),
                 _ajl_=[0,mi(_ajk_),_ajj_],
                 _ajm_=append(_ajl_,_aji_);
                switch$0 = 1}
              if(! switch$0)
               {var
                 es=expr[2],
                 xml=
                  function(es,p)
                   {var _ajU_=assoc_of_fun(_ai__),_ajV_=combine(es,_ajU_);
                    function _ajW_(i,param)
                     {var
                       cmp=param[2],
                       e=param[1],
                       _ajY_=[0,i,p],
                       _ajZ_=caml_call1(prio_of_fun,_ai__),
                       _aj0_=caml_call1(prio_of_expr,e);
                      return caml_call1
                              (for_expr([0,caml_call2(cmp,_aj0_,_ajZ_)],_ajY_),e)}
                    return function(_ajX_){return mapi(_ajW_,_ajX_)}(_ajV_)},
                 match=xml(es,p);
                if(caml_string_notequal(_ai__,_p9_))
                 {var switch$1=0;
                  if(caml_string_notequal(_ai__,_p__))
                   {if(caml_string_notequal(_ai__,_p$_))
                     {if(! caml_string_notequal(_ai__,_qa_) && match)
                       {var _ajn_=match[2];
                        if(_ajn_ && ! _ajn_[2])
                         {var
                           e2=_ajn_[1],
                           e1=match[1],
                           _ajo_=0,
                           _ajp_=[0,mo(_qc_),_ajo_],
                           _ajq_=append(_ajp_,e2),
                           _ajr_=append(e1,_ajq_),
                           _ajs_=_ajr_;
                          switch$1 = 1}}}
                    else
                     if(match)
                      {var _ajt_=match[2];
                       if(_ajt_ && ! _ajt_[2])
                        {var
                          e2$0=_ajt_[1],
                          e1$0=match[1],
                          _aju_=0,
                          _ajv_=[0,mo(_qd_),_aju_],
                          _ajw_=append(_ajv_,e2$0),
                          _ajx_=append(e1$0,_ajw_),
                          _ajs_=_ajx_;
                         switch$1 = 1}}}
                  else
                   if(! match)
                    {var _ajy_=0,_ajs_=[0,mn(_qe_),_ajy_];switch$1 = 1}
                  if(! switch$1)throw [0,Assert_failure,_qb_]}
                else
                 {var switch$2=0;
                  if(es && ! es[2])
                   {var
                     n=es[1],
                     numeral=
                      function(acc,e)
                       {var acc$0=acc,e$0=e;
                        for(;;)
                         {if(1 === e$0[0])
                           {var _ajQ_=e$0[1];
                            if(caml_string_notequal(_ajQ_,_qh_))
                             {if(! caml_string_notequal(_ajQ_,_qi_) && ! e$0[2])
                               {var _ajR_=0,_ajS_=to_string(acc$0);
                                return [0,mn(_ajS_),_ajR_]}}
                            else
                             {var _ajT_=e$0[2];
                              if(_ajT_ && ! _ajT_[2])
                               {var e$1=_ajT_[1],acc$1=acc$0 + 1 | 0,acc$0=acc$1,e$0=e$1;
                                continue}}}
                          var
                           _ajE_=0,
                           _ajF_=to_string(acc$0),
                           _ajG_=[0,mn(_ajF_),_ajE_],
                           _ajH_=0,
                           _ajI_=[0,mo(_qg_),_ajH_],
                           _ajJ_=append(_ajI_,_ajG_),
                           _ajK_=function(param){return 0},
                           _ajL_=acc$0 - 1 | 0,
                           _ajM_=init$0(_ajL_,_ajK_),
                           _ajN_=append(_ajM_,p),
                           _ajO_=[0,e$0,0],
                           _ajP_=xml(_ajO_,_ajN_);
                          return append(hd(_ajP_),_ajJ_)}},
                     _ajz_=1,
                     _ajs_=numeral(_ajz_,n);
                    switch$2 = 1}
                  if(! switch$2)throw [0,Assert_failure,_qf_]}
                var _ajm_=_ajs_}
              var data=_ajm_}
            function _aiZ_(prefix)
             {var _ajD_=rev_map(to_string,p),p$0=join(_p0_,_ajD_);
              return fold$3
                      (function(p,prefix)
                        {return caml_call2(sprintf$0(_p1_),prefix,p)},
                       p$0,
                       prefix)}
            function _ai0_(_ajC_){return map$3(_aiZ_,_ajC_)}
            var thisid=_ai0_(id);
            function _ai1_(_ajB_){return string_attrib(_p2_,_ajB_)}
            function _ai2_(_ajA_){return map$3(_ai1_,_ajA_)}
            var
             thisid$0=_ai2_(thisid),
             _ai3_=0,
             _ai4_=[0,of_option(thisid$0)],
             _ai5_=caml_call1(row(_ai4_),data),
             _ai6_=[0,is_pr];
            return [0,pr$1(_ai6_,_ai5_),_ai3_]}},
       for_form$2=
        function(id,opt,p)
         {if(opt)var sth=opt[1],is_pr=sth;else var is_pr=0;
          return function(form)
           {function for_form(_aiS_,_aiT_){return for_form$2(id,_aiS_,_aiT_)}
            function thisid(p)
             {function _aiK_(prefix)
               {var _aiR_=rev_map(to_string,p),p$0=join(_qj_,_aiR_);
                return fold$3
                        (function(p,prefix)
                          {return caml_call2(sprintf$0(_qk_),prefix,p)},
                         p$0,
                         prefix)}
              function _aiL_(_aiQ_){return map$3(_aiK_,_aiQ_)}
              var _aiM_=_aiL_(id);
              function _aiN_(x){return string_attrib(_ql_,x)}
              function _aiO_(_aiP_){return map$3(_aiN_,_aiP_)}
              return of_option(_aiO_(_aiM_))}
            if(typeof form === "number")
             if(0 === form)
              var
               _aha_=0,
               _ahb_=8868,
               _ahc_=of_int$0(_ahb_),
               _ahd_=of_char$0(_ahc_),
               data=[0,mo(_ahd_),_aha_];
             else
              var
               _ahi_=0,
               _ahj_=8869,
               _ahk_=of_int$0(_ahj_),
               _ahl_=of_char$0(_ahk_),
               data=[0,mo(_ahl_),_ahi_];
            else
             switch(form[0])
              {case 0:
                var _ahm_=form[1],switch$0=0;
                if(caml_string_notequal(_ahm_,_qm_))
                 switch$0 = 2;
                else
                 {var _ahD_=form[2];
                  if(_ahD_)
                   {var _ahE_=_ahD_[2];
                    if(_ahE_ && ! _ahE_[2])
                     {var
                       e2=_ahE_[1],
                       e1=_ahD_[1],
                       _ahF_=[0,1,p],
                       _ahG_=0,
                       _ahH_=caml_call1(for_expr$1(id,_ahG_,_ahF_),e2),
                       _ahI_=0,
                       _ahJ_=of_latin1(_qo_),
                       _ahK_=[0,mo(_ahJ_),_ahI_],
                       _ahL_=append(_ahK_,_ahH_),
                       _ahM_=[0,0,p],
                       _ahN_=0,
                       _ahO_=caml_call1(for_expr$1(id,_ahN_,_ahM_),e1),
                       _ahP_=append(_ahO_,_ahL_),
                       _ahA_=_ahP_;
                      switch$0 = 1}}
                  else
                   switch$0 = 2}
                var switch$1=0;
                switch(switch$0)
                 {case 2:
                   if(form[2])
                    switch$1 = 1;
                   else
                    var
                     _ahB_=0,
                     _ahC_=of_latin1(_ahm_),
                     _ahA_=[0,mi(_ahC_),_ahB_];
                   break;
                  case 0:switch$1 = 1;break
                  }
                if(switch$1)
                 var
                  args=form[2],
                  _ahn_=
                   function(i,e){return caml_call1(for_expr$1(id,0,[0,i,p]),e)},
                  args$0=mapi(_ahn_,args),
                  _aho_=0,
                  _ahp_=0,
                  _ahq_=[0,mo(_qn_),_ahp_],
                  _ahr_=caml_call1(join$2(_ahq_),args$0),
                  _ahs_=flatten$0(_ahr_),
                  _aht_=0,
                  _ahu_=caml_call1(row(_aht_),_ahs_),
                  _ahv_=0,
                  _ahw_=[0,pr$1(_ahv_,_ahu_),_aho_],
                  _ahx_=0,
                  _ahy_=of_latin1(_ahm_),
                  _ahz_=[0,mi(_ahy_),_ahx_],
                  _ahA_=append(_ahz_,_ahw_);
                var data=_ahA_;
                break;
               case 1:
                var _ahQ_=form[1],switch$2=0;
                if(3903731 === _ahQ_)
                 {var _ahR_=form[2];
                  if(_ahR_)
                   {var _ahS_=_ahR_[1],switch$3=0;
                    if(typeof _ahS_ !== "number" && 0 === _ahS_[0])
                     if(caml_string_notequal(_ahS_[1],_qq_))
                      switch$3 = 1;
                     else
                      {var _ah6_=_ahS_[2];
                       if(_ah6_)
                        {var _ah7_=_ah6_[2];
                         if(_ah7_ && ! (_ah7_[2] || _ahR_[2]))
                          {var
                            e2$0=_ah7_[1],
                            e1$0=_ah6_[1],
                            _ah8_=0,
                            _ah9_=[0,1,[0,0,p]],
                            _ah__=0,
                            _ah$_=caml_call1(for_expr$1(id,_ah__,_ah9_),e2$0),
                            _aia_=0,
                            _aib_=8800,
                            _aic_=of_int$0(_aib_),
                            _aid_=of_char$0(_aic_),
                            _aie_=[0,mo(_aid_),_aia_],
                            _aif_=append(_aie_,_ah$_),
                            _aig_=[0,0,[0,0,p]],
                            _aih_=0,
                            _aii_=caml_call1(for_expr$1(id,_aih_,_aig_),e1$0),
                            _aij_=append(_aii_,_aif_),
                            _aik_=[0,0,p],
                            _ail_=[0,thisid(_aik_)],
                            _aim_=[0,caml_call1(row(_ail_),_aij_),_ah8_],
                            _ah2_=_aim_;
                           switch$2 = 1;
                           switch$3 = 1}
                         else
                          switch$3 = 1}
                       else
                        switch$3 = 1}}}
                if(! switch$2)
                 {var
                   fs=form[2],
                   _ahT_=0,
                   _ahU_=unicode_of_op(_ahQ_),
                   _ahV_=of_int$0(_ahU_),
                   _ahW_=of_char$0(_ahV_),
                   xml_lg=[0,mo(_ahW_),_ahT_],
                   _ahX_=assoc_of_op(_ahQ_),
                   _ahY_=combine(fs,_ahX_),
                   _ahZ_=
                    function(i,param)
                     {var
                       cmp=param[2],
                       f=param[1],
                       _aiH_=[0,i,p],
                       _aiI_=caml_call1(prio_of_op,_ahQ_),
                       _aiJ_=caml_call1(prio_of_form,f);
                      return caml_call1
                              (for_form([0,caml_call2(cmp,_aiJ_,_aiI_)],_aiH_),f)},
                   _ah0_=function(_aiG_){return mapi(_ahZ_,_aiG_)},
                   xml_fs=_ah0_(_ahY_),
                   switch$4=0;
                  if(3903731 === _ahQ_)
                   {if(xml_fs && ! xml_fs[2])
                     {var f=xml_fs[1],_ah1_=append(xml_lg,f);switch$4 = 1}}
                  else
                   if(xml_fs)
                    {var _ah3_=xml_fs[2];
                     if(_ah3_ && ! _ah3_[2])
                      {var
                        f2=_ah3_[1],
                        f1=xml_fs[1],
                        _ah4_=append(xml_lg,f2),
                        _ah5_=append(f1,_ah4_),
                        _ah1_=_ah5_;
                       switch$4 = 1}}
                  if(! switch$4)throw [0,Assert_failure,_qp_];
                  var _ah2_=_ah1_}
                var data=_ah2_;
                break;
               default:
                var f$0=form[4],ty=form[3],x=form[2],bd=form[1];
                if(840561112 <= bd)
                 var _ain_=8704,_aio_=chr$0(_ain_),bd$0=of_char$0(_aio_);
                else
                 var _aiE_=8707,_aiF_=chr$0(_aiE_),bd$0=of_char$0(_aiF_);
                var
                 _aip_=[0,0,p],
                 _aiq_=0,
                 _air_=caml_call1(for_form(_aiq_,_aip_),f$0),
                 _ais_=0,
                 _ait_=of_latin1(_qr_),
                 _aiu_=[0,mo(_ait_),_ais_],
                 _aiv_=append(_aiu_,_air_),
                 _aiw_=0,
                 _aix_=for_type$2(_aiw_,ty),
                 _aiy_=append(_aix_,_aiv_),
                 _aiz_=0,
                 _aiA_=[0,mo(_qs_),_aiz_],
                 _aiB_=of_latin1(x),
                 _aiC_=[0,mi(_aiB_),_aiA_],
                 _aiD_=[0,mo(bd$0),_aiC_],
                 data=append(_aiD_,_aiy_)}
            var
             _ahe_=0,
             _ahf_=[0,thisid(p)],
             _ahg_=caml_call1(row(_ahf_),data),
             _ahh_=[0,is_pr];
            return [0,pr$1(_ahh_,_ahg_),_ahe_]}},
       t_tomathml=
        function(ty)
         {var _ag__=0,_ag$_=for_type$2(_ag__,ty);
          return caml_call1(row(0),_ag$_)},
       e_tomathml=
        function(id,expr)
         {var
           _ag7_=0,
           _ag8_=0,
           _ag9_=caml_call1(for_expr$1(id,_ag8_,_ag7_),expr);
          return caml_call1(row(0),_ag9_)},
       f_tomathml=
        function(id,form)
         {var
           _ag4_=0,
           _ag5_=0,
           _ag6_=caml_call1(for_form$2(id,_ag5_,_ag4_),form);
          return caml_call1(row(0),_ag6_)},
       name_counters=[0,empty$1],
       fresh$0=
        function(env,opt,param)
         {if(opt)var sth=opt[1],basename=sth;else var basename=_qt_;
          var _agW_=env[3];
          if(mem$1(basename,_agW_))
           {try
             {var _agZ_=name_counters[1],_ag0_=find$2(env,_agZ_),n$0=_ag0_}
            catch(_ag3_)
             {_ag3_ = caml_wrap_exception(_ag3_);
              if(_ag3_ !== Not_found)throw _ag3_;
              var n=[0,0],_agX_=name_counters[1];
              name_counters[1] = add$6(env,n,_agX_);
              var n$0=n}
            var
             aux=
              function(n)
               {var n$0=n;
                for(;;)
                 {var
                   _ag1_=to_string(n$0),
                   basename$0=cat(basename,_ag1_),
                   _ag2_=env[3];
                  if(mem$1(basename$0,_ag2_))
                   {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
                  return [0,basename$0,n$0]}},
             _agY_=n$0[1],
             match=aux(_agY_),
             n$1=match[2],
             basename$0=match[1];
            n$0[1] = n$1;
            return basename$0}
          return basename},
       push$4=
        function(env,param)
         {var
           match=param[2],
           body=match[2],
           ty=match[1],
           name=param[1],
           i=[0,0],
           _agP_=env[3];
          function _agQ_(bds)
           {var _agV_=0,v=[0,[0,ty,body],default$0(_agV_,bds)];
            i[1] = length(v) - 1 | 0;
            return [0,v]}
          var
           env_var=modify_opt$0(name,_agQ_,_agP_),
           _agR_=env[6],
           _agS_=0,
           _agT_=fresh(_agS_),
           _agU_=[0,name,i[1]],
           env_handles=add$8(_agU_,_agT_,_agR_);
          return [0,env[1],env[2],env_var,env[4],env[5],env_handles]},
       get$9=
        function(env,param)
         {var
           idx=param[2],
           name=param[1],
           _agN_=env[3],
           _agO_=0,
           bds=find_default$0(_agO_,name,_agN_);
          return nth_opt(bds,idx)},
       modify$1=
        function(env,param)
         {var b=param[2],match=param[1],i=match[2],x=match[1],_agJ_=env[3];
          function _agK_(param){return b}
          function _agL_(_agM_){return modify_at(i,_agK_,_agM_)}
          var env_var=modify$0(x,_agL_,_agJ_);
          return [0,env[1],env[2],env_var,env[4],env[5],env[6]]},
       exists$4=function(env,x){return is_some(get$9(env,x))},
       getid=function(env,x){return find_opt$1(x,env[6])},
       byid=
        function(env,id)
         {function _agD_(x)
           {function _agI_(body){return return$3([0,x,body])}
            return bind$0(get$9(env,x),_agI_)}
          var _agE_=env[6],_agF_=inverse(_agE_);
          function _agG_(_agH_){return find_opt$1(id,_agH_)}
          return bind$0(_agG_(_agF_),_agD_)},
       map$6=
        function(init,f)
         {var _agu_=init[6],_agv_=init[5],_agw_=init[4],_agx_=init[3];
          function _agy_(_agC_){return snd_map(f,_agC_)}
          function _agz_(_agB_){return map$4(_agy_,_agB_)}
          var _agA_=map$5(_agz_,_agx_);
          return [0,init[1],init[2],_agA_,_agw_,_agv_,_agu_]},
       to_list$0=
        function(env)
         {function _agp_(param)
           {var bs=param[2],x=param[1];
            return mapi
                    (function(i,b)
                      {var _agr_=[0,x,i],_ags_=[0,x,i],_agt_=getid(env,_ags_);
                       return [0,get$3(_agt_),_agr_,b]},
                     bs)}
          var _agq_=env[3];
          return bind(bindings(_agq_),_agp_)},
       evar_name_counter=[0,-1],
       fresh$1=
        function(opt,param)
         {if(opt)var sth=opt[1],basename=sth;else var basename=_qv_;
          evar_name_counter[1]++;
          var _agn_=evar_name_counter[1],_ago_=to_string(_agn_);
          return cat(_qu_,cat(basename,_ago_))},
       RecheckFailure=[248,_qw_,caml_fresh_oo_id(0)],
       TypingError=[248,_qx_,caml_fresh_oo_id(0)],
       empty$9=0,
       push$5=function(bds,x,y){return [0,[0,x,y],bds]},
       lindex=
        function(bds,x)
         {function aux(i,param)
           {var i$0=i,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 bds=param$0[2],
                 match=param$0[1],
                 y=match[1],
                 _agm_=caml_string_equal(x,y)?1:0,
                 i$1=i$0 + _agm_ | 0,
                 i$0=i$1,
                 param$0=bds;
                continue}
              return i$0}}
          return aux(0,bds)},
       rindex=
        function(bds,x)
         {function aux(i,param)
           {var i$0=i,param$0=param;
            for(;;)
             {if(param$0)
               {var
                 bds=param$0[2],
                 match=param$0[1],
                 y=match[2],
                 _agl_=caml_string_equal(x,y)?1:0,
                 i$1=i$0 + _agl_ | 0,
                 i$0=i$1,
                 param$0=bds;
                continue}
              return i$0}}
          return aux(0,bds)},
       lfind=
        function(bds,param)
         {var i=param[2],x=param[1];
          function aux(j,param)
           {var j$0=j,param$0=param;
            for(;;)
             {if(param$0)
               {var match=param$0[1],y=match[1],z=match[2];
                if(caml_string_equal(x,y) && 0 === j$0)return z;
                var bds=param$0[2];
                if(caml_string_equal(x,y) && 0 < j$0)
                 {var j$1=j$0 - 1 | 0,j$0=j$1,param$0=bds;continue}
                var param$1=param$0[2],param$0=param$1;
                continue}
              throw Not_found}}
          return aux(i,bds)},
       equal$9=
        function(bds,param,_agb_)
         {var
           j=_agb_[2],
           m=_agb_[1],
           i=param[2],
           n=param[1],
           _agc_=caml_string_equal(n,m);
          if(_agc_)
           var
            _agd_=j - rindex(bds,m) | 0,
            _age_=(i - lindex(bds,n) | 0) === _agd_?1:0;
          else
           var _age_=_agc_;
          if(_age_)
           var _agf_=_age_;
          else
           {var _agg_=i === j?1:0;
            if(_agg_)
             try
              {var
                _agh_=[0,n,i],
                _agi_=lfind(bds,_agh_),
                _agj_=caml_string_equal(_agi_,m);
               return _agj_}
             catch(_agk_)
              {_agk_ = caml_wrap_exception(_agk_);
               if(_agk_ === Not_found)return 0;
               throw _agk_}
            var _agf_=_agg_}
          return _agf_},
       f_and=function(f1,f2){return [1,3257015,[0,f1,[0,f2,0]]]},
       f_imp=function(f1,f2){return [1,3654636,[0,f1,[0,f2,0]]]},
       f_false=1,
       f_true=0,
       f_ands=
        function(fs)
         {if(fs)
           {var _aga_=fs[1];
            if(fs[2]){var fs$0=fs[2];return fold(f_and,_aga_,fs$0)}
            return _aga_}
          return f_true},
       doit=
        function(acc,f)
         {var acc$0=acc,f$0=f;
          for(;;)
           {if(typeof f$0 !== "number" && 1 === f$0[0] && 17731 === f$0[1])
             {var _af__=f$0[2];
              if(_af__)
               {var _af$_=_af__[2];
                if(_af$_ && ! _af$_[2])
                 {var
                   f2=_af$_[1],
                   f$1=_af__[1],
                   acc$1=[0,f2,acc$0],
                   acc$0=acc$1,
                   f$0=f$1;
                  continue}}}
            return [0,f$0,acc$0]}},
       flatten_disjunctions=function(f){return doit(0,f)},
       doit$0=
        function(acc,f)
         {var acc$0=acc,f$0=f;
          for(;;)
           {if(typeof f$0 !== "number" && 1 === f$0[0] && 3257015 === f$0[1])
             {var _af8_=f$0[2];
              if(_af8_)
               {var _af9_=_af8_[2];
                if(_af9_ && ! _af9_[2])
                 {var
                   f2=_af9_[1],
                   f$1=_af8_[1],
                   acc$1=[0,f2,acc$0],
                   acc$0=acc$1,
                   f$0=f$1;
                  continue}}}
            return [0,f$0,acc$0]}},
       flatten_conjunctions=function(f){return doit$0(0,f)},
       parity=
        function(lg)
         {return 3257015 === lg
                  ?2
                  :3903731 <= lg?95438486 <= lg?2:1:3654636 <= lg?2:2},
       eq_alias=
        function(counter,bds,env,a,ty)
         {var ty$0=ty;
          for(;;)
           {var tgt_a=get$8(env,a),switch$0=0;
            if(typeof ty$0 !== "number" && 0 === ty$0[0])
             {var
               b$2=ty$0[1],
               _af6_=get$8(env,b$2),
               _af7_=[0,b$2],
               tgt_b$0=_af6_,
               b$0=_af7_;
              switch$0 = 1}
            if(! switch$0)var tgt_b=0,b=0,tgt_b$0=tgt_b,b$0=b;
            var _af3_=[0,tgt_a,tgt_b$0],_af4_=pair_map(concat$1,_af3_);
            if(b$0)
             {if(! _af4_[1] && ! _af4_[2])
               {var b$1=b$0[1];return equal$9(bds,a,b$1)}}
            else
             if(! _af4_[1])return 0;
            var _af5_=_af4_[1];
            if(_af5_)
             {var ty$1=_af5_[1];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return eq$1(counter$0,bds,env,ty$0,ty$1)}
              return caml_trampoline_return(eq$1,[0,bds,env,ty$0,ty$1])}
            var match=_af4_[2],ty$2=match[1],ty$0=ty$2;
            continue}},
       eq$1=
        function(counter,bds,env,ty1,ty2)
         {var bds$0=bds,ty1$0=ty1,ty2$0=ty2;
          for(;;)
           {var switch$0=0;
            if(typeof ty1$0 === "number")
             {if(typeof ty2$0 === "number")
               return 1;
              else
               if(0 !== ty2$0[0])switch$0 = 1}
            else
             switch(ty1$0[0])
              {case 0:var _afR_=ty1$0[1],ty=ty2$0,a=_afR_;switch$0 = 2;break;
               case 1:
                var switch$1=0,_afS_=ty1$0[2],_afT_=ty1$0[1];
                if(typeof ty2$0 !== "number")
                 switch(ty2$0[0])
                  {case 0:switch$1 = 1;break;
                   case 1:
                    var
                     _afU_=ty2$0[2],
                     _afV_=ty2$0[1],
                     tyb2=_afU_,
                     tya2=_afV_,
                     tyb1=_afS_,
                     tya1=_afT_;
                    switch$0 = 3;
                    switch$1 = 1;
                    break
                   }
                if(! switch$1)switch$0 = 1;
                break;
               case 2:
                var switch$2=0,_afX_=ty1$0[2],_afY_=ty1$0[1];
                if(typeof ty2$0 !== "number")
                 switch(ty2$0[0])
                  {case 0:switch$2 = 1;break;
                   case 2:
                    var
                     _afZ_=ty2$0[2],
                     _af0_=ty2$0[1],
                     tyb2=_afZ_,
                     tya2=_af0_,
                     tyb1=_afX_,
                     tya1=_afY_;
                    switch$0 = 3;
                    switch$2 = 1;
                    break
                   }
                if(! switch$2)switch$0 = 1;
                break;
               default:
                var switch$3=0,_af1_=ty1$0[2],_af2_=ty1$0[1];
                if(typeof ty2$0 === "number")
                 switch$3 = 1;
                else
                 switch(ty2$0[0])
                  {case 0:break;
                   case 3:
                    var
                     ty2$1=ty2$0[2],
                     a2=ty2$0[1],
                     bds$1=push$5(bds$0,_af2_,a2),
                     bds$0=bds$1,
                     ty1$0=_af1_,
                     ty2$0=ty2$1;
                    continue;
                   default:switch$3 = 1}
                if(switch$3)switch$0 = 1}
            switch(switch$0)
             {case 0:var _afQ_=ty2$0[1],ty=ty1$0,a=_afQ_;break;
              case 1:return 0;
              case 2:break;
              default:
               var _afW_=eq(bds$0,env,tya1,tya2);
               if(_afW_){var ty1$0=tyb1,ty2$0=tyb2;continue}
               return _afW_}
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return eq_alias(counter$0,bds$0,env,a,ty)}
            return caml_trampoline_return(eq_alias,[0,bds$0,env,a,ty])}},
       eq=
        function(bds,env,ty1,ty2)
         {return caml_trampoline(eq$1(0,bds,env,ty1,ty2))},
       t_equal=
        function(opt,env,ty1,ty2)
         {if(opt)var sth=opt[1],bds=sth;else var bds=empty$9;
          return eq(bds,env,ty1,ty2)},
       aux=
        function(bds,env,e1,e2)
         {var e1$0=e1,e2$0=e2;
          for(;;)
           {if(0 === e1$0[0])
             {var _afH_=e1$0[1];
              if(0 === e2$0[0])
               {var x2=e2$0[1];if(equal$9(bds,_afH_,x2))return 1}
              var t=e2$0,x1=_afH_}
            else
             {var _afJ_=e1$0[2],_afK_=e1$0[1];
              if(0 !== e2$0[0])
               {var es2=e2$0[2],f2=e2$0[1],_afM_=length(es2);
                if(length(_afJ_) === _afM_)
                 {var _afN_=caml_string_equal(_afK_,f2);
                  return _afN_
                          ?for_all2
                            (function(_afO_,_afP_){return aux(bds,env,_afO_,_afP_)},
                             _afJ_,
                             es2)
                          :_afN_}
                return 0}
              var _afL_=e2$0[1],t=e1$0,x1=_afL_}
            var match=get$9(env,x1);
            if(match)
             {var _afI_=match[1][2];
              if(_afI_){var e2$1=_afI_[1],e1$0=t,e2$0=e2$1;continue}}
            return 0}},
       e_equal=
        function(opt,env,e1,e2)
         {if(opt)var sth=opt[1],bds=sth;else var bds=empty$9;
          return aux(bds,env,e1,e2)},
       aux$0=
        function(bds,env,f1,f2)
         {var bds$0=bds,f1$0=f1,f2$0=f2;
          for(;;)
           {var switch$0=0;
            if(typeof f1$0 === "number")
             {if(0 === f1$0)
               {if(typeof f2$0 === "number" && ! f2$0)switch$0 = 1}
              else
               if(typeof f2$0 === "number" && f2$0)switch$0 = 1}
            else
             switch(f1$0[0])
              {case 0:
                if(typeof f2$0 !== "number" && 0 === f2$0[0])
                 {var
                   es2=f2$0[2],
                   p2=f2$0[1],
                   es1=f1$0[2],
                   p1=f1$0[1],
                   _afw_=length(es2);
                  if(length(es1) === _afw_)
                   {var _afx_=caml_string_equal(p1,p2);
                    if(_afx_)
                     {var _afy_=[0,bds$0];
                      return for_all2
                              (function(_afF_,_afG_)
                                {return e_equal(_afy_,env,_afF_,_afG_)},
                               es1,
                               es2)}
                    return _afx_}}
                break;
               case 1:
                if(typeof f2$0 !== "number" && 1 === f2$0[0])
                 {var
                   fs2=f2$0[2],
                   c2=f2$0[1],
                   fs1=f1$0[2],
                   c1=f1$0[1],
                   _afz_=length(fs2);
                  if(length(fs1) === _afz_)
                   {var _afA_=c1 === c2?1:0;
                    return _afA_
                            ?for_all2
                              (function(_afD_,_afE_){return aux$0(bds$0,env,_afD_,_afE_)},
                               fs1,
                               fs2)
                            :_afA_}}
                break;
               default:
                if(typeof f2$0 !== "number" && 2 === f2$0[0])
                 {var
                   f2$1=f2$0[4],
                   ty2=f2$0[3],
                   x2=f2$0[2],
                   b2=f2$0[1],
                   f1$1=f1$0[4],
                   ty1=f1$0[3],
                   x1=f1$0[2],
                   b1=f1$0[1];
                  if(b1 === b2)
                   {var _afB_=0,_afC_=t_equal(_afB_,env,ty1,ty2);
                    if(_afC_)
                     {var
                       bds$1=push$5(bds$0,x1,x2),
                       bds$0=bds$1,
                       f1$0=f1$1,
                       f2$0=f2$1;
                      continue}
                    return _afC_}}}
            return switch$0?1:0}},
       f_equal=
        function(opt,f1,f2)
         {if(opt)var sth=opt[1],bds=sth;else var bds=empty$9;
          return function(_afv_){return aux$0(bds,f1,f2,_afv_)}},
       equal$10=
        function(bds,env,t1,t2)
         {if(70 <= t1[1])
           {if(typeof t2 !== "number" && 70 === t2[1])
             {var f2=t2[2],f1=t1[2];return caml_call1(f_equal(bds,env,f1),f2)}}
          else
           if(typeof t2 !== "number" && 69 === t2[1])
            {var e2=t2[2],e1=t1[2];return e_equal(bds,env,e1,e2)}
          return 0},
       e_shift=
        function(opt,param,e)
         {var i=param[2],x=param[1];
          if(opt)var sth=opt[1],incr=sth;else var incr=1;
          if(0 === e[0])
           {var match=e[1],j=match[2],y=match[1];
            if(caml_string_equal(x,y) && i <= j)return [0,[0,y,j + incr | 0]];
            return e}
          var es=e[2],f=e[1],_afr_=[0,x,i],_afs_=[0,incr];
          function _aft_(_afu_){return e_shift(_afs_,_afr_,_afu_)}
          return [1,f,map$4(_aft_,es)]},
       f_shift=
        function(opt,param,f)
         {var i=param[2],x=param[1];
          if(opt)var sth=opt[1],incr=sth;else var incr=1;
          if(typeof f === "number")
           return f;
          else
           switch(f[0])
            {case 0:
              var
               es=f[2],
               p=f[1],
               _afg_=[0,x,i],
               _afh_=[0,incr],
               _afi_=function(_afq_){return e_shift(_afh_,_afg_,_afq_)};
              return [0,p,map$4(_afi_,es)];
             case 1:
              var
               fs=f[2],
               c=f[1],
               _afj_=[0,x,i],
               _afk_=[0,incr],
               _afl_=function(_afp_){return f_shift(_afk_,_afj_,_afp_)};
              return [1,c,map$4(_afl_,fs)];
             default:
              var
               f$0=f[4],
               ty=f[3],
               y=f[2],
               b=f[1],
               _afm_=caml_string_equal(x,y)?1:0,
               _afn_=[0,x,i + _afm_ | 0],
               _afo_=[0,incr];
              return [2,b,y,ty,f_shift(_afo_,_afn_,f$0)]}},
       shift=
        function(incr,x,param)
         {if(70 <= param[1]){var f=param[2];return [0,70,f_shift(incr,x,f)]}
          var e=param[2];
          return [0,69,e_shift(incr,x,e)]},
       shift_under=
        function(t,u)
         {if(typeof t !== "number" && 70 === t[1])
           {var _aff_=t[2];
            if(typeof _aff_ !== "number" && 2 === _aff_[0])
             {var x=_aff_[2];return shift(0,[0,x,0],u)}}
          return u},
       direct_subforms=
        function(param)
         {if(typeof param !== "number")
           switch(param[0])
            {case 1:var fs=param[2];return fs;
             case 2:var f=param[4];return [0,f,0]
             }
          return 0},
       direct_subexprs=
        function(param){if(0 === param[0])return 0;var es=param[2];return es},
       direct_subterms=
        function(param)
         {if(70 <= param[1])
           {var _afe_=param[2];
            if(typeof _afe_ !== "number" && 0 === _afe_[0])
             {var es=_afe_[2];return map$4(term_of_expr,es)}
            return map$4(term_of_form,direct_subforms(_afe_))}
          var e=param[2];
          return map$4(term_of_expr,direct_subexprs(e))},
       modify_direct_subforms=
        function(f,fs)
         {var switch$0=0;
          if(typeof f === "number")
           switch$0 = 1;
          else
           switch(f[0])
            {case 1:
              var fs$0=f[2],c=f[1],_afd_=length(fs);
              if(length(fs$0) === _afd_)return [1,c,fs];
              break;
             case 2:
              if(fs && ! fs[2])
               {var f$0=fs[1],ty=f[3],x=f[2],b=f[1];return [2,b,x,ty,f$0]}
              break;
             default:switch$0 = 1}
          if(switch$0)return f;
          throw [0,Invalid_argument,_qy_]},
       modify_direct_subexprs=
        function(e,es)
         {if(0 === e[0])return e;
          var es$0=e[2],f=e[1],_afc_=length(es);
          if(length(es$0) === _afc_)return [1,f,es];
          throw [0,Invalid_argument,_qz_]},
       modify_direct_subterms=
        function(t,ts)
         {if(70 <= t[1])
           {var _ae2_=t[2];
            if(typeof _ae2_ !== "number" && 0 === _ae2_[0])
             {var es=_ae2_[2],p=_ae2_[1],_ae6_=length(ts);
              if(length(es) === _ae6_)
               return [0,70,[0,p,map$4(expr_of_term,ts)]]}
            var
             _ae3_=function(_afb_){return map$4(form_of_term,_afb_)},
             _ae4_=_ae3_(ts),
             _ae5_=function(_afa_){return modify_direct_subforms(_ae2_,_afa_)};
            return term_of_form(_ae5_(_ae4_))}
          var e=t[2];
          function _ae7_(_ae$_){return map$4(expr_of_term,_ae$_)}
          var _ae8_=_ae7_(ts);
          function _ae9_(_ae__){return modify_direct_subexprs(e,_ae__)}
          return term_of_expr(_ae9_(_ae8_))},
       rewrite=
        function(bds,env,red,res,t)
         {if(equal$10(bds,env,red,t))return res;
          var
           _aeS_=direct_subterms(t),
           _aeT_=shift_under(t,res),
           _aeU_=shift_under(t,red),
           _aeV_=0;
          function _aeW_(_ae1_){return rewrite(_aeV_,env,_aeU_,_aeT_,_ae1_)}
          function _aeX_(_ae0_){return map$4(_aeW_,_ae0_)}
          var _aeY_=_aeX_(_aeS_);
          return function(_aeZ_){return modify_direct_subterms(t,_aeZ_)}
                  (_aeY_)},
       fc_is_bound=
        function(param,_aeN_)
         {var param$0=param,_aeO_=_aeN_;
          for(;;)
           {var _aeP_=param$0[2],_aeQ_=param$0[1];
            if(_aeO_)
             {var _aeR_=_aeO_[1];
              if(0 === _aeR_[0])
               {var
                 c=_aeO_[2],
                 param$1=[0,_aeQ_,_aeP_],
                 param$0=param$1,
                 _aeO_=c;
                continue}
              var c$0=_aeO_[2],y=_aeR_[2];
              if(caml_string_equal(_aeQ_,y))
               {if(0 === _aeP_)return 1;
                var param$2=[0,_aeQ_,_aeP_ - 1 | 0],param$0=param$2,_aeO_=c$0;
                continue}
              var param$3=[0,_aeQ_,_aeP_],param$0=param$3,_aeO_=c$0;
              continue}
            return 0}},
       fc_exit=
        function(param)
         {var i=param[2],x=param[1];
          function aux(i,param)
           {var i$0=i,param$0=param;
            for(;;)
             {if(param$0)
               {var _aeM_=param$0[1];
                if(1 === _aeM_[0])
                 {var c=param$0[2],y=_aeM_[2];
                  if(caml_string_equal(x,y))
                   {var i$1=i$0 - 1 | 0,i$0=i$1,param$0=c;continue}}
                var param$1=param$0[2],param$0=param$1;
                continue}
              return i$0}}
          return function(c){return [0,x,aux(i,c)]}},
       fc_fill=
        function(f,param)
         {if(param)
           {var _aeI_=param[1];
            if(0 === _aeI_[0])
             {var
               c=param[2],
               i=_aeI_[3],
               fs=_aeI_[2],
               conn=_aeI_[1],
               match=split_nth(i,fs),
               rs=match[2],
               ls=match[1],
               _aeJ_=0,
               _aeK_=[0,fc_fill(f,c),_aeJ_],
               _aeL_=append(_aeK_,rs);
              return [1,conn,append(ls,_aeL_)]}
            var c$0=param[2],ty=_aeI_[3],x=_aeI_[2],b=_aeI_[1];
            return [2,b,x,ty,fc_fill(f,c$0)]}
          return f},
       e_unloc=
        function(e)
         {var match=unloc(e);
          if(0 === match[0])
           {var i=match[2],x=match[1];return [0,[0,unloc(x),i]]}
          var args=match[2],f=match[1],_aeH_=map$4(e_unloc,args);
          return [1,unloc(f),_aeH_]},
       trecheck=
        function(env,ty)
         {var env$0=env,ty$0=ty;
          for(;;)
           if(typeof ty$0 === "number")
            return 0;
           else
            switch(ty$0[0])
             {case 0:
               var x=ty$0[1],_aeD_=1 - exists$3(env$0,x);
               if(_aeD_)throw RecheckFailure;
               return _aeD_;
              case 3:
               var
                ty$1=ty$0[2],
                x$0=ty$0[1],
                _aeF_=[0,x$0,0],
                env$1=push$3(env$0,_aeF_),
                env$0=env$1,
                ty$0=ty$1;
               continue;
              default:
               var ty2=ty$0[2],ty1=ty$0[1],_aeE_=[0,ty1,[0,ty2,0]];
               return iter$0
                       (function(_aeG_){return trecheck(env$0,_aeG_)},_aeE_)}},
       einfer=
        function(env,e)
         {if(0 === e[0])
           {var x=e[1],match=get$9(env,x);
            if(match){var match$0=match[1],xty=match$0[1];return xty}
            throw TypingError}
          var args=e[2],f=e[1],match$1=get$7(env,f);
          if(match$1)
           {var
             match$2=match$1[1],
             fres=match$2[2],
             fargs=match$2[1],
             _aew_=length(args);
            if(length(fargs) !== _aew_)throw TypingError;
            var
             _aex_=function(_aeC_){return einfer(env,_aeC_)},
             args$0=map$4(_aex_,args),
             _aey_=0,
             _aez_=
              function(_aeA_,_aeB_){return t_equal(_aey_,env,_aeA_,_aeB_)};
            if(1 - for_all2(_aez_,fargs,args$0))throw TypingError;
            return fres}
          throw TypingError},
       erecheck=
        function(env,ty,expr)
         {if(0 === expr[0])
           {var
             x=expr[1],
             _aeo_=get$9(env,x),
             match=get_exn(_aeo_,RecheckFailure),
             xty=match[1],
             _aep_=0,
             _aeq_=1 - t_equal(_aep_,env,ty,xty);
            if(_aeq_)throw RecheckFailure;
            return _aeq_}
          var
           args=expr[2],
           f=expr[1],
           _aer_=get$7(env,f),
           match$0=get_exn(_aer_,RecheckFailure),
           res=match$0[2],
           sig=match$0[1],
           _aes_=0;
          if(1 - t_equal(_aes_,env,ty,res))throw RecheckFailure;
          var _aet_=length(args);
          if(length(sig) !== _aet_)throw RecheckFailure;
          return iter2
                  (function(_aeu_,_aev_){return erecheck(env,_aeu_,_aev_)},
                   sig,
                   args)},
       recheck=
        function(env,form)
         {var env$0=env,form$0=form;
          for(;;)
           if(typeof form$0 === "number")
            return 0;
           else
            switch(form$0[0])
             {case 0:
               var _ad$_=form$0[1],_aea_=form$0[2];
               if(_aea_)
                {var _aeb_=_aea_[2];
                 if(_aeb_ && ! _aeb_[2])
                  {var e2=_aeb_[1],e1=_aea_[1];
                   if(caml_string_equal(_ad$_,_qA_))
                    {var
                      _aee_=[0,e1,e2],
                      _aef_=function(_aen_){return einfer(env$0,_aen_)},
                      match=pair_map(_aef_,_aee_),
                      t2=match[2],
                      t1=match[1],
                      _aeg_=0,
                      _aeh_=1 - t_equal(_aeg_,env$0,t1,t2);
                     if(_aeh_)throw RecheckFailure;
                     return _aeh_}}}
               var
                args=form$0[2],
                _aec_=get$6(env$0,_ad$_),
                sig=get_exn(_aec_,RecheckFailure),
                _aed_=length(args);
               if(length(sig) !== _aed_)throw RecheckFailure;
               return iter2
                       (function(_ael_,_aem_){return erecheck(env$0,_ael_,_aem_)},
                        sig,
                        args);
              case 1:
               var forms=form$0[2],lg=form$0[1],_aei_=parity(lg);
               if(length(forms) !== _aei_)throw RecheckFailure;
               return iter$0
                       (function(_aek_){return recheck(env$0,_aek_)},forms);
              default:
               var f=form$0[4],xty=form$0[3],x=form$0[2];
               trecheck(env$0,xty);
               var
                _aej_=[0,x,[0,xty,0]],
                env$1=push$4(env$0,_aej_),
                env$0=env$1,
                form$0=f;
               continue}},
       tcheck=
        function(env,ty)
         {var match=unloc(ty);
          if(typeof match === "number")
           return 0;
          else
           switch(match[0])
            {case 0:
              var x=match[1],_ad2_=0,_ad3_=[0,unloc(x),_ad2_];
              if(1 - exists$3(env,_ad3_))throw TypingError;
              var _ad4_=0;
              return [0,[0,unloc(x),_ad4_]];
             case 1:
              var t2=match[2],t1=match[1],_ad5_=tcheck(env,t2);
              return [2,tcheck(env,t1),_ad5_];
             case 2:
              var t2$0=match[2],t1$0=match[1],_ad6_=tcheck(env,t2$0);
              return [1,tcheck(env,t1$0),_ad6_];
             default:
              var
               t=match[2],
               x$0=match[1],
               _ad7_=0,
               _ad8_=[0,unloc(x$0),_ad7_],
               _ad9_=push$3(env,_ad8_),
               _ad__=tcheck(_ad9_,t);
              return [3,unloc(x$0),_ad__]}},
       echeck=
        function(env,e){var e$0=e_unloc(e);return [0,e$0,einfer(env,e$0)]},
       check$1=
        function(env,form)
         {function pred(name,fs)
           {function _ad0_(_ad1_){return check$1(env,_ad1_)}
            return [1,name,map$4(_ad0_,fs)]}
          var match=unloc(form);
          switch(match[0])
           {case 0:
             var _adA_=match[1],_adB_=match[2];
             if(_adB_)
              {var _adC_=_adB_[2];
               if(_adC_ && ! _adC_[2])
                {var e2=_adC_[1],e1=_adB_[1],_adK_=unloc(_adA_);
                 if(caml_string_equal(_adK_,_qB_))
                  {var
                    _adL_=[0,e1,e2],
                    _adM_=function(_adZ_){return echeck(env,_adZ_)},
                    _adN_=pair_map(_adM_,_adL_),
                    _adO_=_adN_[2],
                    t2=_adO_[2],
                    e2$0=_adO_[1],
                    match$1=_adN_[1],
                    t1=match$1[2],
                    e1$0=match$1[1],
                    _adP_=0;
                   if(t_equal(_adP_,env,t1,t2))
                    return [0,_qC_,[0,e1$0,[0,e2$0,0]]];
                   throw TypingError}}}
             var args=match[2],_adD_=unloc(_adA_),match$0=get$6(env,_adD_);
             if(match$0)
              {var ar=match$0[1],_adE_=length(ar);
               if(length(args) !== _adE_)throw TypingError;
               var
                _adF_=function(_adY_){return echeck(env,_adY_)},
                args$0=map$4(_adF_,args),
                _adG_=snd(args$0),
                _adH_=0,
                _adI_=
                 function(_adW_,_adX_){return t_equal(_adH_,env,_adW_,_adX_)};
               if(1 - for_all2(_adI_,ar,_adG_))throw TypingError;
               var _adJ_=fst(args$0);
               return [0,unloc(_adA_),_adJ_]}
             throw TypingError;
            case 1:return match[1]?0:1;
            case 2:
             var f2=match[2],f1=match[1];return pred(3257015,[0,f1,[0,f2,0]]);
            case 3:
             var f2$0=match[2],f1$0=match[1];
             return pred(17731,[0,f1$0,[0,f2$0,0]]);
            case 4:
             var f2$1=match[2],f1$1=match[1];
             return pred(3654636,[0,f1$1,[0,f2$1,0]]);
            case 5:
             var f2$2=match[2],f1$2=match[1];
             return pred(95438486,[0,f1$2,[0,f2$2,0]]);
            case 6:var f1$3=match[1];return pred(3903731,[0,f1$3,0]);
            case 7:
             var
              f=match[2],
              match$2=match[1],
              xty=match$2[2],
              x=match$2[1],
              xty$0=tcheck(env,xty),
              _adQ_=[0,xty$0,0],
              _adR_=[0,unloc(x),_adQ_],
              _adS_=push$4(env,_adR_),
              f$0=check$1(_adS_,f);
             return [2,840561112,unloc(x),xty$0,f$0];
            default:
             var
              f$1=match[2],
              match$3=match[1],
              xty$1=match$3[2],
              x$0=match$3[1],
              xty$2=tcheck(env,xty$1),
              _adT_=[0,xty$2,0],
              _adU_=[0,unloc(x$0),_adT_],
              _adV_=push$4(env,_adU_),
              f$2=check$1(_adV_,f$1);
             return [2,172470935,unloc(x$0),xty$2,f$2]}},
       empty$10=0,
       aslist=function(s){return s},
       oflist=function(s){return s},
       get_tag=
        function(x,s)
         {var x$0=x,s$0=s;
          for(;;)
           {var i=x$0[2],n=x$0[1];
            if(s$0)
             {var match=s$0[1],s$1=s$0[2],tag=match[2],m=match[1];
              if(caml_string_equal(n,m))
               {if(0 === i)return [0,tag];
                var x$1=[0,n,i - 1 | 0],x$0=x$1,s$0=s$1;
                continue}
              var s$2=s$0[2],s$0=s$2;
              continue}
            return 0}},
       flex=
        function(x,s){var _adz_=get_tag(x,s);return caml_equal(_adz_,_qD_)},
       bound=
        function(x,s)
         {var match=get_tag(x,s);if(match && match[1])return 1;return 0},
       UnboundVariable=[248,_qE_,caml_fresh_oo_id(0)],
       fetch=
        function(x,s)
         {var match=get_tag(x,s);
          if(match){var _ady_=match[1];if(_ady_){var e=_ady_[1];return e}}
          throw [0,UnboundVariable,x,s]},
       add$9=
        function(x,e,param)
         {var _adv_=x[2],_adw_=x[1];
          if(param)
           {var match=param[1],t=match[2],m=match[1],s=param[2];
            if(caml_string_notequal(_adw_,m))return [0,[0,m,t],add$9(x,e,s)];
            if(caml_string_equal(_adw_,m) && 0 < _adv_)
             {var _adx_=[0,_adw_,_adv_ - 1 | 0];
              return [0,[0,m,t],add$9(_adx_,e,s)]}
            if(! t)
             {var s$0=param[2];
              if(caml_string_equal(_adw_,m) && 0 === _adv_)
               return [0,[0,m,[0,e]],s$0]}
            return failwith(_qF_)}
          return failwith(_qG_)},
       push$6=function(m,t,s){return [0,[0,m,t],s]},
       is_complete=
        function(s)
         {return for_all
                  (function(param){var tag=param[2];return 0 !== tag?1:0},s)},
       e_apply1=
        function(param,e,tg)
         {var i=param[2],x=param[1];
          if(0 === tg[0])
           {var match=tg[1],y=match[1],j=match[2];
            if(caml_string_equal(x,y) && i === j)return e;
            var j$0=match[2];
            if(caml_string_equal(x,y) && i < j$0)return [0,[0,y,j$0 - 1 | 0]];
            return tg}
          var args=tg[2],f=tg[1],_ads_=[0,x,i];
          function _adt_(_adu_){return e_apply1(_ads_,e,_adu_)}
          return [1,f,map$4(_adt_,args)]},
       f_apply1=
        function(param,e,f)
         {var i=param[2],x=param[1];
          if(typeof f === "number")
           return f;
          else
           switch(f[0])
            {case 0:
              var
               args=f[2],
               name=f[1],
               _adh_=[0,x,i],
               _adi_=function(_adr_){return e_apply1(_adh_,e,_adr_)};
              return [0,name,map$4(_adi_,args)];
             case 1:
              var
               fs=f[2],
               lg=f[1],
               _adj_=[0,x,i],
               _adk_=function(_adq_){return f_apply1(_adj_,e,_adq_)};
              return [1,lg,map$4(_adk_,fs)];
             default:
              var
               f$0=f[4],
               ty=f[3],
               y=f[2],
               bd=f[1],
               _adl_=[0,y,i],
               _adm_=0,
               _adn_=e_shift(_adm_,_adl_,e),
               _ado_=caml_string_equal(x,y)?1:0,
               _adp_=[0,x,i + _ado_ | 0];
              return [2,bd,y,ty,f_apply1(_adp_,_adn_,f$0)]}},
       f_iter=
        function(s,i,f)
         {var s$0=s,i$0=i,f$0=f;
          for(;;)
           {if(0 === i$0)return f$0;
            if(s$0)
             {var _add_=s$0[1],_adf_=_add_[2],_ade_=_add_[1];
              if(_adf_)
               {var
                 s$1=s$0[2],
                 e=_adf_[1],
                 _adg_=[0,_ade_,0],
                 f$1=f_apply1(_adg_,e,f$0),
                 i$1=i$0 - 1 | 0,
                 s$0=s$1,
                 i$0=i$1,
                 f$0=f$1;
                continue}
              var s$2=s$0[2],i$2=i$0 - 1 | 0,s$0=s$2,i$0=i$2;
              continue}
            throw [0,Assert_failure,_qH_]}},
       f_apply=function(s,f){return f_iter(s,length(s),f)},
       e_close=
        function(s,param)
         {if(0 === param[0])
           {var x=param[1];
            try
             {var _ac__=fetch(x,s),_ac$_=e_close(s,_ac__);return _ac$_}
            catch(_adc_)
             {_adc_ = caml_wrap_exception(_adc_);
              if(_adc_[1] === UnboundVariable)return [0,x];
              throw _adc_}}
          var es=param[2],f=param[1];
          function _ada_(_adb_){return e_close(s,_adb_)}
          return [1,f,map$4(_ada_,es)]},
       close$0=
        function(s)
         {function _ac8_(param)
           {var tag=param[2],x=param[1];
            if(tag)var e=tag[1],tag$0=[0,e_close(s,e)];else var tag$0=tag;
            return [0,x,tag$0]}
          return function(_ac9_){return map$4(_ac8_,_ac9_)}(s)},
       occurs=
        function(x,param)
         {if(0 === param[0]){var y=param[1];return caml_equal(x,y)?1:0}
          var ts=param[2],_ac7_=0;
          return fold(function(b,t){return b?b:occurs(x,t)},_ac7_,ts)},
       occurs_under=
        function(x,param)
         {var _ac4_=x[2],_ac5_=x[1];
          if(0 === param[0])
           {var match=param[1],j=match[2],m=match[1];
            if(caml_string_equal(_ac5_,m) && j <= _ac4_)return 1;
            return 0}
          var ts=param[2],_ac6_=0;
          return fold(function(b,t){return b?b:occurs_under(x,t)},_ac6_,ts)},
       Invalid_constant=[248,_qI_,caml_fresh_oo_id(0)],
       e_unify=
        function(venv,lenv,s,param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var
               eqns=param$0[2],
               match=param$0[1],
               u=match[2],
               t=match[1],
               unify_cond=
                function(x,t)
                 {var _acZ_=flex(x,s);
                  if(_acZ_)
                   {var _ac0_=1 - occurs(x,t);
                    if(_ac0_)
                     {var _ac1_=indices(lenv);
                      return for_all$1
                              (function(n,i)
                                {var _ac3_=[0,n,i];return 1 - occurs_under(_ac3_,t)},
                               _ac1_)}
                    var _ac2_=_ac0_}
                  else
                   var _ac2_=_acZ_;
                  return _ac2_},
               unify_body$0=
                function(eqns)
                 {function unify_body(x,t)
                   {return e_unify(venv,lenv,add$9(x,t,s),eqns)}
                  return unify_body},
               unify_body=unify_body$0(eqns),
               substitute_cond=function(x){return bound(x,s)},
               substitute_body$0=
                function(eqns)
                 {function substitute_body(x,t)
                   {return e_unify(venv,lenv,s,[0,[0,fetch(x,s),t],eqns])}
                  return substitute_body},
               substitute_body=substitute_body$0(eqns),
               is_const=
                function(x)
                 {var match=get$9(venv,x);
                  if(match && match[1][2])return 1;
                  return 0},
               switch$0=0;
              if(0 === t[0])
               {var x=t[1];
                if(unify_cond(x,u))return unify_body(x,u);
                switch$0 = 1}
              else
               {var _acW_=t[2],_acX_=t[1];
                if(0 === u[0])
                 switch$0 = 1;
                else
                 {var us=u[2],g=u[1];
                  if(caml_string_equal(_acX_,g))
                   {var
                     _acY_=combine(_acW_,us),
                     param$3=append(_acY_,eqns),
                     param$0=param$3;
                    continue}}}
              if(switch$0)
               {if(0 === u[0])
                 {var x$0=u[1];if(unify_cond(x$0,t))return unify_body(x$0,t)}
                if(0 === t[0])
                 {var x$1=t[1];
                  if(substitute_cond(x$1))return substitute_body(x$1,u)}
                if(0 === u[0])
                 {var x$2=u[1];
                  if(substitute_cond(x$2))return substitute_body(x$2,t);
                  if(0 === t[0])
                   {var y=u[1],x$3=t[1];
                    if(caml_equal(x$3,y)){var param$0=eqns;continue}}
                  var y$0=u[1];
                  if(is_const(y$0))
                   {var match$0=get$9(venv,y$0);
                    if(match$0)
                     {var _acU_=match$0[1][2];
                      if(_acU_)
                       {var ye=_acU_[1],param$1=[0,[0,t,ye],eqns],param$0=param$1;
                        continue}}
                    throw Invalid_constant}}
                if(0 === t[0])
                 {var x$4=t[1];
                  if(is_const(x$4))
                   {var match$1=get$9(venv,x$4);
                    if(match$1)
                     {var _acV_=match$1[1][2];
                      if(_acV_)
                       {var xe=_acV_[1],param$2=[0,[0,xe,u],eqns],param$0=param$2;
                        continue}}
                    throw Invalid_constant}}}
              return 0}
            return [0,close$0(s)]}},
       f_unify=
        function(venv,lenv,s)
         {return function(param)
           {if(param)
             {var
               eqns=param[2],
               match=param[1],
               f2=match[2],
               f1=match[1],
               switch$0=0;
              if(typeof f1 === "number")
               {if(0 === f1)
                 {if(typeof f2 === "number" && ! f2)switch$0 = 1}
                else
                 if(typeof f2 === "number" && f2)switch$0 = 1}
              else
               switch(f1[0])
                {case 0:
                  if(typeof f2 !== "number" && 0 === f2[0])
                   {var l2=f2[2],p2=f2[1],l1=f1[2],p1=f1[1];
                    if(caml_string_equal(p1,p2))
                     {var _acH_=length(l2);
                      if(length(l1) === _acH_)
                       {var
                         _acI_=
                          function(s){return caml_call1(f_unify(venv,lenv,s),eqns)},
                         _acJ_=combine(l1,l2);
                        return bind$0(e_unify(venv,lenv,s,_acJ_),_acI_)}}}
                  break;
                 case 1:
                  if(typeof f2 !== "number" && 1 === f2[0])
                   {var l2$0=f2[2],c2=f2[1],l1$0=f1[2],c1=f1[1];
                    if(c1 === c2)
                     {var _acK_=length(l2$0);
                      if(length(l1$0) === _acK_)
                       {var subeqns=combine(l1$0,l2$0),_acL_=append(subeqns,eqns);
                        return caml_call1(f_unify(venv,lenv,s),_acL_)}}}
                  break;
                 default:
                  if(typeof f2 !== "number" && 2 === f2[0])
                   {var
                     f2$0=f2[4],
                     ty2=f2[3],
                     x2=f2[2],
                     b2=f2[1],
                     f1$0=f1[4],
                     ty1=f1[3],
                     x1=f1[2],
                     b1=f1[1];
                    if(b1 === b2 && caml_equal(ty1,ty2))
                     {var
                       _acM_=[0,x1,0],
                       _acN_=0,
                       _acO_=f_shift(_acN_,_acM_,f2$0),
                       _acP_=[0,[0,x1,0]],
                       _acQ_=[0,x2,0],
                       f2$1=f_apply1(_acQ_,_acP_,_acO_),
                       _acR_=
                        function(s){return caml_call1(f_unify(venv,lenv,s),eqns)},
                       _acS_=[0,[0,f1$0,f2$1],0],
                       _acT_=enter(lenv,x1);
                      return bind$0(caml_call1(f_unify(venv,_acT_,s),_acS_),_acR_)}}}
              return switch$0?caml_call1(f_unify(venv,lenv,s),eqns):0}
            return [0,s]}},
       check_entry=
        function(env)
         {function for_type(_acG_){return tcheck(env,_acG_)}
          function for_expr(_acF_){return echeck(env,_acF_)}
          return function(param)
           {switch(param[0])
             {case 0:
               var ar=param[2],name=param[1],_acx_=map$4(for_type,ar);
               return [0,[0,unloc(name),_acx_]];
              case 1:
               var
                match=param[2],
                ty=match[2],
                ar$0=match[1],
                name$0=param[1],
                _acy_=for_type(ty),
                _acz_=[0,map$4(for_type,ar$0),_acy_];
               return [1,[0,unloc(name$0),_acz_]];
              case 2:
               var
                ty$0=param[2],
                name$1=param[1],
                _acA_=0,
                _acB_=[0,for_type(ty$0),_acA_];
               return [2,[0,unloc(name$1),_acB_]];
              case 3:
               var
                body=param[2],
                name$2=param[1],
                match$0=for_expr(body),
                ty$1=match$0[2],
                body$0=match$0[1],
                _acC_=[0,ty$1,[0,body$0]];
               return [2,[0,unloc(name$2),_acC_]];
              case 4:
               var name$3=param[1],_acD_=0;return [3,[0,unloc(name$3),_acD_]];
              default:
               var ty$2=param[2],name$4=param[1],_acE_=[0,for_type(ty$2)];
               return [3,[0,unloc(name$4),_acE_]]}}},
       env_of_entries=
        function(entries)
         {return fold
                  (function(env,entry)
                    {var match=caml_call1(check_entry(env),entry);
                     switch(match[0])
                      {case 0:var nmty=match[1];return push$1(env,nmty);
                       case 1:var nmty$0=match[1];return push$2(env,nmty$0);
                       case 2:var nmty$1=match[1];return push$4(env,nmty$1);
                       default:var nmty$2=match[1];return push$3(env,nmty$2)}},
                   empty$7,
                   entries)},
       check$2=
        function(param)
         {var f=param[3],hs=param[2],ps=param[1],env=env_of_entries(ps);
          function for_form(_acw_){return check$1(env,_acw_)}
          var _acv_=for_form(f);
          return [0,env,map$4(for_form,hs),_acv_]},
       Error$0=[248,_qJ_,caml_fresh_oo_id(0)],
       token2terminal=
        function(tok)
         {if(typeof tok === "number")
           switch(tok)
            {case 0:return 1;
             case 1:return 2;
             case 2:return 3;
             case 3:return 4;
             case 4:return 5;
             case 5:return 6;
             case 6:return 7;
             case 7:return 8;
             case 8:return 9;
             case 9:return 11;
             case 10:return 12;
             case 11:return 13;
             case 12:return 14;
             case 13:return 15;
             case 14:return 16;
             case 15:return 17;
             case 16:return 19;
             case 17:return 20;
             case 18:return 21;
             case 19:return 22;
             case 20:return 23;
             case 21:return 24;
             case 22:return 25;
             case 23:return 26;
             case 24:return 27;
             case 25:return 28;
             default:return 29}
          else
           return 0 === tok[0]?10:18},
       error_terminal=0,
       token2value=
        function(tok)
         {if(typeof tok === "number")
           switch(tok)
            {case 0:return 0;
             case 1:return 0;
             case 2:return 0;
             case 3:return 0;
             case 4:return 0;
             case 5:return 0;
             case 6:return 0;
             case 7:return 0;
             case 8:return 0;
             case 9:return 0;
             case 10:return 0;
             case 11:return 0;
             case 12:return 0;
             case 13:return 0;
             case 14:return 0;
             case 15:return 0;
             case 16:return 0;
             case 17:return 0;
             case 18:return 0;
             case 19:return 0;
             case 20:return 0;
             case 21:return 0;
             case 22:return 0;
             case 23:return 0;
             case 24:return 0;
             case 25:return 0;
             default:return 0}
          else
           {if(0 === tok[0]){var v=tok[1];return v}var v$0=tok[1];return v$0}},
       start=5,
       _qK_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_t=match[3],
           t=match[2],
           menhir_s=match[1],
           endpos_2=menhir_stack[4];
          return [0,menhir_s,t,startpos_t,endpos_2,menhir_stack$0]},
       _qL_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           endpos_1=menhir_stack[4],
           startpos_1=menhir_stack[3],
           _acu_=0;
          throw [0,ParseError,[0,make$6(startpos_1,endpos_1)],_acu_]},
       _qM_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_e=match[3],
           e=match[2],
           menhir_s=match[1],
           endpos_2=menhir_stack[4];
          return [0,menhir_s,e,startpos_e,endpos_2,menhir_stack$0]},
       _qN_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           endpos_1=menhir_stack[4],
           startpos_1=menhir_stack[3],
           _act_=0;
          throw [0,ParseError,[0,make$6(startpos_1,endpos_1)],_act_]},
       _qO_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_p=match[3],
           p=match[2],
           menhir_s=match[1],
           endpos_2=menhir_stack[4];
          return [0,menhir_s,p,startpos_p,endpos_2,menhir_stack$0]},
       _qP_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           endpos_1=menhir_stack[4],
           startpos_1=menhir_stack[3],
           _acs_=0;
          throw [0,ParseError,[0,make$6(startpos_1,endpos_1)],_acs_]},
       _qQ_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_f=match[3],
           f=match[2],
           menhir_s=match[1],
           endpos_2=menhir_stack[4];
          return [0,menhir_s,f,startpos_f,endpos_2,menhir_stack$0]},
       _qR_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           endpos_1=menhir_stack[4],
           startpos_1=menhir_stack[3],
           _acr_=0;
          throw [0,ParseError,[0,make$6(startpos_1,endpos_1)],_acr_]},
       _qS_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_e=match[3],
           e=match[2],
           menhir_s=match[1],
           endpos_2=menhir_stack[4];
          return [0,menhir_s,e,startpos_e,endpos_2,menhir_stack$0]},
       _qT_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           endpos_1=menhir_stack[4],
           startpos_1=menhir_stack[3],
           _acq_=0;
          throw [0,ParseError,[0,make$6(startpos_1,endpos_1)],_acq_]},
       _qU_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _acp_=menhir_stack[5],
           match=_acp_[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           aout=_acp_[2],
           endpos_3=menhir_stack[4],
           f=[0,make$6(startpos_x,endpos_x),x],
           v=[1,f,aout];
          return [0,menhir_s,v,startpos_x,endpos_3,menhir_stack$0]},
       _qV_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_3=menhir_stack[4],
           f=[0,make$6(startpos_x,endpos_x),x],
           v=[1,f,0];
          return [0,menhir_s,v,startpos_x,endpos_3,menhir_stack$0]},
       _qW_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _aco_=menhir_stack[5],
           match=_aco_[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           i=_aco_[2],
           endpos_4=menhir_stack[4],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0,i];
          return [0,menhir_s,v,startpos_x,endpos_4,menhir_stack$0]},
       _qX_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0,0];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _qY_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,make$6(startpos_x,endpos_x),x];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _qZ_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _acn_=menhir_stack[5][5],
           match=_acn_[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           endpos_x=_acn_[4],
           startpos_x=_acn_[3],
           x=_acn_[2],
           endpos_t=menhir_stack[4],
           t=menhir_stack[2],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[3,x$0,t];
          return [0,menhir_s,v,startpos_1,endpos_t,menhir_stack$0]},
       _q0_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_t1=match[3],
           t1=match[2],
           menhir_s=match[1],
           endpos_t2=menhir_stack[4],
           t2=menhir_stack[2],
           v=[2,t1,t2];
          return [0,menhir_s,v,startpos_t1,endpos_t2,menhir_stack$0]},
       _q1_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_t1=match[3],
           t1=match[2],
           menhir_s=match[1],
           endpos_t2=menhir_stack[4],
           t2=menhir_stack[2],
           v=[1,t1,t2];
          return [0,menhir_s,v,startpos_t1,endpos_t2,menhir_stack$0]},
       _q2_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _q3_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           endpos_3=menhir_stack[4];
          return [0,menhir_s,0,startpos_1,endpos_3,menhir_stack$0]},
       _q4_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _acm_=menhir_stack[5],
           match=_acm_[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           x=_acm_[2],
           endpos_3=menhir_stack[4];
          return [0,menhir_s,x,startpos_1,endpos_3,menhir_stack$0]},
       _q5_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,make$6(startpos_x,endpos_x),x];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _q6_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_ty=menhir_stack[4],
           ty=menhir_stack[2],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0,ty];
          return [0,menhir_s,v,startpos_x,endpos_ty,menhir_stack$0]},
       _q7_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_xs=match[3],
           xs=match[2],
           menhir_s=match[1],
           endpos_ty=menhir_stack[4],
           ty=menhir_stack[2],
           v=[0,xs,ty];
          return [0,menhir_s,v,startpos_xs,endpos_ty,menhir_stack$0]},
       _q8_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_xs=menhir_stack[4],
           xs=menhir_stack[2],
           v=[0,x,xs];
          return [0,menhir_s,v,startpos_x,endpos_xs,menhir_stack$0]},
       _q9_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,x,0];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _q__=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_xs=menhir_stack[4],
           xs=menhir_stack[2],
           v=[0,x,xs];
          return [0,menhir_s,v,startpos_x,endpos_xs,menhir_stack$0]},
       _q$_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,x,0];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _ra_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_xs=menhir_stack[4],
           xs=menhir_stack[2],
           v=[0,x,xs];
          return [0,menhir_s,v,startpos_x,endpos_xs,menhir_stack$0]},
       _rb_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,x,0];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _rc_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_xs=menhir_stack[4],
           xs=menhir_stack[2],
           v=[0,x,xs];
          return [0,menhir_s,v,startpos_x,endpos_xs,menhir_stack$0]},
       _rd_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,x,0];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _re_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           endpos_xs=menhir_stack[4],
           xs=menhir_stack[2],
           v=[0,xs];
          return [0,menhir_s,v,startpos_1,endpos_xs,menhir_stack$0]},
       _rf_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_s=menhir_env[4],
           startpos=menhir_stack[4];
          return [0,menhir_s,0,startpos,startpos,menhir_stack]},
       _rg_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_e=menhir_stack[4],
           e=menhir_stack[2],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0,e];
          return [0,menhir_s,v,startpos_x,endpos_e,menhir_stack$0]},
       _rh_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1];
          return [0,menhir_s,x,startpos_x,endpos_x,menhir_stack$0]},
       _ri_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_s=menhir_env[4],
           startpos=menhir_stack[4];
          return [0,menhir_s,0,startpos,startpos,menhir_stack]},
       _rj_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1];
          return [0,menhir_s,x,startpos_x,endpos_x,menhir_stack$0]},
       _rk_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_s=menhir_env[4],
           startpos=menhir_stack[4];
          return [0,menhir_s,0,startpos,startpos,menhir_stack]},
       _rl_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1];
          return [0,menhir_s,x,startpos_x,endpos_x,menhir_stack$0]},
       _rm_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_s=menhir_env[4],
           startpos=menhir_stack[4];
          return [0,menhir_s,0,startpos,startpos,menhir_stack]},
       _rn_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _ack_=menhir_stack[5][5],
           match=_ack_[5],
           menhir_stack$0=match[5],
           startpos_xs=match[3],
           xs=match[2],
           menhir_s=match[1],
           hs=_ack_[2],
           endpos_f=menhir_stack[4],
           f=menhir_stack[2],
           _acl_=0,
           v=[0,xs,default$0(_acl_,hs),f];
          return [0,menhir_s,v,startpos_xs,endpos_f,menhir_stack$0]},
       _ro_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _acj_=menhir_stack[5][5],
           match=_acj_[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           xty=_acj_[2],
           endpos_f=menhir_stack[4],
           f=menhir_stack[2],
           v=[8,xty,f];
          return [0,menhir_s,v,startpos_1,endpos_f,menhir_stack$0]},
       _rp_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _aci_=menhir_stack[5][5],
           match=_aci_[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           xty=_aci_[2],
           endpos_f=menhir_stack[4],
           f=menhir_stack[2],
           v=[7,xty,f];
          return [0,menhir_s,v,startpos_1,endpos_f,menhir_stack$0]},
       _rq_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           endpos_f=menhir_stack[4],
           f=menhir_stack[2],
           v=[6,f];
          return [0,menhir_s,v,startpos_1,endpos_f,menhir_stack$0]},
       _rr_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_f1=match[3],
           f1=match[2],
           menhir_s=match[1],
           endpos_f2=menhir_stack[4],
           f2=menhir_stack[2],
           v=[5,f1,f2];
          return [0,menhir_s,v,startpos_f1,endpos_f2,menhir_stack$0]},
       _rs_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_f1=match[3],
           f1=match[2],
           menhir_s=match[1],
           endpos_f2=menhir_stack[4],
           f2=menhir_stack[2],
           v=[4,f1,f2];
          return [0,menhir_s,v,startpos_f1,endpos_f2,menhir_stack$0]},
       _rt_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_f1=match[3],
           f1=match[2],
           menhir_s=match[1],
           endpos_f2=menhir_stack[4],
           f2=menhir_stack[2],
           v=[3,f1,f2];
          return [0,menhir_s,v,startpos_f1,endpos_f2,menhir_stack$0]},
       _ru_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_f1=match[3],
           f1=match[2],
           menhir_s=match[1],
           endpos_f2=menhir_stack[4],
           f2=menhir_stack[2],
           v=[2,f1,f2];
          return [0,menhir_s,v,startpos_f1,endpos_f2,menhir_stack$0]},
       _rv_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _ach_=menhir_stack[5],
           match=_ach_[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           aout=_ach_[2],
           endpos_3=menhir_stack[4],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0,aout];
          return [0,menhir_s,v,startpos_x,endpos_3,menhir_stack$0]},
       _rw_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           startpos_e1=match[3],
           e1=match[2],
           menhir_s=match[1],
           endpos_e2=menhir_stack[4],
           e2=menhir_stack[2],
           _acg_=[0,e1,[0,e2,0]],
           v=[0,mkloc(dummy$3,_rx_),_acg_];
          return [0,menhir_s,v,startpos_e1,endpos_e2,menhir_stack$0]},
       _ry_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0,0];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _rz_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_1=menhir_stack[4],
           startpos_1=menhir_stack[3],
           menhir_s=menhir_stack[1];
          return [0,menhir_s,v,startpos_1,endpos_1,menhir_stack$0]},
       _rA_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_1=menhir_stack[4],
           startpos_1=menhir_stack[3],
           menhir_s=menhir_stack[1];
          return [0,menhir_s,v$0,startpos_1,endpos_1,menhir_stack$0]},
       _rB_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _acf_=menhir_stack[5],
           match=_acf_[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           x=_acf_[2],
           endpos_3=menhir_stack[4];
          return [0,menhir_s,x,startpos_1,endpos_3,menhir_stack$0]},
       _rC_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,make$6(startpos_x,endpos_x),x];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _rD_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _ace_=menhir_stack[5],
           match=_ace_[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           x=_ace_[2],
           endpos_3=menhir_stack[4];
          return [0,menhir_s,x,startpos_1,endpos_3,menhir_stack$0]},
       _rE_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_e=menhir_stack[4],
           startpos_e=menhir_stack[3],
           e=menhir_stack[2],
           menhir_s=menhir_stack[1];
          return [0,menhir_s,e,startpos_e,endpos_e,menhir_stack$0]},
       _rF_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           menhir_stack$0=menhir_stack[5],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           menhir_s=menhir_stack[1],
           v=[0,make$6(startpos_x,endpos_x),x];
          return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
       _rG_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           _acd_=menhir_stack[5][5],
           match=_acd_[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           endpos_x=_acd_[4],
           startpos_x=_acd_[3],
           x=_acd_[2],
           endpos_t=menhir_stack[4],
           t=menhir_stack[2],
           a=[0,make$6(startpos_x,endpos_x),x],
           v=[5,a,t];
          return [0,menhir_s,v,startpos_1,endpos_t,menhir_stack$0]},
       _rH_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5],
           menhir_stack$0=match[5],
           startpos_1=match[3],
           menhir_s=match[1],
           endpos_x=menhir_stack[4],
           startpos_x=menhir_stack[3],
           x=menhir_stack[2],
           a=[0,make$6(startpos_x,endpos_x),x],
           v=[4,a];
          return [0,menhir_s,v,startpos_1,endpos_x,menhir_stack$0]},
       _rI_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_body=menhir_stack[4],
           body=menhir_stack[2],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[3,x$0,body];
          return [0,menhir_s,v,startpos_x,endpos_body,menhir_stack$0]},
       _rJ_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_xty=menhir_stack[4],
           xty=menhir_stack[2],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[2,x$0,xty];
          return [0,menhir_s,v,startpos_x,endpos_xty,menhir_stack$0]},
       _rK_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_xty=menhir_stack[4],
           xty=menhir_stack[2],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[1,x$0,xty];
          return [0,menhir_s,v,startpos_x,endpos_xty,menhir_stack$0]},
       _rL_=
        function(menhir_env)
         {var
           menhir_stack=menhir_env[3],
           match=menhir_stack[5][5],
           menhir_stack$0=match[5],
           endpos_x=match[4],
           startpos_x=match[3],
           x=match[2],
           menhir_s=match[1],
           endpos_xs=menhir_stack[4],
           xs=menhir_stack[2],
           x$0=[0,make$6(startpos_x,endpos_x),x],
           v=[0,x$0,xs];
          return [0,menhir_s,v,startpos_x,endpos_xs,menhir_stack$0]},
       semantic_action=
        [0,
         function(menhir_env)
          {var
            menhir_stack=menhir_env[3],
            menhir_stack$0=menhir_stack[5],
            endpos_x=menhir_stack[4],
            startpos_x=menhir_stack[3],
            x=menhir_stack[2],
            menhir_s=menhir_stack[1],
            x$0=[0,make$6(startpos_x,endpos_x),x],
            v=[0,x$0,0];
           return [0,menhir_s,v,startpos_x,endpos_x,menhir_stack$0]},
         _rL_,
         _rK_,
         _rJ_,
         _rI_,
         _rH_,
         _rG_,
         _rF_,
         _rE_,
         _rD_,
         _rC_,
         _rB_,
         _rA_,
         _rz_,
         _ry_,
         _rw_,
         _rv_,
         _ru_,
         _rt_,
         _rs_,
         _rr_,
         _rq_,
         _rp_,
         _ro_,
         _rn_,
         _rm_,
         _rl_,
         _rk_,
         _rj_,
         _ri_,
         _rh_,
         _rg_,
         _rf_,
         _re_,
         _rd_,
         _rc_,
         _rb_,
         _ra_,
         _q$_,
         _q__,
         _q9_,
         _q8_,
         _q7_,
         _q6_,
         _q5_,
         _q4_,
         _q3_,
         _q2_,
         _q1_,
         _q0_,
         _qZ_,
         _qY_,
         _qX_,
         _qW_,
         _qV_,
         _qU_,
         _qT_,
         _qS_,
         _qR_,
         _qQ_,
         _qP_,
         _qO_,
         _qN_,
         _qM_,
         _qL_,
         _qK_],
       ET=
        _fq_
         ([0,
           token2terminal,
           error_terminal,
           token2value,
           default_reduction,
           error,
           action,
           lhs,
           goto$0,
           start,
           semantic_action,
           Error$0,
           0]),
       TI=_fs_(ET),
       entry=TI[2],
       trace=0,
       _rM_=[0],
       terminal=
        function(t)
         {if(29 < t >>> 0)throw [0,Assert_failure,_rN_];
          switch(t)
           {case 0:return _rO_;
            case 1:return _rP_;
            case 2:return _rQ_;
            case 3:return _rR_;
            case 4:return _rS_;
            case 5:return _rT_;
            case 6:return _rU_;
            case 7:return _rV_;
            case 8:return _rW_;
            case 9:return _rX_;
            case 10:return _rY_;
            case 11:return _rZ_;
            case 12:return _r0_;
            case 13:return _r1_;
            case 14:return _r2_;
            case 15:return _r3_;
            case 16:return _r4_;
            case 17:return _r5_;
            case 18:return _r6_;
            case 19:return _r7_;
            case 20:return _r8_;
            case 21:return _r9_;
            case 22:return _r__;
            case 23:return _r$_;
            case 24:return _sa_;
            case 25:return _sb_;
            case 26:return _sc_;
            case 27:return _sd_;
            case 28:return _se_;
            default:return _sf_}},
       nonterminal=
        function(nt)
         {var switcher=nt - 5 | 0;
          if(25 < switcher >>> 0)throw [0,Assert_failure,_sg_];
          switch(switcher)
           {case 0:return _sh_;
            case 1:return _si_;
            case 2:return _sj_;
            case 3:return _sk_;
            case 4:return _sl_;
            case 5:return _sm_;
            case 6:return _sn_;
            case 7:return _so_;
            case 8:return _sp_;
            case 9:return _sq_;
            case 10:return _sr_;
            case 11:return _ss_;
            case 12:return _st_;
            case 13:return _su_;
            case 14:return _sv_;
            case 15:return _sw_;
            case 16:return _sx_;
            case 17:return _sy_;
            case 18:return _sz_;
            case 19:return _sA_;
            case 20:return _sB_;
            case 21:return _sC_;
            case 22:return _sD_;
            case 23:return _sE_;
            case 24:return _sF_;
            default:return _sG_}},
       _sH_=
        [0,
         terminal,
         nonterminal,
         rhs,
         lr0_core,
         lr0_items,
         lr0_incoming,
         nullable,
         first$0],
       _sI_=
        [0,
         token2terminal,
         error_terminal,
         token2value,
         default_reduction,
         error,
         action,
         lhs,
         goto$0,
         start,
         semantic_action,
         Error$0,
         trace],
       _sJ_=function(_aca_,_acb_,_acc_){return _fr_(_sI_,_aca_,_acb_,_acc_)},
       _sK_=function(_ab__,_ab$_){return _sJ_(_sH_,_ab__,_ab$_)};
      (function(_ab9_){return _sK_(ET,_ab9_)}(_rM_));
      var
       xnexpr=
        function(lexer,lexbuf)
         {return caml_call4(entry,-822677911,115,lexer,lexbuf)},
       xgoal=
        function(lexer,lexbuf)
         {return caml_call4(entry,-822677911,77,lexer,lexbuf)},
       xform=
        function(lexer,lexbuf)
         {return caml_call4(entry,-822677911,21,lexer,lexbuf)},
       xexpr=
        function(lexer,lexbuf)
         {return caml_call4(entry,-822677911,0,lexer,lexbuf)},
       lex_error=
        function(lexbuf,msg)
         {var _ab8_=[0,msg];throw [0,ParseError,[0,of_lexbuf(lexbuf)],_ab8_]},
       _sL_=0,
       _sM_=0,
       table=create$2(_sM_,_sL_),
       _sN_=function(_ab6_,_ab7_){return add$0(table,_ab6_,_ab7_)},
       _sO_=function(_ab5_){return curry(_sN_,_ab5_)};
      iter$0(_sO_,keywords);
      var
       main$0=
        function(counter,lexbuf)
         {var _ab4_=0;
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return ocaml_lex_main_rec(counter$0,lexbuf,_ab4_)}
          return caml_trampoline_return(ocaml_lex_main_rec,[0,lexbuf,_ab4_])},
       ocaml_lex_main_rec=
        function(counter,lexbuf,ocaml_lex_state)
         {var ocaml_lex_state$0=ocaml_lex_state;
          for(;;)
           {var
             ocaml_lex_state$1=
              engine(ocaml_lex_tables,ocaml_lex_state$0,lexbuf);
            if(25 < ocaml_lex_state$1 >>> 0)
             {var _abW_=lexbuf[1];
              caml_call1(_abW_,lexbuf);
              var ocaml_lex_state$0=ocaml_lex_state$1;
              continue}
            switch(ocaml_lex_state$1)
             {case 0:
               new_line(lexbuf);
               if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return main$0(counter$0,lexbuf)}
               return caml_trampoline_return(main$0,[0,lexbuf]);
              case 1:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return main$0(counter$1,lexbuf)}
               return caml_trampoline_return(main$0,[0,lexbuf]);
              case 2:
               var
                _abX_=lexbuf[6],
                _abY_=lexbuf[5],
                id=sub_lexeme(lexbuf,_abY_,_abX_);
               try
                {var _abZ_=find(table,id);return _abZ_}
               catch(_ab3_)
                {_ab3_ = caml_wrap_exception(_ab3_);
                 if(_ab3_ === Not_found)return [1,id];
                 throw _ab3_}
              case 3:
               var
                _ab0_=lexbuf[6],
                _ab1_=lexbuf[5],
                n=sub_lexeme(lexbuf,_ab1_,_ab0_);
               return [0,caml_int_of_string(n)];
              case 4:return 10;
              case 5:return 4;
              case 6:return 13;
              case 7:return 6;
              case 8:return 15;
              case 9:return 11;
              case 10:return 12;
              case 11:return 14;
              case 12:return 9;
              case 13:return 7;
              case 14:return 23;
              case 15:return 21;
              case 16:return 3;
              case 17:return 25;
              case 18:return 22;
              case 19:return 19;
              case 20:return 24;
              case 21:return 26;
              case 22:return 8;
              case 23:return 2;
              case 24:return 20;
              default:
               var _ab2_=lexbuf[5],c=sub_lexeme_char(lexbuf,_ab2_);
               return lex_error(lexbuf,caml_call1(sprintf(_sP_),c))}}},
       main=function(lexbuf){return caml_trampoline(main$0(0,lexbuf))},
       parserfun_expr=traditional2revised$0(xexpr),
       parserfun_nexpr=traditional2revised$0(xnexpr),
       parserfun_form=traditional2revised$0(xform),
       parserfun_goal=traditional2revised$0(xgoal),
       lexbuf=function(reader){return get$5(reader)},
       from_string$1=
        function(data)
         {var _abV_=0;return create$11(0,from_string(_abV_,data))},
       lexer=
        function(lexbuf)
         {var token=main(lexbuf),_abU_=lexeme_end_p(lexbuf);
          return [0,token,lexeme_start_p(lexbuf),_abU_]},
       parse_expr=
        function(reader)
         {return caml_call1
                  (parserfun_expr,
                   function(param){return lexer(lexbuf(reader))})},
       parse_nexpr=
        function(reader)
         {return caml_call1
                  (parserfun_nexpr,
                   function(param){return lexer(lexbuf(reader))})},
       parse_form=
        function(reader)
         {return caml_call1
                  (parserfun_form,
                   function(param){return lexer(lexbuf(reader))})},
       parse_goal=
        function(reader)
         {return caml_call1
                  (parserfun_goal,
                   function(param){return lexer(lexbuf(reader))})},
       empty$11=function(env){return [0,env,empty$1]},
       LemmaNotFound=[248,_sQ_,caml_fresh_oo_id(0)],
       find$5=
        function(db,name)
         {var _abS_=[0,LemmaNotFound,name],_abT_=db[2];
          return get_exn(find_opt$0(name,_abT_),_abS_)},
       add$10=
        function(init,name,form)
         {var
           _abO_=from_string$1(form),
           form$0=parse_form(_abO_),
           _abP_=init[1],
           form$1=check$1(_abP_,form$0),
           _abQ_=init[2],
           _abR_=add$6(name,form$1,_abQ_);
          return [0,init[1],_abR_]},
       load=
        function(db,lemmas)
         {return fold
                  (function(db,param)
                    {var form=param[2],name=param[1];
                     return add$10(db,name,form)},
                   db,
                   lemmas)},
       all$1=function(db){return bindings(db[2])},
       fresh$2=function(param){return fresh(0)},
       ofint=function(i){return i},
       toint=function(t){return t},
       eq$0=function(_abN_,_abM_){return _abN_ === _abM_?1:0},
       InvalidGoalId=[248,_sR_,caml_fresh_oo_id(0)],
       InvalidHyphId=[248,_sS_,caml_fresh_oo_id(0)],
       SubgoalNotOpened=[248,_sT_,caml_fresh_oo_id(0)],
       empty$12=0,
       byid$0=
        function(hyps,id)
         {var _abL_=[0,InvalidHyphId,id];
          return get_exn(assoc$0(id,hyps),_abL_)},
       add$11=
        function(hyps,id,h)
         {var _abK_=assoc$0(id,hyps);
          if(is_none(_abK_))return [0,[0,id,h],hyps];
          throw [0,Assert_failure,_sU_]},
       remove$4=
        function(hyps,id)
         {return find_all$0
                  (function(param){var x=param[1];return 1 - eq$0(x,id)},hyps)},
       move=
        function(hyps,from,before)
         {var tg=byid$0(hyps,from),hyps$0=remove$4(hyps,from);
          if(before)
           {var
             before$0=before[1],
             _abF_=[0,InvalidHyphId,before$0],
             _abG_=
              function(param,_abJ_){var x=_abJ_[1];return eq$0(x,before$0)},
             _abH_=findi$0(_abG_,hyps$0),
             match=get_exn(_abH_,_abF_),
             pos=match[1],
             _abI_=1 + pos | 0,
             match$0=split_nth(_abI_,hyps$0),
             pre=match$0[2],
             post=match$0[1];
            return append(post,[0,[0,from,tg],pre])}
          return [0,[0,from,tg],hyps$0]},
       bump=
        function(hyps)
         {return map$4
                  (function(param)
                    {var h=param[2],id=param[1];
                     return [0,id,[0,h[1],h[2] + 1 | 0,h[3]]]},
                   hyps)},
       ids=function(hyps){return fst(hyps)},
       map$7=
        function(f,hyps)
         {return map$4(function(_abE_){return snd_map(f,_abE_)},hyps)},
       to_list$1=function(hyps){return hyps},
       mk_hyp=
        function(src,opt,form)
         {if(opt)var sth=opt[1],gen=sth;else var gen=0;
          return [0,src,gen,form]},
       init$2=
        function(env,hyps,goal)
         {recheck(env,goal);
          function _abt_(_abD_){return recheck(env,_abD_)}
          iter$0(_abt_,hyps);
          var _abu_=0,uid=fresh$2(_abu_);
          function _abv_(hs,f)
           {var _abz_=0,_abA_=0,_abB_=mk_hyp(_abA_,_abz_,f),_abC_=0;
            return add$11(hs,fresh$2(_abC_),_abB_)}
          var
           g_hyps=fold(_abv_,empty$12,hyps),
           root=[0,uid,[0,env,g_hyps,goal]],
           _abw_=empty$11(env),
           _abx_=[0,empty$1],
           _aby_=[0,uid,0];
          return [0,
                  uid,
                  singleton$2(uid,root),
                  _aby_,
                  empty$1,
                  empty$1,
                  _abx_,
                  _abw_]},
       db=function(proof){return proof[7]},
       loaddb=
        function(init,lemmas)
         {var _abr_=init[7],_abs_=load(_abr_,lemmas);
          return [0,init[1],init[2],init[3],init[4],init[5],init[6],_abs_]},
       closed=function(proof){return is_empty$2(proof[3])},
       opened=function(proof){return proof[3]},
       after$0=
        function(proof,id){var _abq_=proof[4];return find$2(id,_abq_)[2]},
       focused=function(proof,id){return hd(after$0(proof,id))},
       byid$1=
        function(proof,id)
         {var
           _abn_=[0,InvalidGoalId,id],
           _abo_=proof[2],
           _abp_=find$3(id,_abo_),
           goal=get_exn(_abp_,_abn_);
          return goal[2]},
       set_meta=
        function(proof,id,meta)
         {if(meta)
           {var meta$0=meta[1],_abj_=proof[6][1],_abk_=add$6(id,meta$0,_abj_);
            proof[6][1] = _abk_;
            return 0}
          var _abl_=proof[6][1],_abm_=remove$2(id,_abl_);
          proof[6][1] = _abm_;
          return 0},
       get_meta=function(proof,id){return find$3(id,proof[6][1])},
       hprogress=
        function(pr,id,pn,sub)
         {byid$1(pr,id);
          var
           _aa2_=0,
           g_id=fresh$2(_aa2_),
           _aa3_=sub[2],
           hyps=bump(_aa3_),
           sub$0=[0,sub[1],hyps,sub[3]],
           sub$1=[0,g_id,sub$0];
          try
           {var
             _aa4_=pr[3],
             _aa5_=function(_abi_){return eq$0(id,_abi_)},
             match=pivot(_aa5_,_aa4_)}
          catch(_abh_)
           {_abh_ = caml_wrap_exception(_abh_);
            if(_abh_[1] === Invalid_argument)throw [0,SubgoalNotOpened,id];
            throw _abh_}
          var
           go=match[3],
           gr=match[1],
           dep=[0,id,[0,g_id,0],pn],
           _aa6_=pr[6][1],
           match$0=find$3(id,_aa6_);
          if(match$0)
           var meta=match$0[1],_aa7_=pr[6][1],meta$0=add$6(g_id,meta,_aa7_);
          else
           var meta$0=pr[6][1];
          var
           _aa8_=pr[2],
           _aa9_=sub$1[1],
           map=add$6(_aa9_,sub$1,_aa8_),
           _aa__=pr[7],
           _aa$_=[0,meta$0],
           _aba_=pr[5],
           _abb_=add$6(g_id,dep,_aba_),
           _abc_=pr[4],
           _abd_=add$6(id,dep,_abc_),
           _abe_=[0,g_id,0],
           _abf_=append(_abe_,go),
           _abg_=append(gr,_abf_);
          return [0,g_id,[0,pr[1],map,_abg_,_abd_,_abb_,_aa$_,_aa__]]},
       xprogress=
        function(pr,id,pn,sub)
         {byid$1(pr,id);
          function for1(sub)
           {var
             _aa0_=sub[2],
             hyps=bump(_aa0_),
             sub$0=[0,sub[1],hyps,sub[3]],
             _aa1_=0;
            return [0,fresh$2(_aa1_),sub$0]}
          var sub$0=map$4(for1,sub);
          function _aaG_(x){return x[1]}
          var sids=map$4(_aaG_,sub$0);
          try
           {var
             _aaH_=pr[3],
             _aaI_=function(_aaZ_){return eq$0(id,_aaZ_)},
             match=pivot(_aaI_,_aaH_)}
          catch(_aaY_)
           {_aaY_ = caml_wrap_exception(_aaY_);
            if(_aaY_[1] === Invalid_argument)throw [0,SubgoalNotOpened,id];
            throw _aaY_}
          var
           go=match[3],
           gr=match[1],
           dep=[0,id,sids,pn],
           _aaJ_=pr[6][1],
           match$0=find$3(id,_aaJ_);
          if(match$0)
           var
            meta=match$0[1],
            _aaK_=pr[6][1],
            _aaL_=function(map,id){return add$6(id,meta,map)},
            meta$0=fold(_aaL_,_aaK_,sids);
          else
           var meta$0=pr[6][1];
          var _aaM_=pr[2];
          function _aaN_(sub,map){return add$6(sub[1],sub,map)}
          var
           map=fold_right$1(_aaN_,sub$0,_aaM_),
           _aaO_=pr[7],
           _aaP_=[0,meta$0],
           _aaQ_=pr[5];
          function _aaR_(_aaX_){return symbol$4(add$6,dep,_aaX_)}
          var
           _aaS_=fold_right$1(_aaR_,sids,_aaQ_),
           _aaT_=pr[4],
           _aaU_=add$6(id,dep,_aaT_),
           _aaV_=append(sids,go),
           _aaW_=append(gr,_aaV_);
          return [0,pr[1],map,_aaW_,_aaU_,_aaS_,_aaP_,_aaO_]},
       sgprogress=
        function(goal,opt,sub)
         {if(opt)var sth=opt[1],clear=sth;else var clear=0;
          function for1(param)
           {var concl=param[2],newlc=param[1];
            function subfor1(hyps,param)
             {var newlc=param[2],hid=param[1];
              function _aaB_(hyps,hid)
               {byid$0(hyps,hid);return clear?remove$4(hyps,hid):hyps}
              var hyps$0=fold$3(_aaB_,hyps,hid),hsrc=clear?0:hid;
              function _aaC_(hyps,newh)
               {var _aaD_=0,_aaE_=mk_hyp(hsrc,_aaD_,newh),_aaF_=0;
                return add$11(hyps,fresh$2(_aaF_),_aaE_)}
              var hyps$1=fold(_aaC_,hyps$0,newlc);
              return hyps$1}
            var _aaA_=goal[2],hyps=fold(subfor1,_aaA_,newlc);
            return [0,goal[1],hyps,concl]}
          return map$4(for1,sub)},
       sprogress=
        function(pr,opt,id)
         {if(opt)var sth=opt[1],clear=sth;else var clear=0;
          return function(pn,sub)
           {var
             goal=byid$1(pr,id),
             _aaz_=[0,clear],
             sub$0=sgprogress(goal,_aaz_,sub);
            return xprogress(pr,id,pn,sub$0)}},
       progress=
        function(pr,id,pn,sub)
         {var goal=byid$1(pr,id);
          function _aay_(x){return [0,goal[1],goal[2],x]}
          var sub$0=map$4(_aay_,sub);
          return xprogress(pr,id,pn,sub$0)},
       TacticNotApplicable=[248,_sV_,caml_fresh_oo_id(0)],
       TId=[248,_sW_,caml_fresh_oo_id(0)],
       id_tac=
        function(param)
         {var id=param[2],pr=param[1],_aax_=0;
          return xprogress(pr,id,TId,[0,byid$1(pr,id),_aax_])},
       then_tac=
        function(t1,t2,targ)
         {var id=targ[2],pr=caml_call1(t1,targ),hd=focused(pr,id);
          return caml_call1(t2,[0,pr,hd])},
       doit$1=
        function(acc,f)
         {var acc$0=acc,f$0=f;
          for(;;)
           {if(typeof f$0 !== "number" && 1 === f$0[0] && 3654636 === f$0[1])
             {var _aav_=f$0[2];
              if(_aav_)
               {var _aaw_=_aav_[2];
                if(_aaw_ && ! _aaw_[2])
                 {var
                   f$1=_aaw_[1],
                   f1=_aav_[1],
                   acc$1=[0,f1,acc$0],
                   acc$0=acc$1,
                   f$0=f$1;
                  continue}}}
            return [0,rev(acc$0),f$0]}},
       prune_premisses=function(f){return doit$1(0,f)},
       doit$2=
        function(i,acc,s,f)
         {var i$0=i,acc$0=acc,s$0=s,f$0=f;
          for(;;)
           {if(typeof f$0 !== "number")
             switch(f$0[0])
              {case 1:
                if(3654636 === f$0[1])
                 {var _aat_=f$0[2];
                  if(_aat_)
                   {var _aau_=_aat_[2];
                    if(_aau_ && ! _aau_[2])
                     {var
                       f$1=_aau_[1],
                       f1=_aat_[1],
                       acc$1=[0,[0,i$0,f1],acc$0],
                       acc$0=acc$1,
                       f$0=f$1;
                      continue}}}
                break;
               case 2:
                if(840561112 === f$0[1])
                 {var
                   f$2=f$0[4],
                   x=f$0[2],
                   s$1=[0,[0,x,0],s$0],
                   i$1=i$0 + 1 | 0,
                   i$0=i$1,
                   s$0=s$1,
                   f$0=f$2;
                  continue}
                break
               }
            return [0,rev(acc$0),f$0,s$0]}},
       prune_premisses_fa=
        function(f)
         {var
           _aaq_=0,
           _aar_=0,
           _aas_=0,
           match=doit$2(_aas_,_aar_,_aaq_,f),
           s=match[3],
           hy=match[2],
           pre=match[1];
          return [0,pre,hy,oflist(s)]},
       doit$3=
        function(i,acc,s,f)
         {var s$0=s,f$0=f;
          for(;;)
           {if
             (typeof f$0 !== "number" && 2 === f$0[0] && 172470935 === f$0[1])
             {var f$1=f$0[4],x=f$0[2],s$1=[0,[0,x,0],s$0],s$0=s$1,f$0=f$1;
              continue}
            return [0,rev(acc),f$0,s$0]}},
       prune_premisses_ex=
        function(f)
         {var
           _aan_=0,
           _aao_=0,
           _aap_=0,
           match=doit$3(_aap_,_aao_,_aan_,f),
           s=match[3],
           hy=match[2],
           pre=match[1];
          return [0,pre,hy,oflist(s)]},
       remove_form=
        function(env,f,param)
         {if(param)
           {var g=param[1],l=param[2],_aam_=0;
            if(caml_call1(f_equal(_aam_,env,g),f))return l;
            var l$0=param[2];
            return [0,g,remove_form(env,f,l$0)]}
          throw TacticNotApplicable},
       TDef=[248,_sX_,caml_fresh_oo_id(0)],
       add_local=
        function(param,_$2_)
         {var
           hd=_$2_[2],
           proof=_$2_[1],
           body=param[3],
           ty=param[2],
           name=param[1],
           goal=byid$1(proof,hd),
           _$3_=0,
           _$4_=goal[1];
          function _$5_(_aal_){return erecheck(_$4_,ty,_aal_)}
          map_default(_$5_,_$3_,body);
          var
           _$6_=[0,name,[0,ty,body]],
           _$7_=goal[1],
           g_env=push$4(_$7_,_$6_),
           _$8_=[0,name,0],
           _$9_=0;
          function _$__(_aak_){return e_shift(_$9_,_$8_,_aak_)}
          function _$$_(_aaj_){return map$3(_$__,_aaj_)}
          var g_env$0=map$6(g_env,_$$_),_aaa_=goal[2];
          function _aab_(init)
           {var
             _aaf_=init[3],
             _aag_=[0,name,0],
             _aah_=0,
             _aai_=f_shift(_aah_,_aag_,_aaf_);
            return [0,init[1],init[2],_aai_]}
          var
           g_hyps=map$7(_aab_,_aaa_),
           _aac_=goal[3],
           _aad_=[0,name,0],
           _aae_=0,
           g_goal=f_shift(_aae_,_aad_,_aac_);
          return xprogress
                  (proof,
                   hd,
                   [0,TDef,[0,ty,body],hd],
                   [0,[0,g_env$0,g_hyps,g_goal],0])},
       TIntro=[248,_sY_,caml_fresh_oo_id(0)],
       intro=
        function(opt,param)
         {var id=param[2],pr=param[1];
          if(opt)var sth=opt[1],variant=sth;else var variant=_s0_;
          var
           pterm=[0,TIntro,variant],
           goal=byid$1(pr,id),
           g_env=goal[1],
           _$C_=byid$1(pr,id)[3],
           _$D_=variant[1],
           switch$0=0;
          if(0 === _$D_)
           {var _$E_=variant[2];
            if(_$E_)
             {var switch$1=0;
              if(typeof _$C_ !== "number" && 2 === _$C_[0])
               {if(172470935 === _$C_[1])
                 {var
                   body=_$C_[4],
                   xty=_$C_[3],
                   x=_$C_[2],
                   match=_$E_[1],
                   ety=match[2],
                   e=match[1],
                   goal$0=byid$1(pr,id),
                   _$F_=goal$0[1];
                  erecheck(_$F_,ety,e);
                  var _$G_=goal$0[1],_$H_=0;
                  if(1 - t_equal(_$H_,_$G_,xty,ety))throw TacticNotApplicable;
                  var _$I_=[0,x,0],goal$1=f_apply1(_$I_,e,body);
                  return caml_call2
                          (sprogress(pr,0,id),pterm,[0,[0,0,goal$1],0])}
                switch$1 = 1}}
            else
             if(typeof _$C_ === "number")
              {if(0 === _$C_)return progress(pr,id,pterm,0)}
             else
              switch(_$C_[0])
               {case 0:
                 if(! caml_string_notequal(_$C_[1],_sZ_))
                  {var _$J_=_$C_[2];
                   if(_$J_)
                    {var _$K_=_$J_[2];
                     if(_$K_ && ! _$K_[2])
                      {var e2=_$K_[1],e1=_$J_[1],_$L_=0;
                       if(e_equal(_$L_,g_env,e1,e2))return progress(pr,id,pterm,0)}}}
                 break;
                case 1:
                 var _$M_=_$C_[1];
                 if(3654637 <= _$M_)
                  if(3903731 === _$M_)
                   {var _$N_=_$C_[2];
                    if(_$N_ && ! _$N_[2])
                     {var f=_$N_[1];
                      return caml_call2
                              (sprogress(pr,0,id),pterm,[0,[0,[0,[0,0,[0,f,0]],0],1],0])}}
                  else
                   if(95438486 === _$M_)
                    {var _$O_=_$C_[2];
                     if(_$O_)
                      {var _$P_=_$O_[2];
                       if(_$P_ && ! _$P_[2])
                        {var
                          f2=_$P_[1],
                          f1=_$O_[1],
                          _$Q_=0,
                          _$R_=[0,f_imp(f2,f1),_$Q_];
                         return progress(pr,id,pterm,[0,f_imp(f1,f2),_$R_])}}}
                   else
                    switch$0 = 1;
                 else
                  if(3257015 === _$M_)
                   {var _$S_=_$C_[2];
                    if(_$S_)
                     {var _$T_=_$S_[2];
                      if(_$T_ && ! _$T_[2])
                       {var f2$0=_$T_[1],f1$0=_$S_[1];
                        return progress(pr,id,pterm,[0,f1$0,[0,f2$0,0]])}}}
                  else
                   if(3654636 <= _$M_)
                    {var _$U_=_$C_[2];
                     if(_$U_)
                      {var _$V_=_$U_[2];
                       if(_$V_ && ! _$V_[2])
                        {var f2$1=_$V_[1],f1$1=_$U_[1];
                         return caml_call2
                                 (sprogress(pr,0,id),
                                  pterm,
                                  [0,[0,[0,[0,0,[0,f1$1,0]],0],f2$1],0])}}}
                   else
                    switch$0 = 1;
                 break;
                default:
                 if(840561112 === _$C_[1])
                  {var
                    body$0=_$C_[4],
                    xty$0=_$C_[3],
                    x$0=_$C_[2],
                    _$W_=[0,pr,id],
                    _$X_=
                     function(param)
                      {var id=param[2],pr=param[1];
                       return progress(pr,id,pterm,[0,body$0,0])},
                    _$Y_=[0,x$0,xty$0,0],
                    _$Z_=function(_$1_){return add_local(_$Y_,_$1_)};
                   return function(_$0_){return then_tac(_$Z_,_$X_,_$0_)}(_$W_)}}}
          else
           switch$0 = 1;
          if(switch$0 && ! variant[2])
           {var switch$2=0;
            if(typeof _$C_ === "number" || ! (1 === _$C_[0]))
             switch$2 = 1;
            else
             if(17731 === _$C_[1])
              {var fl=flatten_disjunctions(_$C_),g=nth(fl,_$D_);
               return progress(pr,id,pterm,[0,g,0])}}
          throw TacticNotApplicable},
       OrDrop=[248,_s1_,caml_fresh_oo_id(0)],
       or_drop=
        function(h,param,hl)
         {var id=param[2],pr=param[1],gl=byid$1(pr,id),_$A_=gl[2];
          byid$0(_$A_,h);
          var _$B_=gl[3];
          flatten_disjunctions(_$B_);
          return caml_call2(sprogress(pr,0,id),[0,OrDrop,id],hl)},
       AndDrop=[248,_s2_,caml_fresh_oo_id(0)],
       and_drop=
        function(h,param)
         {var
           id=param[2],
           pr=param[1],
           gl=byid$1(pr,id),
           _$w_=gl[2],
           hy=byid$0(_$w_,h)[3],
           _$x_=gl[3],
           gll=flatten_conjunctions(_$x_),
           _$y_=gl[1],
           _$z_=remove_form(_$y_,hy,gll),
           ng=f_ands(_$z_);
          return caml_call2
                  (sprogress(pr,0,id),[0,AndDrop,id],[0,[0,_s3_,ng],0])},
       TElim=[248,_s4_,caml_fresh_oo_id(0)],
       core_elim=
        function(h,param)
         {var
           id=param[2],
           pr=param[1],
           result=[0,0],
           gl=byid$1(pr,id),
           __M_=gl[2],
           hyp=byid$0(__M_,h)[3],
           __N_=gl[3],
           __O_=gl[1],
           __P_=0;
          if(caml_call1(f_equal(__P_,__O_,hyp),__N_))
           result[1] = [0,[0,[0,TElim,id],_s5_],0];
          else
           {var
             match=prune_premisses_fa(hyp),
             s=match[3],
             hy=match[2],
             pre=match[1],
             __Q_=[0,[0,hy,gl[3]],0],
             __R_=gl[1],
             match$0=caml_call1(f_unify(__R_,empty$8,s),__Q_);
            if(match$0)
             {var s$0=match$0[1];
              if(is_complete(s$0))
               {var
                 __S_=
                  function(param)
                   {var x=param[2],i=param[1];
                    return [0,[0,[0,[0,h],0],0],f_iter(s$0,i,x)]},
                 pres=map$4(__S_,pre);
                result[1] = [0,[0,[0,TElim,id],[0,83,pres]],result[1]]}}
            var
             __T_=
              function(param){var f=param[2];return [0,[0,[0,[0,h],0],0],f]},
             subs=map$4(__T_,pre),
             switch$0=0;
            if(typeof hy === "number")
             if(0 === hy)
              {var __U_=result[1],__V_=[0,[0,[0,[0,[0,h],0],0],gl[3]],0];
               result[1] = [0,[0,[0,TElim,id],[0,83,append(subs,__V_)]],__U_];
               switch$0 = 1}
             else
              {result[1] = [0,[0,[0,TElim,id],[0,83,subs]],result[1]];
               switch$0 = 1}
            else
             switch(hy[0])
              {case 1:
                var __0_=hy[1],switch$1=0;
                if(3257016 <= __0_)
                 if(3903731 === __0_)
                  {var __1_=hy[2];
                   if(__1_ && ! __1_[2])
                    {var
                      f=__1_[1],
                      __2_=result[1],
                      __3_=[0,[0,[0,[0,[0,h],0],0],f],0];
                     result[1]
                     =
                     [0,[0,[0,TElim,id],[0,83,append(subs,__3_)]],__2_]}
                   else
                    switch$1 = 1}
                 else
                  if(95438486 === __0_)
                   {var __4_=hy[2];
                    if(__4_)
                     {var __5_=__4_[2];
                      if(__5_ && ! __5_[2])
                       {var
                         f2=__5_[1],
                         f1=__4_[1],
                         __6_=result[1],
                         __7_=0,
                         __8_=gl[3],
                         __9_=0,
                         ____=0,
                         __$_=[0,f_imp(f2,f1),____],
                         _$a_=
                          [0,[0,[0,[0,[0,h],[0,f_imp(f1,f2),__$_]],__9_],__8_],__7_];
                        result[1]
                        =
                        [0,[0,[0,TElim,id],[0,83,append(subs,_$a_)]],__6_]}
                      else
                       switch$1 = 1}
                    else
                     switch$1 = 1}
                  else
                   switch$1 = 1;
                else
                 if(17731 === __0_)
                  {var _$b_=hy[2];
                   if(_$b_)
                    {var _$c_=_$b_[2];
                     if(_$c_ && ! _$c_[2])
                      {var
                        f2$0=_$c_[1],
                        f1$0=_$b_[1],
                        _$d_=result[1],
                        _$e_=
                         [0,
                          [0,[0,[0,[0,h],[0,f1$0,0]],0],gl[3]],
                          [0,[0,[0,[0,[0,h],[0,f2$0,0]],0],gl[3]],0]];
                       result[1]
                       =
                       [0,[0,[0,TElim,id],[0,83,append(subs,_$e_)]],_$d_]}
                     else
                      switch$1 = 1}
                   else
                    switch$1 = 1}
                 else
                  if(3257015 <= __0_)
                   {var _$f_=hy[2];
                    if(_$f_)
                     {var _$g_=_$f_[2];
                      if(_$g_ && ! _$g_[2])
                       {var
                         f2$1=_$g_[1],
                         f1$1=_$f_[1],
                         _$h_=result[1],
                         _$i_=[0,[0,[0,[0,[0,h],[0,f1$1,[0,f2$1,0]]],0],gl[3]],0];
                        result[1]
                        =
                        [0,[0,[0,TElim,id],[0,83,append(subs,_$i_)]],_$h_]}
                      else
                       switch$1 = 1}
                    else
                     switch$1 = 1}
                  else
                   switch$1 = 1;
                if(! switch$1)switch$0 = 1;
                break;
               case 2:
                if(172470935 === hy[1])
                 {var
                   f$0=hy[4],
                   ty=hy[3],
                   x=hy[2],
                   _$j_=[0,pr,id],
                   _$k_=
                    function(param)
                     {var
                       id=param[2],
                       pr=param[1],
                       goal=byid$1(pr,id),
                       _$s_=goal[2],
                       g_hyps=remove$4(_$s_,h),
                       _$t_=0,
                       _$u_=0,
                       _$v_=mk_hyp(_$u_,_$t_,f$0),
                       g_hyps$0=add$11(g_hyps,h,_$v_),
                       goal$0=[0,goal[1],g_hyps$0,goal[3]];
                      result[1]
                      =
                      [0,[0,[0,TElim,id],[0,88,[0,goal$0,0]]],result[1]];
                      return pr},
                   _$l_=[0,x,ty,0],
                   _$m_=function(_$r_){return add_local(_$l_,_$r_)},
                   _$n_=function(_$q_){return then_tac(_$m_,_$k_,_$q_)};
                  _$n_(_$j_);
                  switch$0 = 1}
                break
               }
            var
             __W_=gl[3],
             match$1=prune_premisses_ex(__W_),
             s$1=match$1[3],
             goal=match$1[2],
             match$2=prune_premisses(hyp),
             hy$0=match$2[2],
             pre$0=match$2[1],
             __X_=function(x){return [0,[0,[0,[0,h],0],0],x]},
             pre$1=map$4(__X_,pre$0),
             __Y_=[0,[0,hy$0,goal],0],
             __Z_=gl[1],
             match$3=caml_call1(f_unify(__Z_,empty$8,s$1),__Y_);
            if(match$3)
             {var s$2=match$3[1];
              if(is_complete(s$2))
               result[1] = [0,[0,[0,TElim,id],[0,83,pre$1]],result[1]]}
            else
             {var switch$2=0;
              if
               (typeof goal
                !==
                "number"
                &&
                1
                ===
                goal[0]
                &&
                17731
                ===
                goal[1])
               {var
                 gll=flatten_disjunctions(goal),
                 aux=
                  function(param)
                   {var param$0=param;
                    for(;;)
                     {if(param$0)
                       {var
                         l=param$0[2],
                         g=param$0[1],
                         _$o_=[0,[0,hyp,g],0],
                         _$p_=gl[1],
                         match=caml_call1(f_unify(_$p_,empty$8,s$1),_$o_);
                        if(match){var s=match[1];if(is_complete(s))return 1}
                        var param$0=l;
                        continue}
                      return 0}};
                if(aux(gll))result[1] = [0,[0,[0,TElim,id],_s6_],result[1]];
                switch$2 = 1}}}
          return result[1]},
       perform=
        function(clear,l,pr,id)
         {if(l)
           {var __I_=l[1],__J_=__I_[2];
            if(typeof __J_ !== "number")
             {var __K_=__J_[1],__L_=__I_[1];
              if(83 === __K_)
               {var l$0=__J_[2];
                return caml_call2(sprogress(pr,clear,id),__L_,l$0)}
              if(88 === __K_)
               {var l$1=__J_[2];return xprogress(pr,id,__L_,l$1)}}}
          throw TacticNotApplicable},
       arg$0=
        function(clear,h,param)
         {var id=param[2],pr=param[1],__H_=[0,pr,id];
          return perform(clear,core_elim(h,__H_),pr,id)},
       TInd=[248,_s7_,caml_fresh_oo_id(0)],
       induction=
        function(h,param)
         {var
           id=param[2],
           pr=param[1],
           init=byid$1(pr,id),
           env=init[1],
           __n_=toint(h),
           __o_=byid(env,__n_),
           match=get$3(__o_),
           x=match[1],
           n=x[1],
           __p_=init[3],
           __q_=init[2],
           __r_=[0,x,[0,nat,[0,zero$3]]],
           base_case=[0,modify$1(env,__r_),__q_,__p_],
           __s_=0,
           __t_=[0,n],
           n$0=fresh$0(env,__t_,__s_),
           __u_=init[3],
           __v_=init[3],
           __w_=[0,[0,n$0,0]],
           indh=f_apply1(x,__w_,__v_),
           __x_=0,
           __y_=0,
           __z_=mk_hyp(__y_,__x_,indh),
           __A_=0,
           __B_=fresh$2(__A_),
           __C_=init[2],
           __D_=add$11(__C_,__B_,__z_),
           __E_=[0,n$0,[0,nat,0]],
           env$0=push$4(env,__E_),
           __F_=[0,[0,n$0,0]],
           __G_=[0,x,[0,nat,[0,succ$3(__F_)]]],
           ind_case=[0,modify$1(env$0,__G_),__D_,__u_];
          return xprogress(pr,id,TInd,[0,base_case,[0,ind_case,0]])},
       ivariants=
        function(param)
         {var id=param[2],pr=param[1],__l_=byid$1(pr,id)[3];
          if(typeof __l_ === "number")
           {if(0 === __l_)return _s8_}
          else
           switch(__l_[0])
            {case 0:if(! caml_string_notequal(__l_[1],_s9_))return _s__;break;
             case 1:
              var __m_=__l_[1];
              if(3257015 === __m_)return _s$_;
              if(3903731 <= __m_)return 95438486 <= __m_?_ta_:_tb_;
              if(3654636 <= __m_)return _tc_;
              var fl=flatten_disjunctions(__l_);
              return mapi(function(i,param){return cat(_td_,to_string(i))},fl);
             default:return 840561112 <= __l_[1]?_te_:_tf_}
          return 0},
       TForward=[248,_tg_,caml_fresh_oo_id(0)],
       core_forward=
        function(param,_ZZ_)
         {var
           id=_ZZ_[2],
           pr=_ZZ_[1],
           s=param[4],
           p=param[3],
           hdst=param[2],
           hsrc=param[1],
           gl=byid$1(pr,id),
           _Z0_=gl[2];
          byid$0(_Z0_,hsrc);
          var _Z1_=gl[2],dst=byid$0(_Z1_,hdst)[3];
          function build_dest(param)
           {var param$0=param;
            for(;;)
             {var _Z3_=param$0[1],switch$0=0;
              if(typeof _Z3_ === "number")
               switch$0 = 1;
              else
               switch(_Z3_[0])
                {case 0:switch$0 = 1;break;
                 case 1:
                  if(3654636 === _Z3_[1])
                   {var _Z4_=_Z3_[2];
                    if(_Z4_)
                     {var _Z5_=_Z4_[2];
                      if(_Z5_ && ! _Z5_[2])
                       {var _Z6_=param$0[2];
                        if(_Z6_)
                         {var _Z7_=_Z6_[1],_Z8_=_Z5_[1],_Z9_=_Z4_[1];
                          if(0 === _Z7_)
                           {var s=param$0[3];return f_apply(oflist(s),_Z8_)}
                          if(1 === _Z7_)
                           {var
                             s$0=param$0[3],
                             p=_Z6_[2],
                             _Z__=0,
                             _Z$_=[0,_Z8_,p,s$0],
                             __a_=[0,build_dest(_Z$_),_Z__],
                             __b_=oflist(s$0);
                            return [1,3654636,[0,f_apply(__b_,_Z9_),__a_]]}}}}}
                  break;
                 default:
                  if(840561112 === _Z3_[1])
                   {var __c_=param$0[2];
                    if(__c_ && 0 === __c_[1])
                     {var __d_=param$0[3];
                      if(__d_)
                       {var
                         __e_=__d_[1][2],
                         __f_=__c_[2],
                         __g_=_Z3_[4],
                         __i_=_Z3_[2],
                         __h_=_Z3_[3];
                        if(__e_)
                         {var
                           s$1=__d_[2],
                           e=__e_[1],
                           __j_=[0,__i_,0],
                           param$1=[0,f_apply1(__j_,e,__g_),__f_,s$1],
                           param$0=param$1;
                          continue}
                        var s$2=__d_[2],__k_=[0,__g_,__f_,s$2];
                        return [2,840561112,__i_,__h_,build_dest(__k_)]}}}}
              return failwith(_th_)}}
          var _Z2_=[0,dst,p,s],nf=build_dest(_Z2_);
          return [0,
                  [0,
                   [0,TForward,hsrc,hdst],
                   [0,83,[0,[0,[0,[0,[0,hdst],[0,nf,0]],0],gl[3]],0]]],
                  0]},
       forward=
        function(param,_ZW_)
         {var
           id=_ZW_[2],
           pr=_ZW_[1],
           s=param[4],
           p=param[3],
           hdst=param[2],
           hsrc=param[1],
           _ZX_=[0,pr,id],
           _ZY_=[0,hsrc,hdst,p,aslist(s)];
          return perform(0,core_forward(_ZY_,_ZX_),pr,id)},
       TCut=[248,_ti_,caml_fresh_oo_id(0)],
       cut=
        function(form,param)
         {var hd=param[2],proof=param[1],goal=byid$1(proof,hd),_ZT_=goal[1];
          recheck(_ZT_,form);
          var
           subs=[0,[0,0,form],0],
           _ZU_=[0,[0,[0,[0,0,[0,form,0]],0],goal[3]],0],
           _ZV_=append(subs,_ZU_);
          return caml_call2(sprogress(proof,0,hd),[0,TCut,form,hd],_ZV_)},
       TAssume=[248,_tj_,caml_fresh_oo_id(0)],
       assume=
        function(form,param)
         {var hd=param[2],proof=param[1],goal=byid$1(proof,hd),_ZR_=goal[1];
          recheck(_ZR_,form);
          var _ZS_=[0,[0,[0,[0,0,[0,form,0]],0],goal[3]],0];
          return caml_call2(sprogress(proof,0,hd),[0,TAssume,form,hd],_ZS_)},
       TGeneralize=[248,_tk_,caml_fresh_oo_id(0)],
       generalize=
        function(hid,param)
         {var
           id=param[2],
           proof=param[1],
           goal=byid$1(proof,id),
           _ZM_=goal[2],
           hyp=byid$0(_ZM_,hid)[3],
           _ZN_=0,
           _ZO_=[1,3654636,[0,hyp,[0,goal[3],0]]],
           _ZP_=goal[2],
           _ZQ_=remove$4(_ZP_,hid);
          return xprogress
                  (proof,
                   id,
                   [0,TGeneralize,hid],
                   [0,[0,goal[1],_ZQ_,_ZO_],_ZN_])},
       TMove=[248,_tl_,caml_fresh_oo_id(0)],
       move$0=
        function(from,before,param)
         {var id=param[2],proof=param[1],goal=byid$1(proof,id),_ZI_=goal[2];
          function _ZJ_(_ZL_){return byid$0(_ZI_,_ZL_)}
          map$3(_ZJ_,before);
          var _ZK_=goal[2],hyps=move(_ZK_,from,before);
          return xprogress
                  (proof,
                   id,
                   [0,TMove,from,before],
                   [0,[0,goal[1],hyps,goal[3]],0])},
       TDuplicate=[248,_tm_,caml_fresh_oo_id(0)],
       duplicate=
        function(hd,param)
         {var
           id=param[2],
           proof=param[1],
           goal=byid$1(proof,id),
           _ZH_=goal[2],
           form=byid$0(_ZH_,hd)[3],
           subgoal=[0,[0,[0,[0,hd],[0,form,0]],0],goal[3]];
          return caml_call2
                  (sprogress(proof,0,id),[0,TDuplicate,hd],[0,subgoal,0])},
       close_with_unit=
        function(targ)
         {var g_id=targ[2],proof=targ[1],goal=byid$1(proof,g_id);
          if(0 === goal[3])return intro(0,targ);
          var _ZA_=goal[2],_ZB_=to_list$1(_ZA_);
          function _ZC_(param)
           {var match=param[2],f=match[3],hd=param[1];
            if(1 === f){var _ZG_=0;return [0,arg$0(_ZG_,hd,targ)]}
            return 0}
          var _ZD_=find_map_opt(_ZC_),_ZE_=caml_call1(_ZD_,_ZB_);
          return function(_ZF_){return default$0(proof,_ZF_)}(_ZE_)},
       form_of_item=
        function(param)
         {if(typeof param !== "number")
           {var _Zz_=param[1],switch$0=0;
            if(67 === _Zz_)
             {var f=param[2];switch$0 = 1}
            else
             if(72 === _Zz_){var f=param[2][2][3];switch$0 = 1}
            if(switch$0)return f}
          throw [0,Invalid_argument,_tn_]},
       expr_of_item=
        function(opt,param)
         {if(opt)var sth=opt[1],where=sth;else var where=737453762;
          if(typeof param !== "number" && 86 === param[1])
           {var _Zy_=param[2],match=_Zy_[2],b=match[2],x=_Zy_[1];
            return 803493184 <= where
                    ?[0,x]
                    :get_exn(b,[0,Invalid_argument,_tp_])}
          throw [0,Invalid_argument,_to_]},
       term_of_item=
        function(where,it)
         {try
           {var _Zv_=[0,70,form_of_item(it)];return _Zv_}
          catch(_Zw_)
           {_Zw_ = caml_wrap_exception(_Zw_);
            if(_Zw_[1] === Invalid_argument)
             try
              {var _Zu_=[0,69,expr_of_item(where,it)];return _Zu_}
             catch(_Zx_)
              {_Zx_ = caml_wrap_exception(_Zx_);
               if(_Zx_[1] === Invalid_argument)
                throw [0,Invalid_argument,_tq_];
               throw _Zx_}
            throw _Zw_}},
       InvalidPath=[248,_tr_,caml_fresh_oo_id(0)],
       InvalidSubFormPath=[248,_ts_,caml_fresh_oo_id(0)],
       InvalidSubExprPath=[248,_tt_,caml_fresh_oo_id(0)],
       direct_subterm=
        function(t,i)
         {try
           {var _Zr_=direct_subterms(t),_Zs_=nth(_Zr_,i);return _Zs_}
          catch(_Zt_)
           {_Zt_ = caml_wrap_exception(_Zt_);
            if(_Zt_[1] === Invalid_argument)
             {if(70 <= t[1])
               {var switch$0=0,_Zq_=t[2];
                if(typeof _Zq_ !== "number" && 0 === _Zq_[0])switch$0 = 1;
                if(! switch$0)throw [0,InvalidSubFormPath,[0,i,0]]}
              throw [0,InvalidSubExprPath,[0,i,0]]}
            throw _Zt_}},
       subterm=
        function(t,p)
         {try
           {var _Zo_=fold(direct_subterm,t,p);return _Zo_}
          catch(_Zp_)
           {_Zp_ = caml_wrap_exception(_Zp_);
            if(_Zp_[1] === InvalidSubFormPath)throw [0,InvalidSubFormPath,p];
            if(_Zp_[1] === InvalidSubExprPath)throw [0,InvalidSubExprPath,p];
            throw _Zp_}},
       modify_direct_subterm=
        function(f,t,i)
         {try
           {var
             _Zi_=direct_subterms(t),
             _Zj_=modify_at(i,f,_Zi_),
             _Zk_=function(_Zn_){return modify_direct_subterms(t,_Zn_)},
             _Zl_=_Zk_(_Zj_);
            return _Zl_}
          catch(_Zm_)
           {_Zm_ = caml_wrap_exception(_Zm_);
            if(_Zm_[1] === Invalid_argument)
             {if(70 <= t[1])
               {var switch$0=0,_Zh_=t[2];
                if(typeof _Zh_ !== "number" && 0 === _Zh_[0])switch$0 = 1;
                if(! switch$0)throw [0,InvalidSubFormPath,[0,i,0]]}
              throw [0,InvalidSubExprPath,[0,i,0]]}
            throw _Zm_}},
       modify_subterm=
        function(f,acc,a,t,p)
         {function aux(a,t,param)
           {if(param)
             {var
               p=param[2],
               i=param[1],
               _Zf_=direct_subterm(t,i),
               _Zg_=caml_call3(acc,i,t,a),
               subt=aux(_Zg_,_Zf_,p);
              return modify_direct_subterm(function(param){return subt},t,i)}
            return caml_call2(f,a,t)}
          return aux(a,t,p)},
       rewrite_subterm_all=
        function(env,red,res)
         {var _Y8_=[0,red,res];
          function _Y9_(param,t,_Zd_)
           {var res=_Zd_[2],red=_Zd_[1],_Ze_=shift_under(t,res);
            return [0,shift_under(t,red),_Ze_]}
          function _Y__(param)
           {var res=param[2],red=param[1],_Zb_=0;
            return function(_Zc_){return rewrite(_Zb_,env,red,res,_Zc_)}}
          return function(_Y$_,_Za_)
           {return modify_subterm(_Y__,_Y9_,_Y8_,_Y$_,_Za_)}},
       rewrite_subterm=
        function(res)
         {function _Y4_(param,t,res){return shift_under(t,res)}
          function _Y5_(res,param){return res}
          return function(_Y6_,_Y7_)
           {return modify_subterm(_Y5_,_Y4_,res,_Y6_,_Y7_)}},
       subexpr=
        function(t,p)
         {var match=subterm(t,p);
          if(typeof match !== "number" && 69 === match[1])
           {var e=match[2];return e}
          throw [0,InvalidSubExprPath,p]},
       rebuild_pathd=
        function(l,i)
         {if((i + 1 | 0) === l)return _tu_;
          function aux(i)
           {if(0 === i)return 0;var _Y3_=i - 1 | 0;return [0,0,aux(_Y3_)]}
          if(0 === i)return aux(l - 1 | 0);
          var _Y2_=(l - i | 0) - 1 | 0;
          return append(aux(_Y2_),_tv_)},
       mk_ipath=
        function(opt,_Y1_,root)
         {if(opt)var sth=opt[1],ctxt=sth;else var ctxt=_tw_;
          if(_Y1_)var sth$0=_Y1_[1],sub=sth$0;else var sub=0;
          return [0,root,ctxt,sub]},
       _tx_=0,
       _ty_=0,
       _tz_=0,
       dummy_path=mk_ipath(_tz_,_ty_,_tx_),
       concl_ipath=
        function(param){var g_id=param[1];return mk_ipath(0,0,toint(g_id))},
       all_hyps_ipaths=
        function(param)
         {var
           g_pregoal=param[2],
           g_id=param[1],
           _YV_=g_pregoal[2],
           _YW_=ids(_YV_);
          function _YX_(hd)
           {var _YZ_=toint(g_id),_Y0_=0;
            return mk_ipath([0,[0,3607583,toint(hd)]],_Y0_,_YZ_)}
          return function(_YY_){return map$4(_YX_,_YY_)}(_YW_)},
       all_vars_ipaths=
        function(opt,param)
         {if(opt)var sth=opt[1],heads=sth;else var heads=1;
          var
           g_pregoal=param[2],
           g_id=param[1],
           env=g_pregoal[1],
           _YG_=env[6],
           _YH_=codomain(_YG_);
          function _YI_(hd)
           {var match=byid(env,hd),switch$0=0;
            if(match && match[1][2][2])
             {var
               _YK_=0,
               _YL_=toint(g_id),
               _YM_=0,
               _YN_=[0,[0,_tA_,hd]],
               _YO_=[0,mk_ipath(_YN_,_YM_,_YL_),_YK_],
               _YP_=_YO_;
              switch$0 = 1}
            if(! switch$0)var _YP_=0;
            if(heads)
             var
              _YQ_=0,
              _YR_=toint(g_id),
              _YS_=0,
              _YT_=[0,[0,_tB_,hd]],
              _YU_=[0,mk_ipath(_YT_,_YS_,_YR_),_YQ_];
            else
             var _YU_=0;
            return append(_YU_,_YP_)}
          return function(_YJ_){return concat_map(_YI_,_YJ_)}(_YH_)},
       all_items_ipaths=
        function(heads,goal)
         {var _YE_=all_vars_ipaths(heads,goal),_YF_=all_hyps_ipaths(goal);
          return append([0,concl_ipath(goal),_YF_],_YE_)},
       _tD_=function(m,param){var b=param[2],a=param[1];return add$8(a,b,m)},
       pkind_codes=fold(_tD_,empty$6,_tC_),
       string_of_pkind=
        function(_YD_){return symbol$4(find$4,pkind_codes,_YD_)},
       _tE_=inverse(pkind_codes),
       pkind_of_string=function(_YC_){return symbol$4(find$4,_tE_,_YC_)},
       p2p=
        function(p)
         {var _Yu_=[0,function(fmt,param){return caml_call1(pp$0(fmt),_tF_)}];
          function pp_sub(_YA_,_YB_){return list(_Yu_,pp,_YA_,_YB_)}
          var
           _Yv_=p[3],
           _Yw_=p[2][2],
           _Yx_=p[2][1],
           _Yy_=string_of_pkind(_Yx_),
           _Yz_=p[1];
          return caml_call5(asprintf(_tG_),_Yz_,_Yy_,_Yw_,pp_sub,_Yv_)},
       ipath_of_path=
        function(p)
         {try
           {var
             _Yl_=
              function(x1,x2,x3,x4)
               {return [0,x1,[0,pkind_of_string(x2),x3],x4]},
             match=caml_call1(sscanf(p,_tH_),_Yl_)}
          catch(_Yt_)
           {_Yt_ = caml_wrap_exception(_Yt_);
            if
             (_Yt_[1]
              !==
              Scan_failure
              &&
              _Yt_
              !==
              Not_found
              &&
              _Yt_
              !==
              End_of_file)
             throw _Yt_;
            throw [0,Invalid_argument,p]}
          var
           sub=match[3],
           ctxt=match[2],
           handle=ctxt[2],
           root=match[1],
           _Ym_=root < 0?1:0,
           _Yn_=_Ym_ || (handle < 0?1:0);
          if(_Yn_)throw [0,InvalidPath,p];
          if(caml_string_equal(sub,_tI_))
           var sub$0=0;
          else
           var _Yq_=47,sub$0=split_on_char(_Yq_,sub);
          try
           {var
             _Yo_=function(_Ys_){return caml_int_of_string(_Ys_)},
             sub$1=map$4(_Yo_,sub$0)}
          catch(_Yr_)
           {_Yr_ = caml_wrap_exception(_Yr_);
            if(_Yr_[1] === Failure)throw [0,InvalidPath,p];
            throw _Yr_}
          function _Yp_(x){return x < 0?1:0}
          if(exists(_Yp_,sub$1))throw [0,InvalidPath,p];
          return [0,root,ctxt,sub$1]},
       of_ipath=
        function(proof,p)
         {var exn=[0,InvalidPath,p2p(p)],sub=p[3],ctxt=p[2],root=p[1];
          try
           {var _X$_=ofint(root),goal=byid$1(proof,_X$_)}
          catch(_Yk_)
           {_Yk_ = caml_wrap_exception(_Yk_);
            if(_Yk_[1] === InvalidGoalId)throw exn;
            throw _Yk_}
          var _Ya_=ctxt[1],_Yb_=ctxt[2];
          if(typeof _Ya_ === "number")
           if(3607583 <= _Ya_)
            {try
              {var
                rp=ofint(_Yb_),
                _Yc_=goal[2],
                hyd=byid$0(_Yc_,rp),
                hf=hyd[3],
                _Yd_=[0,70,hf],
                _Ye_=[0,72,[0,rp,hyd]]}
             catch(_Yj_)
              {_Yj_ = caml_wrap_exception(_Yj_);
               if(_Yj_[1] === InvalidHyphId)throw exn;
               throw _Yj_}
             var t_item=_Yd_,item=_Ye_}
           else
            {if(0 !== _Yb_)throw exn;
             var f=goal[3],_Yf_=[0,70,f],_Yg_=[0,67,f],t_item=_Yf_,item=_Yg_}
          else
           var
            part=_Ya_[2],
            _Yh_=goal[1],
            _Yi_=byid(_Yh_,_Yb_),
            def=get_exn(_Yi_,exn),
            match=def[2],
            body=match[2],
            x=def[1],
            expr=803493184 <= part?[0,x]:get_exn(body,exn),
            t_item$0=[0,69,expr],
            item$0=[0,86,def],
            t_item=t_item$0,
            item=item$0;
          var target=subterm(t_item,sub),goal$0=[0,ofint(root),goal];
          return [0,goal$0,item,[0,sub,target]]},
       goal_of_ipath=
        function(proof,p){var match=of_ipath(proof,p),g=match[1];return g},
       term_of_ipath=
        function(proof,p){var match=of_ipath(proof,p)[3],t=match[2];return t},
       env_of_ipath=
        function(proof,p)
         {var
           _X7_=of_ipath(proof,p),
           match=_X7_[3],
           sub=match[1],
           item=_X7_[2],
           goal=_X7_[1],
           env=goal[2][1],
           _X8_=item[1];
          if(72 === _X8_)
           var f=item[2][2][3];
          else
           {if(86 <= _X8_)return env;var f=item[2]}
          function aux(env,t,sub)
           {var env$0=env,t$0=t,sub$0=sub;
            for(;;)
             {if(sub$0)
               {var sub$1=sub$0[2],i=sub$0[1];
                if(70 <= t$0[1])
                 {var _X9_=t$0[2];
                  if(typeof _X9_ !== "number" && 2 === _X9_[0] && 0 === i)
                   {var
                     f=_X9_[4],
                     ty=_X9_[3],
                     x=_X9_[2],
                     t$2=[0,70,f],
                     _X__=[0,x,[0,ty,0]],
                     env$1=push$4(env$0,_X__),
                     env$0=env$1,
                     t$0=t$2,
                     sub$0=sub$1;
                    continue}
                  var t$1=direct_subterm(t$0,i),t$0=t$1,sub$0=sub$1;
                  continue}
                return env$0}
              return env$0}}
          return aux(env,[0,70,f],sub)},
       is_sub_path=
        function(p,sp)
         {var _XX_=p[1] === sp[1]?1:0;
          if(_XX_)
           {var _XY_=p[2][2] === sp[2][2]?1:0;
            if(_XY_)
             {var _XZ_=sp[2][1],_X0_=p[2][1],_X1_=caml_equal(_X0_,_XZ_);
              if(_X1_)
               var _X2_=_X1_;
              else
               {var _X4_=p[2][1],_X5_=caml_equal(_X4_,_tJ_);
                if(_X5_)
                 var _X6_=sp[2][1],_X2_=caml_equal(_X6_,_tK_);
                else
                 var _X2_=_X5_}
              if(_X2_)return is_prefix(sp[3],p[3]);
              var _X3_=_X2_}
            else
             var _X3_=_XY_}
          else
           var _X3_=_XX_;
          return _X3_},
       TRewriteAt=[248,_tL_,caml_fresh_oo_id(0)],
       rewrite_at=
        function(t,p)
         {return function(param)
           {var
             proof=param[1],
             _XK_=of_ipath(proof,p),
             sub=_XK_[3][1],
             item=_XK_[2],
             match=_XK_[1],
             goal=match[2],
             g_id=match[1],
             pnode=[0,TRewriteAt,t,p],
             _XL_=item[1];
            if(72 === _XL_)
             {var
               _XM_=item[2],
               match$0=_XM_[2],
               f=match$0[3],
               hd=_XM_[1],
               _XN_=[0,70,f],
               _XO_=caml_call2(rewrite_subterm(t),_XN_,sub),
               new_hyp=form_of_term(_XO_),
               subgoal=[0,[0,[0,[0,hd],[0,new_hyp,0]],0],goal[3]];
              return caml_call2
                      (sprogress(proof,_tM_,g_id),pnode,[0,subgoal,0])}
            if(86 <= _XL_)
             {var
               _XP_=item[2],
               match$1=_XP_[2],
               body=match$1[2],
               ty=match$1[1],
               x=_XP_[1],
               _XQ_=p[2][1];
              if(typeof _XQ_ !== "number" && 4298439 === _XQ_[1])
               {if(803493184 <= _XQ_[2])return failwith(_tO_);
                if(body)
                 {var
                   b=body[1],
                   _XR_=[0,69,b],
                   _XS_=caml_call2(rewrite_subterm(t),_XR_,sub),
                   new_body=expr_of_term(_XS_),
                   _XT_=[0,x,[0,ty,[0,new_body]]],
                   _XU_=goal[1],
                   g_env=modify$1(_XU_,_XT_);
                  return xprogress
                          (proof,g_id,pnode,[0,[0,g_env,goal[2],goal[3]],0])}
                return failwith(_tP_)}
              throw [0,Assert_failure,_tN_]}
            var
             f$0=item[2],
             _XV_=[0,70,f$0],
             _XW_=caml_call2(rewrite_subterm(t),_XV_,sub),
             new_concl=form_of_term(_XW_);
            return progress(proof,g_id,pnode,[0,new_concl,0])}},
       TRewrite=[248,_tQ_,caml_fresh_oo_id(0)],
       rewrite$0=
        function(red,res,tgt,param)
         {var
           hd=param[2],
           proof=param[1],
           _Xm_=tgt[3],
           _Xn_=tgt[2],
           tgt$0=[0,toint(hd),_Xn_,_Xm_],
           _Xo_=of_ipath(proof,tgt$0),
           match=_Xo_[3],
           sub=match[1],
           it=_Xo_[2],
           goal=byid$1(proof,hd),
           pnode=[0,TRewrite,red,res,tgt$0],
           _Xp_=it[1];
          if(72 === _Xp_)
           {var
             _Xq_=it[2],
             match$0=_Xq_[2],
             f=match$0[3],
             src=_Xq_[1],
             _Xr_=[0,70,f],
             _Xs_=[0,69,res],
             _Xt_=[0,69,red],
             _Xu_=goal[1],
             _Xv_=caml_call2(rewrite_subterm_all(_Xu_,_Xt_,_Xs_),_Xr_,sub),
             new_hyp=form_of_term(_Xv_),
             subgoal=[0,[0,[0,[0,src],[0,new_hyp,0]],0],goal[3]];
            return caml_call2(sprogress(proof,_tR_,hd),pnode,[0,subgoal,0])}
          if(86 <= _Xp_)
           {var
             _Xw_=it[2],
             match$1=_Xw_[2],
             b=match$1[2],
             ty=match$1[1],
             x=_Xw_[1],
             _Xx_=tgt$0[2][1];
            if(typeof _Xx_ !== "number" && 4298439 === _Xx_[1])
             {if(803493184 <= _Xx_[2])return failwith(_tT_);
              if(b)
               {var
                 b$0=b[1],
                 _Xy_=[0,69,b$0],
                 _Xz_=[0,69,res],
                 _XA_=[0,69,red],
                 _XB_=goal[1],
                 _XC_=caml_call2(rewrite_subterm_all(_XB_,_XA_,_Xz_),_Xy_,sub),
                 new_body=expr_of_term(_XC_),
                 _XD_=[0,x,[0,ty,[0,new_body]]],
                 _XE_=goal[1],
                 g_env=modify$1(_XE_,_XD_);
                return xprogress
                        (proof,hd,pnode,[0,[0,g_env,goal[2],goal[3]],0])}
              return failwith(_tU_)}
            throw [0,Assert_failure,_tS_]}
          var
           f$0=it[2],
           _XF_=[0,70,f$0],
           _XG_=[0,69,res],
           _XH_=[0,69,red],
           _XI_=goal[1],
           _XJ_=caml_call2(rewrite_subterm_all(_XI_,_XH_,_XG_),_XF_,sub),
           new_concl=form_of_term(_XJ_);
          return progress(proof,hd,pnode,[0,new_concl,0])},
       rewrite_in=
        function(red,res,tgts)
         {return fold
                  (function(tac,tgt)
                    {function _Xj_(_Xl_){return rewrite$0(red,res,tgt,_Xl_)}
                     return function(_Xk_){return then_tac(_Xj_,tac,_Xk_)}},
                   id_tac,
                   tgts)},
       unfold=
        function(opt,x)
         {if(opt)var sth=opt[1],fold=sth;else var fold=0;
          return function(tgts,param)
           {var
             hd=param[2],
             proof=param[1],
             goal=byid$1(proof,hd),
             _Xb_=goal[1],
             _Xc_=get$9(_Xb_,x);
            function _Xd_(_Xi_)
             {return symbol$4(get_exn,TacticNotApplicable,_Xi_)}
            var _Xe_=_Xd_(_Xc_)[2];
            function _Xf_(_Xh_)
             {return symbol$4(get_exn,TacticNotApplicable,_Xh_)}
            var body=_Xf_(_Xe_);
            if(fold)
             var _Xg_=[0,x],res=_Xg_,red=body;
            else
             var red$0=[0,x],res=body,red=red$0;
            return caml_call1(rewrite_in(red,res,tgts),[0,proof,hd])}},
       unfold_all=
        function(fold,x,targ)
         {var
           hd=targ[2],
           proof=targ[1],
           goal=[0,hd,byid$1(proof,hd)],
           _W7_=goal[2][1],
           _W8_=getid(_W7_,x),
           id=get$3(_W8_),
           _W9_=all_items_ipaths(_tV_,goal);
          function _W__(p){return p[2][2] === id?1:0}
          function _W$_(_Xa_){return remove_if(_W__,_Xa_)}
          var tgts=_W$_(_W9_);
          return caml_call2(unfold(fold,x),tgts,targ)},
       opp=
        function(param)
         {switch(param){case 0:return 1;case 1:return 0;default:return 2}},
       direct_subform_pol=
        function(param,i)
         {var f=param[2],p=param[1];
          if(typeof f !== "number")
           switch(f[0])
            {case 1:
              var fs=f[2],c=f[1],switch$0=0;
              if(3654636 === c || 3903731 === c)
               switch$0 = 1;
              else
               if(95438486 === c)var subp=2;else switch$0 = 2;
              var switch$1=0;
              switch(switch$0)
               {case 1:if(0 === i)var subp=opp(p);else switch$1 = 1;break;
                case 2:switch$1 = 1;break
                }
              if(switch$1)var subp=p;
              try
               {var subf=nth(fs,i)}
              catch(_W6_)
               {_W6_ = caml_wrap_exception(_W6_);
                if(_W6_[1] === Invalid_argument)
                 throw [0,InvalidSubFormPath,[0,i,0]];
                throw _W6_}
              return [0,subp,subf];
             case 2:var subf$0=f[4];return [0,p,subf$0]
             }
          throw [0,InvalidSubFormPath,[0,i,0]]},
       direct_subterm_pol=
        function(param,i)
         {var t=param[2],p=param[1],match=direct_subterm(t,i);
          if
           (typeof t
            !==
            "number"
            &&
            70
            ===
            t[1]
            &&
            typeof match
            !==
            "number"
            &&
            70
            ===
            match[1])
           {var
             f=t[2],
             _W5_=[0,p,f],
             match$0=direct_subform_pol(_W5_,i),
             f$0=match$0[2],
             p$0=match$0[1];
            return [0,p$0,[0,70,f$0]]}
          return [0,p,match]},
       subform_pol=
        function(param,sub)
         {var f=param[2],p=param[1];
          try
           {var _W2_=[0,p,f],_W3_=fold(direct_subform_pol,_W2_,sub);
            return _W3_}
          catch(_W4_)
           {_W4_ = caml_wrap_exception(_W4_);
            if(_W4_[1] === InvalidSubFormPath)
             throw [0,InvalidSubFormPath,sub];
            throw _W4_}},
       neg_count=
        function(f,sub)
         {function aux(param,_WW_)
           {var param$0=param,_WX_=_WW_;
            for(;;)
             {var _WY_=param$0[2],_WZ_=param$0[1];
              if(_WX_)
               {var sub=_WX_[2],i=_WX_[1];
                if(typeof _WY_ !== "number")
                 switch(_WY_[0])
                  {case 1:
                    var fs=_WY_[2],c=_WY_[1],switch$0=0;
                    if(3654636 !== c && 3903731 !== c)switch$0 = 1;
                    var switch$1=0;
                    if(! switch$0 && 0 === i){var n=_WZ_ + 1 | 0;switch$1 = 1}
                    if(! switch$1)var n=_WZ_;
                    try
                     {var subf=nth(fs,i)}
                    catch(_W1_)
                     {_W1_ = caml_wrap_exception(_W1_);
                      if(_W1_[1] === Invalid_argument)
                       throw [0,InvalidSubFormPath,sub];
                      throw _W1_;
                      var _W0_=_W1_}
                    var param$1=[0,n,subf],param$0=param$1,_WX_=sub;
                    continue;
                   case 2:
                    var
                     subf$0=_WY_[4],
                     param$2=[0,_WZ_,subf$0],
                     param$0=param$2,
                     _WX_=sub;
                    continue
                   }
                return _WZ_}
              return _WZ_}}
          return aux([0,0,f],sub)},
       pol_of_item=
        function(param){var _WV_=param[1];return 72 === _WV_?1:86 <= _WV_?1:0},
       pol_of_ipath=
        function(proof,p)
         {var
           _WR_=of_ipath(proof,p),
           match=_WR_[3],
           sub=match[1],
           item=_WR_[2],
           _WS_=item[1];
          if(72 === _WS_)
           var match$0=item[2][2],f=match$0[3],pol=1,form=f,pol$0=pol;
          else
           {if(86 <= _WS_)throw [0,InvalidSubFormPath,sub];
            var f$0=item[2],_WU_=0,form=f$0,pol$0=_WU_}
          var _WT_=[0,pol$0,form];
          return subform_pol(_WT_,sub)[1]},
       instantiate=
        function(wit,tgt,targ)
         {var proof=targ[1],match=term_of_ipath(proof,tgt);
          if(typeof match !== "number" && 70 === match[1])
           {var _WH_=match[2];
            if(typeof _WH_ !== "number" && 2 === _WH_[0])
             {var f=_WH_[4],x=_WH_[2];
              if(3607583 === tgt[2][1])
               var
                _WI_=tgt[2][2],
                _WJ_=ofint(_WI_),
                first=function(_WQ_){return duplicate(_WJ_,_WQ_)};
              else
               var first=id_tac;
              var
               _WK_=
                function(param)
                 {var
                   id=param[2],
                   pr=param[1],
                   _WM_=tgt[3],
                   _WN_=tgt[2],
                   tgt$0=[0,toint(id),_WN_,_WM_],
                   _WO_=[0,pr,id],
                   _WP_=[0,x,0];
                  return caml_call1
                          (rewrite_at([0,70,f_apply1(_WP_,wit,f)],tgt$0),_WO_)};
              return function(_WL_){return then_tac(first,_WK_,_WL_)}(targ)}}
          throw TacticNotApplicable},
       print_choice=
        function(param)
         {var witness=param[2],side=param[1],side$0=0 === side?_tW_:_t0_;
          function _WD_(e)
           {var _WG_=e_tostring(e);return caml_call1(sprintf(_tY_),_WG_)}
          function _WE_(_WF_){return map_default(_WD_,_tX_,_WF_)}
          var witness$0=_WE_(witness);
          return caml_call2(sprintf(_tZ_),side$0,witness$0)},
       print_itrace=to_string$8(_t3_,_t2_,_t1_,print_choice),
       TLink=[248,_t4_,caml_fresh_oo_id(0)],
       elim_units=
        function(f)
         {var f$0=f;
          for(;;)
           {var switch$0=0;
            if(typeof f$0 === "number")
             switch$0 = 2;
            else
             switch(f$0[0])
              {case 1:
                var _Wb_=f$0[1],switch$1=0;
                if(3257015 === _Wb_)
                 {var _Wc_=f$0[2];
                  if(_Wc_)
                   {var _Wd_=_Wc_[1],_We_=_Wc_[2];
                    if(_We_)
                     {var _Wf_=_We_[1],switch$2=0;
                      if(typeof _Wf_ === "number" && _Wf_)
                       if(_We_[2])
                        switch$2 = 1;
                       else
                        {switch$0 = 1;switch$1 = 2;switch$2 = 1}
                      if(! switch$2)
                       {var switch$3=0;
                        if(typeof _Wd_ === "number" && _Wd_)
                         if(_Wc_[2][2])
                          switch$3 = 1;
                         else
                          {switch$0 = 1;switch$1 = 2;switch$3 = 1}
                        if(! switch$3)
                         {var _Wg_=_Wc_[2];
                          if(typeof _Wg_[1] === "number")
                           {if(! _Wg_[2]){var f$2=_Wd_;switch$1 = 1}}
                          else
                           if(typeof _Wd_ === "number")
                            {var _Wh_=_Wc_[2];
                             if(! _Wh_[2]){var f$2=_Wh_[1];switch$1 = 1}}}}}}}
                else
                 if(3903731 <= _Wb_)
                  if(95438486 <= _Wb_)
                   {var _Wi_=f$0[2];
                    if(_Wi_)
                     {var _Wj_=_Wi_[1],switch$4=0;
                      if(typeof _Wj_ === "number" && ! _Wj_)
                       {var _Wm_=_Wi_[2];
                        if(_Wm_ && ! _Wm_[2]){var f$2=_Wm_[1];switch$1 = 1}}
                      else
                       switch$4 = 1;
                      if(switch$4)
                       {var _Wk_=_Wi_[2];
                        if(_Wk_)
                         {var _Wl_=_Wk_[1];
                          if(typeof _Wl_ === "number" && ! _Wl_ && ! _Wk_[2])
                           {var f$2=_Wj_;switch$1 = 1}}}}}
                  else
                   {var _Wn_=f$0[2];
                    if(_Wn_)
                     {var _Wo_=_Wn_[1];
                      if(typeof _Wo_ === "number")
                       if(_Wo_)
                        {if(! _Wn_[2])switch$1 = 2}
                       else
                        if(! _Wn_[2]){switch$0 = 1;switch$1 = 2}}}
                 else
                  if(3654636 <= _Wb_)
                   {var _Wp_=f$0[2];
                    if(_Wp_)
                     {var _Wq_=_Wp_[1],_Wr_=_Wp_[2];
                      if(_Wr_)
                       {var _Ws_=_Wr_[1],switch$5=0;
                        if(typeof _Ws_ === "number" && ! _Ws_)
                         {if(! _Wr_[2])switch$1 = 2}
                        else
                         switch$5 = 1;
                        if(switch$5 && typeof _Wq_ === "number")
                         if(_Wq_)
                          {if(! _Wp_[2][2])switch$1 = 2}
                         else
                          {var _Wt_=_Wp_[2];
                           if(! _Wt_[2]){var f$2=_Wt_[1];switch$1 = 1}}}}}
                  else
                   {var _Wu_=f$0[2];
                    if(_Wu_)
                     {var _Wv_=_Wu_[1],_Ww_=_Wu_[2];
                      if(_Ww_)
                       {var _Wx_=_Ww_[1],switch$6=0;
                        if(typeof _Wx_ === "number" && ! _Wx_)
                         {if(! _Ww_[2])switch$1 = 2}
                        else
                         switch$6 = 1;
                        if(switch$6)
                         {var switch$7=0;
                          if(typeof _Wv_ === "number" && ! _Wv_)
                           {if(! _Wu_[2][2])switch$1 = 2}
                          else
                           switch$7 = 1;
                          if(switch$7)
                           {var _Wy_=_Wu_[2];
                            if(typeof _Wy_[1] === "number")
                             {if(! _Wy_[2]){var f$2=_Wv_;switch$1 = 1}}
                            else
                             if(typeof _Wv_ === "number")
                              {var _Wz_=_Wu_[2];
                               if(! _Wz_[2]){var f$2=_Wz_[1];switch$1 = 1}}}}}}}
                switch(switch$1)
                 {case 2:break;
                  case 0:
                   var fs=f$0[2],fs$0=map$4(elim_units,fs);
                   if(caml_equal(fs,fs$0))return f$0;
                   var f$1=[1,_Wb_,fs$0],f$0=f$1;
                   continue;
                  default:var f$0=f$2;continue}
                break;
               case 2:
                var _WA_=f$0[1],switch$8=0;
                if(840561112 <= _WA_)
                 {var _WB_=f$0[4];
                  if(typeof _WB_ === "number" && ! _WB_)switch$8 = 1}
                else
                 {var _WC_=f$0[4];
                  if(typeof _WC_ === "number" && _WC_)
                   {switch$0 = 1;switch$8 = 1}}
                if(! switch$8)
                 {var f1=f$0[4],ty=f$0[3],x=f$0[2],f1$0=elim_units(f1);
                  if(caml_equal(f1,f1$0))return f$0;
                  var f$3=[2,_WA_,x,ty,f1$0],f$0=f$3;
                  continue}
                break;
               default:switch$0 = 2}
            switch(switch$0)
             {case 1:return f_false;case 0:return f_true;default:return f$0}}},
       print_linkage=
        function(mode,param)
         {var
           r=param[2][1],
           match=param[1],
           l=match[1],
           op=857475493 <= mode?_t5_:_t7_,
           _V$_=f_tostring(r),
           _Wa_=f_tostring(l);
          return caml_call3(sprintf(_t6_),_Wa_,op,_V$_)},
       dlink=
        function(param,_RU_,_RT_)
         {var
           g_id=_RT_[2],
           proof=_RT_[1],
           s_dst=_RU_[2],
           s_src=_RU_[1],
           dst=param[2],
           src=param[1],
           _RV_=of_ipath(proof,src),
           _RW_=_RV_[3],
           t_src=_RW_[2],
           sub_src=_RW_[1],
           item_src=_RV_[2],
           match=_RV_[1],
           goal=match[2],
           _RX_=of_ipath(proof,dst),
           match$0=_RX_[3],
           t_dst=match$0[2],
           sub_dst=match$0[1],
           item_dst=_RX_[2],
           switch$0=0;
          if(70 <= t_src[1])
           {if(typeof t_dst !== "number" && 69 === t_dst[1])switch$0 = 1}
          else
           if(typeof t_dst !== "number" && 70 === t_dst[1])switch$0 = 1;
          if(switch$0)throw TacticNotApplicable;
          function well_scoped(ctx,e)
           {var _V6_=e_vars(e);
            function _V7_(x)
             {var _V9_=fc_is_bound(x,ctx);
              if(_V9_)return _V9_;
              var _V__=caml_call1(fc_exit(x),ctx);
              return exists$4(goal[1],_V__)}
            return function(_V8_){return for_all(_V7_,_V8_)}(_V6_)}
          function instantiable(lenv,ctx,s,x)
           {var
             lenv$0=enter(lenv,x),
             _V4_=[0,x,get_index(lenv$0,x)],
             match=get_tag(_V4_,s);
            if(match)
             {var _V5_=match[1];
              if(_V5_){var e=_V5_[1];return well_scoped(ctx,e)}
              return 1}
            return 0}
          function invertible(kind,f)
           {if(847852583 === kind)
             {if(typeof f !== "number")
               switch(f[0])
                {case 1:var c=f[1];return 17731 === c?1:0;
                 case 2:if(172470935 === f[1])return 1;break
                 }
              return 0}
            if(857475493 <= kind)
             {if(typeof f !== "number")
               switch(f[0])
                {case 1:return 0;case 2:if(172470935 === f[1])return 1;break}
              return 0}
            if(typeof f !== "number")
             switch(f[0])
              {case 1:
                var c$0=f[1];
                if(3654636 !== c$0 && 3903731 !== c$0 && 95438486 !== c$0)
                 return 0;
                return 1;
               case 2:if(840561112 === f[1])return 1;break
               }
            return 0}
          function no_prio(kind,param)
           {var sub=param[2],f=param[1],inv=invertible(kind,f),_V3_=1 - inv;
            return _V3_?_V3_:is_empty$2(sub)}
          function backward(ctx,itrace,s,linkage)
           {var
             c=linkage[2],
             rsub=c[2],
             r=c[1],
             h=linkage[1],
             lsub=h[2],
             l=h[1],
             es2=s[2],
             s2=es2[2],
             env2=es2[1],
             es1=s[1],
             s1=es1[2],
             env1=es1[1],
             _TR_=13277187,
             _TS_=print_linkage(_TR_,linkage);
            js_log(_TS_);
            var _TT_=linkage[1],_TU_=_TT_[1];
            if(_TT_[2])
             {var switch$0=0;
              if(typeof _TU_ === "number" || ! (0 === _TU_[0]))
               switch$0 = 1;
              else
               if(! caml_string_notequal(_TU_[1],_ut_))
                {var _VC_=_TU_[2];
                 if(_VC_)
                  {var _VD_=_VC_[2];
                   if(_VD_ && ! _VD_[2])
                    {var _VE_=_TT_[2];
                     if(! _VE_[2])
                      {var
                        i$4=_VE_[1],
                        e2=_VD_[1],
                        e1=_VC_[1],
                        e1$0=0 === i$4?e1:e2,
                        _VF_=[0,70,r],
                        _VG_=subexpr(_VF_,rsub),
                        _VH_=goal[1],
                        _VI_=0;
                       if(e_equal(_VI_,_VH_,_VG_,e1$0))
                        {var
                          res=0 === i$4?e2:e1,
                          _VJ_=[0,70,r],
                          _VK_=[0,69,res],
                          _VL_=caml_call2(rewrite_subterm(_VK_),_VJ_,rsub),
                          f=form_of_term(_VL_),
                          _VM_=rev(ctx);
                         return [0,fc_fill(f,_VM_),itrace]}}}}}}
            else
             if(! linkage[2][2])
              {var _VN_=goal[1],_VO_=0;
               if(caml_call1(f_equal(_VO_,_VN_,l),r))
                var f$0=f_true;
               else
                {var switch$1=0;
                 if
                  (typeof l
                   !==
                   "number"
                   &&
                   0
                   ===
                   l[0]
                   &&
                   typeof r
                   !==
                   "number"
                   &&
                   0
                   ===
                   r[0])
                  {var ts2=r[2],c2=r[1],ts1=l[2],c1=l[1];
                   if(caml_string_equal(c1,c2))
                    {var
                      _VQ_=
                       function(f,t1,t2){return f_and(f,[0,_uu_,[0,t1,[0,t2,0]]])},
                      _VR_=fold_left2(_VQ_,f_true,ts1,ts2),
                      f$0=_VR_;
                     switch$1 = 1}}
                 if(! switch$1)var f$0=f_imp(l,r)}
               var _VP_=rev(ctx);
               return [0,fc_fill(f$0,_VP_),itrace]}
            var
             switch_pol=[0,0],
             s$0=[0,s],
             _TV_=linkage[1],
             _TW_=linkage[2],
             _TX_=_TW_[1],
             switch$2=0;
            if(typeof _TX_ === "number")
             switch$2 = 2;
            else
             switch(_TX_[0])
              {case 0:switch$2 = 2;break;
               case 1:
                var _UN_=_TX_[1];
                if(3257015 === _UN_)
                 {var _UO_=_TW_[2];
                  if(_UO_)
                   {var sub$6=_UO_[2],i$2=_UO_[1],fs$3=_TX_[2],_UP_=847852583;
                    if(no_prio(_UP_,h))
                     {try
                       {var
                         switch$3=0,
                         match$1=pop_at(i$2,fs$3),
                         fs$4=match$1[2],
                         fi$0=match$1[1],
                         _UU_=[0,h,[0,fi$0,sub$6]],
                         _UV_=[0,[0,3257015,fs$4,i$2]]}
                      catch(_V1_)
                       {_V1_ = caml_wrap_exception(_V1_);
                        if(_V1_ !== Not_found)throw _V1_;
                        var
                         _UQ_=failwith(_uh_),
                         _UR_=_UQ_[3],
                         _US_=_UQ_[2],
                         _UT_=_UQ_[1],
                         linkage$0=_UR_,
                         choice=_US_,
                         ictx=_UT_;
                        switch$2 = 1;
                        switch$3 = 1}
                      if(! switch$3)
                       {var linkage$0=_UU_,choice=_ui_,ictx=_UV_;switch$2 = 1}}}}
                else
                 if(3903731 <= _UN_)
                  if(95438486 <= _UN_)
                   {var _UW_=_TX_[2];
                    if(_UW_)
                     {var _UX_=_UW_[2];
                      if(_UX_ && ! _UX_[2])
                       {var
                         _UY_=failwith(_uj_),
                         _UZ_=_UY_[3],
                         _U0_=_UY_[2],
                         _U1_=_UY_[1],
                         linkage$0=_UZ_,
                         choice=_U0_,
                         ictx=_U1_;
                        switch$2 = 1}}}
                  else
                   {var _U2_=_TX_[2];
                    if(_U2_ && ! _U2_[2])
                     {var _U3_=_TW_[2];
                      if(_U3_ && 0 === _U3_[1])
                       {var sub$7=_U3_[2],f1$3=_U2_[1];
                        switch_pol[1] = 1;
                        var
                         _U4_=[0,h,[0,f1$3,sub$7]],
                         linkage$0=_U4_,
                         choice=_uk_,
                         ictx=_ul_;
                        switch$2 = 1}}}
                 else
                  if(3654636 <= _UN_)
                   {var _U5_=_TX_[2];
                    if(_U5_)
                     {var _U6_=_U5_[2];
                      if(_U6_ && ! _U6_[2])
                       {var _U7_=_TW_[2];
                        if(_U7_)
                         {var _U8_=_U7_[1],_U9_=_U6_[1],_U__=_U5_[1];
                          if(0 === _U8_)
                           {var sub$8=_U7_[2];
                            switch_pol[1] = 1;
                            var
                             _U$_=[0,h,[0,_U__,sub$8]],
                             _Va_=[0,[0,3654636,[0,_U9_,0],0]],
                             linkage$0=_U$_,
                             choice=_um_,
                             ictx=_Va_;
                            switch$2 = 1}
                          else
                           if(1 === _U8_)
                            {var
                              sub$9=_U7_[2],
                              _Vb_=[0,h,[0,_U9_,sub$9]],
                              _Vc_=[0,[0,3654636,[0,_U__,0],1]],
                              linkage$0=_Vb_,
                              choice=_un_,
                              ictx=_Vc_;
                             switch$2 = 1}}}}}
                  else
                   {var _Vd_=_TW_[2];
                    if(_Vd_)
                     {var sub$10=_Vd_[2],i$3=_Vd_[1],fs$5=_TX_[2],_Ve_=847852583;
                      if(no_prio(_Ve_,h))
                       {try
                         {var
                           switch$4=0,
                           match$2=pop_at(i$3,fs$5),
                           fs$6=match$2[2],
                           fi$1=match$2[1],
                           _Vj_=[0,h,[0,fi$1,sub$10]],
                           _Vk_=[0,[0,17731,fs$6,i$3]];
                          switch$4 = 1}
                        catch(_V2_)
                         {_V2_ = caml_wrap_exception(_V2_);
                          if(_V2_ !== Not_found)throw _V2_;
                          var
                           _Vf_=failwith(_uo_),
                           _Vg_=_Vf_[3],
                           _Vh_=_Vf_[2],
                           _Vi_=_Vf_[1],
                           linkage$0=_Vg_,
                           choice=_Vh_,
                           ictx=_Vi_;
                          switch$2 = 1}
                        if(switch$4)
                         {var linkage$0=_Vj_,choice=_up_,ictx=_Vk_;switch$2 = 1}}}}
                break;
               default:
                if(840561112 <= _TX_[1])
                 {var _Vl_=_TW_[2];
                  if(_Vl_ && 0 === _Vl_[1])
                   {var sub$11=_Vl_[2],f1$4=_TX_[4],ty$1=_TX_[3],x$1=_TX_[2];
                    s$0[1] = [0,es1,[0,enter(env2,x$1),s2]];
                    var
                     _Vm_=[0,x$1,0],
                     _Vn_=0,
                     h$0=[0,f_shift(_Vn_,_Vm_,l),lsub],
                     _Vo_=[0,h$0,[0,f1$4,sub$11]],
                     _Vp_=[0,[1,840561112,x$1,ty$1]],
                     linkage$0=_Vo_,
                     choice=_uq_,
                     ictx=_Vp_;
                    switch$2 = 1}}
                else
                 {var _Vq_=_TW_[2];
                  if(_Vq_ && 0 === _Vq_[1])
                   {var
                     sub$12=_Vq_[2],
                     f1$5=_TX_[4],
                     ty$2=_TX_[3],
                     x$2=_TX_[2],
                     _Vr_=847852583,
                     switch$5=0;
                    if(no_prio(_Vr_,h) && instantiable(env2,ctx,s2,x$2))
                     {var env2$0=enter(env2,x$2);
                      s$0[1] = [0,es1,[0,env2$0,s2]];
                      var
                       _Vs_=[0,x$2,get_index(env2$0,x$2)],
                       match$3=get_tag(_Vs_,s2);
                      if(! match$3)throw [0,Assert_failure,_us_];
                      var _Vt_=match$3[1];
                      if(_Vt_)
                       {var
                         e$0=_Vt_[1],
                         _Vu_=[0,x$2,0],
                         f1$6=f_apply1(_Vu_,e$0,f1$5),
                         _Vv_=[0,h,[0,f1$6,sub$12]],
                         _Vw_=[0,1,[0,e$0]],
                         _Vx_=0,
                         linkage$0=_Vv_,
                         choice=_Vw_,
                         ictx=_Vx_;
                        switch$2 = 1}
                      else
                       {s$0[1] = [0,es1,[0,env2$0,s2]];
                        var
                         _Vy_=[0,x$2,0],
                         _Vz_=0,
                         h$1=[0,f_shift(_Vz_,_Vy_,l),lsub],
                         _VA_=[0,h$1,[0,f1$5,sub$12]],
                         _VB_=[0,[1,172470935,x$2,ty$2]],
                         linkage$0=_VA_,
                         choice=_ur_,
                         ictx=_VB_;
                        switch$2 = 1}}
                    else
                     switch$5 = 1}}}
            var switch$6=0;
            switch(switch$2)
             {case 2:switch$6 = 1;break;case 0:switch$6 = 1;break}
            if(switch$6)
             {var _TY_=_TV_[1],switch$7=0;
              if(typeof _TY_ === "number")
               switch$7 = 2;
              else
               switch(_TY_[0])
                {case 0:switch$7 = 2;break;
                 case 1:
                  var _TZ_=_TY_[1];
                  if(3257016 <= _TZ_)
                   {if(3654636 === _TZ_)
                     {var _T0_=_TY_[2];
                      if(_T0_)
                       {var _T1_=_T0_[2];
                        if(_T1_ && ! _T1_[2])
                         {var _T2_=_TV_[2];
                          if(_T2_ && 1 === _T2_[1])
                           {var sub=_T2_[2],f2=_T1_[1],f1=_T0_[1],_T3_=-57574468;
                            if(no_prio(_T3_,c))
                             {var
                               _T4_=[0,[0,f2,sub],c],
                               _T5_=[0,[0,3257015,[0,f1,0],1]],
                               linkage$0=_T4_,
                               choice=_t8_,
                               ictx=_T5_;
                              switch$7 = 1}}}}}
                    else
                     if(95438486 === _TZ_)
                      {var _T6_=_TY_[2];
                       if(_T6_)
                        {var _T7_=_T6_[2];
                         if(_T7_ && ! _T7_[2])
                          {var _T8_=_TV_[2];
                           if(_T8_)
                            {var _T9_=_T8_[1],_T__=_T7_[1],_T$_=_T6_[1];
                             if(0 === _T9_)
                              {var sub$0=_T8_[2],_Ua_=-57574468;
                               if(no_prio(_Ua_,c))
                                {var
                                  _Ub_=[0,[0,_T$_,sub$0],c],
                                  _Uc_=[0,[0,3257015,[0,_T__,0],0]],
                                  linkage$0=_Ub_,
                                  choice=_t__,
                                  ictx=_Uc_;
                                 switch$7 = 1}}
                             else
                              if(1 === _T9_)
                               {var sub$1=_T8_[2],_Ud_=-57574468;
                                if(no_prio(_Ud_,c))
                                 {var
                                   _Ue_=[0,[0,_T__,sub$1],c],
                                   _Uf_=[0,[0,3257015,[0,_T$_,0],1]],
                                   linkage$0=_Ue_,
                                   choice=_t$_,
                                   ictx=_Uf_;
                                  switch$7 = 1}}}}}}}
                  else
                   if(17731 === _TZ_)
                    {var _Ug_=_TV_[2];
                     if(_Ug_)
                      {var sub$2=_Ug_[2],i$0=_Ug_[1],fs=_TY_[2];
                       try
                        {var
                          switch$8=0,
                          match=pop_at(i$0,fs),
                          fs$0=match[2],
                          fi=match[1],
                          _Ul_=function(fj){return f_imp(fj,r)},
                          fs$1=map$4(_Ul_,fs$0),
                          _Um_=[0,[0,fi,sub$2],c],
                          _Un_=[0,[0,3257015,fs$1,i$0]]}
                       catch(_VZ_)
                        {_VZ_ = caml_wrap_exception(_VZ_);
                         if(_VZ_ !== Not_found)throw _VZ_;
                         var
                          _Uh_=failwith(_ua_),
                          _Ui_=_Uh_[3],
                          _Uj_=_Uh_[2],
                          _Uk_=_Uh_[1],
                          linkage$0=_Ui_,
                          choice=_Uj_,
                          ictx=_Uk_;
                         switch$7 = 1;
                         switch$8 = 1}
                       if(! switch$8)
                        {var linkage$0=_Um_,choice=_ub_,ictx=_Un_;switch$7 = 1}}}
                   else
                    if(3257015 <= _TZ_)
                     {var _Uo_=_TV_[2];
                      if(_Uo_)
                       {var sub$3=_Uo_[2],i$1=_Uo_[1],fs$2=_TY_[2],_Up_=-57574468;
                        if(no_prio(_Up_,c))
                         {try
                           {var switch$9=0,_Uu_=[0,[0,nth(fs$2,i$1),sub$3],c],_Uv_=0;
                            switch$9 = 1}
                          catch(_V0_)
                           {_V0_ = caml_wrap_exception(_V0_);
                            if(_V0_[1] !== Invalid_argument)throw _V0_;
                            var
                             _Uq_=failwith(_uc_),
                             _Ur_=_Uq_[3],
                             _Us_=_Uq_[2],
                             _Ut_=_Uq_[1],
                             linkage$0=_Ur_,
                             choice=_Us_,
                             ictx=_Ut_;
                            switch$7 = 1}
                          if(switch$9)
                           {var linkage$0=_Uu_,choice=_ud_,ictx=_Uv_;switch$7 = 1}}}}
                  break;
                 default:
                  if(840561112 <= _TY_[1])
                   {var _Uw_=_TV_[2];
                    if(_Uw_ && 0 === _Uw_[1])
                     {var
                       sub$4=_Uw_[2],
                       f1$0=_TY_[4],
                       ty=_TY_[3],
                       x=_TY_[2],
                       _Ux_=-57574468,
                       switch$10=0;
                      if(no_prio(_Ux_,c) && instantiable(env1,ctx,s1,x))
                       {var env1$0=enter(env1,x);
                        s$0[1] = [0,[0,env1$0,s1],es2];
                        var _Uy_=[0,x,get_index(env1$0,x)],match$0=get_tag(_Uy_,s1);
                        if(! match$0)throw [0,Assert_failure,_uf_];
                        var _Uz_=match$0[1];
                        if(_Uz_)
                         {var
                           e=_Uz_[1],
                           _UA_=[0,x,0],
                           f1$1=f_apply1(_UA_,e,f1$0),
                           _UB_=[0,[0,f1$1,sub$4],c],
                           _UC_=[0,0,[0,e]],
                           _UD_=0,
                           linkage$0=_UB_,
                           choice=_UC_,
                           ictx=_UD_;
                          switch$7 = 1}
                        else
                         {s$0[1] = [0,[0,env1$0,s1],es2];
                          var
                           _UE_=[0,x,0],
                           _UF_=0,
                           c$0=[0,f_shift(_UF_,_UE_,r),rsub],
                           _UG_=[0,[0,f1$0,sub$4],c$0],
                           _UH_=[0,[1,172470935,x,ty]],
                           linkage$0=_UG_,
                           choice=_ue_,
                           ictx=_UH_;
                          switch$7 = 1}}
                      else
                       switch$10 = 1}}
                  else
                   {var _UI_=_TV_[2];
                    if(_UI_ && 0 === _UI_[1])
                     {var sub$5=_UI_[2],f1$2=_TY_[4],ty$0=_TY_[3],x$0=_TY_[2];
                      s$0[1] = [0,[0,enter(env1,x$0),s1],es2];
                      var
                       _UJ_=[0,x$0,0],
                       _UK_=0,
                       c$1=[0,f_shift(_UK_,_UJ_,r),rsub],
                       _UL_=[0,[0,f1$2,sub$5],c$1],
                       _UM_=[0,[1,840561112,x$0,ty$0]],
                       linkage$0=_UL_,
                       choice=_ug_,
                       ictx=_UM_;
                      switch$7 = 1}}}
              var switch$11=0;
              switch(switch$7)
               {case 2:break;case 0:break;default:switch$11 = 1}
              if(! switch$11)throw TacticNotApplicable}
            var
             cont=
              switch_pol[1]
               ?function(_VS_)
                 {function _VT_(_VW_,_VX_,_VY_)
                   {return forward(_VS_,_VW_,_VX_,_VY_)}
                  return function(_VU_)
                   {return function(_VV_){return _VT_(_VU_,_t9_,_VV_)}}}
               :backward;
            if(ictx)var i=ictx[1],ctx$0=[0,i,ctx];else var ctx$0=ctx;
            return caml_call4(cont,ctx$0,[0,choice,itrace],s$0[1],linkage$0)}
          function forward(ctx,itrace,opt,s)
           {if(opt)var sth=opt[1],side=sth;else var side=1;
            var es2=s[2],s2=es2[2],env2=es2[1],es1=s[1];
            return function(linkage)
             {var
               match=linkage[2],
               rsub=match[2],
               r=match[1],
               h=linkage[1],
               lsub=h[2],
               l=h[1],
               _Ss_=857475493,
               _St_=print_linkage(_Ss_,linkage);
              js_log(_St_);
              var _Su_=linkage[1],_Sv_=_Su_[1];
              if(_Su_[2])
               {var switch$0=0;
                if(typeof _Sv_ === "number" || ! (0 === _Sv_[0]))
                 switch$0 = 1;
                else
                 if(! caml_string_notequal(_Sv_[1],_uz_))
                  {var _Tu_=_Sv_[2];
                   if(_Tu_)
                    {var _Tv_=_Tu_[2];
                     if(_Tv_ && ! _Tv_[2])
                      {var _Tw_=_Su_[2];
                       if(! _Tw_[2])
                        {var
                          i$2=_Tw_[1],
                          e2=_Tv_[1],
                          e1=_Tu_[1],
                          e1$0=0 === i$2?e1:e2,
                          _Tx_=[0,70,r],
                          _Ty_=subexpr(_Tx_,rsub),
                          _Tz_=goal[1],
                          _TA_=0;
                         if(e_equal(_TA_,_Tz_,_Ty_,e1$0))
                          {var
                            res=0 === i$2?e2:e1,
                            _TB_=[0,70,r],
                            _TC_=[0,69,res],
                            _TD_=caml_call2(rewrite_subterm(_TC_),_TB_,rsub),
                            f=form_of_term(_TD_),
                            _TE_=rev(ctx);
                           return [0,fc_fill(f,_TE_),itrace]}}}}}}
              else
               if(! linkage[2][2])
                {var
                  _TF_=goal[1],
                  _TG_=0,
                  f$0=caml_call1(f_equal(_TG_,_TF_,l),r)?l:f_and(l,r),
                  _TH_=rev(ctx);
                 return [0,fc_fill(f$0,_TH_),itrace]}
              var
               switch_pol=[0,0],
               s$0=[0,s],
               new_side=[0,side],
               witness=[0,0],
               _Sx_=linkage[2],
               _Sy_=_Sx_[1],
               switch$1=0,
               _Sw_=linkage[1];
              if(typeof _Sy_ === "number")
               switch$1 = 2;
              else
               switch(_Sy_[0])
                {case 0:switch$1 = 2;break;
                 case 1:
                  var _SA_=_Sy_[1];
                  if(3257015 === _SA_)
                   {var _SB_=_Sx_[2];
                    if(_SB_)
                     {var sub=_SB_[2],i$0=_SB_[1],fs=_Sy_[2];
                      try
                       {var switch$2=0,_SF_=[0,h,[0,nth(fs,i$0),sub]],_SG_=0}
                      catch(_TP_)
                       {_TP_ = caml_wrap_exception(_TP_);
                        if(_TP_ !== Not_found)throw _TP_;
                        var
                         _SC_=failwith(_uv_),
                         _SD_=_SC_[2],
                         _SE_=_SC_[1],
                         linkage$1=_SD_,
                         ictx$0=_SE_;
                        switch$1 = 1;
                        switch$2 = 1}
                      if(! switch$2){var linkage$1=_SF_,ictx$0=_SG_;switch$1 = 1}}}
                  else
                   if(3903731 <= _SA_)
                    if(95438486 <= _SA_)
                     {var _SH_=_Sy_[2];
                      if(_SH_)
                       {var _SI_=_SH_[2];
                        if(_SI_ && ! _SI_[2])
                         {var _SJ_=_Sx_[2];
                          if(_SJ_)
                           {var _SK_=_SJ_[1],_SL_=_SI_[1],_SM_=_SH_[1];
                            if(0 === _SK_)
                             {var sub$0=_SJ_[2],_SN_=857475493;
                              if(no_prio(_SN_,h))
                               {switch_pol[1] = 1;
                                var
                                 _SO_=[0,h,[0,_SM_,sub$0]],
                                 _SP_=[0,[0,3654636,[0,_SL_,0],0]],
                                 linkage$1=_SO_,
                                 ictx$0=_SP_;
                                switch$1 = 1}}
                            else
                             if(1 === _SK_)
                              {var sub$1=_SJ_[2],_SQ_=857475493;
                               if(no_prio(_SQ_,h))
                                {switch_pol[1] = 1;
                                 var
                                  _SR_=[0,h,[0,_SL_,sub$1]],
                                  _SS_=[0,[0,3654636,[0,_SM_,0],0]],
                                  linkage$1=_SR_,
                                  ictx$0=_SS_;
                                 switch$1 = 1}}}}}}
                    else
                     {var _ST_=_Sy_[2];
                      if(_ST_ && ! _ST_[2])
                       {var _SU_=_Sx_[2];
                        if(_SU_ && 0 === _SU_[1])
                         {var sub$2=_SU_[2],f1=_ST_[1],_SV_=857475493;
                          if(no_prio(_SV_,h))
                           {switch_pol[1] = 1;
                            var _SW_=[0,h,[0,f1,sub$2]],linkage$1=_SW_,ictx$0=_uw_;
                            switch$1 = 1}}}}
                   else
                    if(3654636 <= _SA_)
                     {var _SX_=_Sy_[2];
                      if(_SX_)
                       {var _SY_=_SX_[2];
                        if(_SY_ && ! _SY_[2])
                         {var _SZ_=_Sx_[2];
                          if(_SZ_)
                           {var _S0_=_SZ_[1],_S1_=_SY_[1],_S2_=_SX_[1];
                            if(0 === _S0_)
                             {var sub$3=_SZ_[2],_S3_=857475493;
                              if(no_prio(_S3_,h))
                               {switch_pol[1] = 1;
                                var
                                 _S4_=[0,h,[0,_S2_,sub$3]],
                                 _S5_=[0,[0,3654636,[0,_S1_,0],0]],
                                 linkage$1=_S4_,
                                 ictx$0=_S5_;
                                switch$1 = 1}}
                            else
                             if(1 === _S0_)
                              {var sub$4=_SZ_[2],_S6_=857475493;
                               if(no_prio(_S6_,h))
                                {var
                                  _S7_=[0,h,[0,_S1_,sub$4]],
                                  _S8_=[0,[0,3654636,[0,_S2_,0],1]],
                                  linkage$1=_S7_,
                                  ictx$0=_S8_;
                                 switch$1 = 1}}}}}}
                    else
                     {var _S9_=_Sx_[2];
                      if(_S9_)
                       {var sub$5=_S9_[2],i$1=_S9_[1],fs$0=_Sy_[2],_S__=857475493;
                        if(no_prio(_S__,h))
                         {try
                           {var
                             switch$3=0,
                             match$0=pop_at(i$1,fs$0),
                             fs$1=match$0[2],
                             fi=match$0[1],
                             _Tc_=[0,h,[0,fi,sub$5]],
                             _Td_=[0,[0,17731,fs$1,i$1]];
                            switch$3 = 1}
                          catch(_TQ_)
                           {_TQ_ = caml_wrap_exception(_TQ_);
                            if(_TQ_ !== Not_found)throw _TQ_;
                            var
                             _S$_=failwith(_ux_),
                             _Ta_=_S$_[2],
                             _Tb_=_S$_[1],
                             linkage$1=_Ta_,
                             ictx$0=_Tb_;
                            switch$1 = 1}
                          if(switch$3){var linkage$1=_Tc_,ictx$0=_Td_;switch$1 = 1}}}}
                  break;
                 default:
                  if(840561112 <= _Sy_[1])
                   {var _Te_=_Sx_[2];
                    if(_Te_ && 0 === _Te_[1])
                     {var
                       sub$6=_Te_[2],
                       f1$0=_Sy_[4],
                       ty=_Sy_[3],
                       x=_Sy_[2],
                       _Tf_=857475493,
                       switch$4=0;
                      if(no_prio(_Tf_,h) && instantiable(env2,ctx,s2,x))
                       {var env2$0=enter(env2,x);
                        s$0[1] = [0,es1,[0,env2$0,s2]];
                        var _Tg_=[0,x,get_index(env2$0,x)],match$1=get_tag(_Tg_,s2);
                        if(! match$1)throw [0,Assert_failure,_uy_];
                        var _Th_=match$1[1];
                        if(_Th_)
                         {var e=_Th_[1],_Ti_=[0,x,0],f1$1=f_apply1(_Ti_,e,f1$0);
                          witness[1] = [0,e];
                          var
                           _Tj_=[0,h,[0,f1$1,sub$6]],
                           _Tk_=0,
                           linkage$1=_Tj_,
                           ictx$0=_Tk_;
                          switch$1 = 1}
                        else
                         {s$0[1] = [0,es1,[0,enter(env2$0,x),s2]];
                          var
                           _Tl_=[0,x,0],
                           _Tm_=0,
                           h$1=[0,f_shift(_Tm_,_Tl_,l),lsub],
                           _Tn_=[0,h$1,[0,f1$0,sub$6]],
                           _To_=[0,[1,840561112,x,ty]],
                           linkage$1=_Tn_,
                           ictx$0=_To_;
                          switch$1 = 1}}
                      else
                       switch$4 = 1}}
                  else
                   {var _Tp_=_Sx_[2];
                    if(_Tp_ && 0 === _Tp_[1])
                     {var sub$7=_Tp_[2],f1$2=_Sy_[4],ty$0=_Sy_[3],x$0=_Sy_[2];
                      s$0[1] = [0,es1,[0,enter(env2,x$0),s2]];
                      var
                       _Tq_=[0,x$0,0],
                       _Tr_=0,
                       h$2=[0,f_shift(_Tr_,_Tq_,l),lsub],
                       _Ts_=[0,h$2,[0,f1$2,sub$7]],
                       _Tt_=[0,[1,172470935,x$0,ty$0]],
                       linkage$1=_Ts_,
                       ictx$0=_Tt_;
                      switch$1 = 1}}}
              var switch$5=0;
              switch(switch$1){case 2:break;case 0:break;default:switch$5 = 1}
              if(! switch$5)
               {var h$0=linkage[2];
                s$0[1] = [0,es2,es1];
                new_side[1] = 0;
                var
                 linkage$0=[0,h$0,_Sw_],
                 ictx=0,
                 linkage$1=linkage$0,
                 ictx$0=ictx}
              if(switch_pol[1])
               var cont=backward;
              else
               var
                _Sz_=[0,new_side[1]],
                cont=
                 function(_TI_)
                  {function _TJ_(_TM_,_TN_,_TO_)
                    {return forward(_TI_,_TM_,_TN_,_TO_)}
                   return function(_TK_)
                    {return function(_TL_){return _TJ_(_TK_,_Sz_,_TL_)}}};
              if(ictx$0)var i=ictx$0[1],ctx$0=[0,i,ctx];else var ctx$0=ctx;
              var
               itrace$0=
                new_side[1] !== side
                 ?itrace
                 :[0,[0,new_side[1],witness[1]],itrace];
              return caml_call4(cont,ctx$0,itrace$0,s$0[1],linkage$1)}}
          if(typeof item_src !== "number")
           {var _RY_=item_src[1],switch$1=0;
            if(67 === _RY_)
             {if(typeof item_dst !== "number" && 72 === item_dst[1])
               {var
                 _RZ_=item_dst[2],
                 _R0_=_RZ_[2][3],
                 _R1_=_RZ_[1],
                 _R2_=item_src[2],
                 sc=s_src,
                 subc=sub_src,
                 c=_R2_,
                 sh=s_dst,
                 subh=sub_dst,
                 h=_R0_,
                 hid=_R1_;
                switch$1 = 1}}
            else
             if(72 === _RY_ && typeof item_dst !== "number")
              {var
                _Sa_=item_dst[1],
                _Sb_=item_src[2],
                _Sc_=_Sb_[2][3],
                _Sd_=_Sb_[1];
               if(67 === _Sa_)
                {var
                  _Se_=item_dst[2],
                  sc=s_dst,
                  subc=sub_dst,
                  c=_Se_,
                  sh=s_src,
                  subh=sub_src,
                  h=_Sc_,
                  hid=_Sd_;
                 switch$1 = 1}
               else
                if(72 === _Sa_)
                 {var
                   _Sf_=item_dst[2],
                   match$2=_Sf_[2],
                   h$0=match$2[3],
                   hid$0=_Sf_[1],
                   _Sg_=[0,[0,_Sc_,sub_src],[0,h$0,sub_dst]],
                   _Sh_=[0,[0,empty$8,s_src],[0,empty$8,s_dst]],
                   _Si_=0,
                   _Sj_=0,
                   _Sk_=0,
                   match$3=caml_call1(forward(_Sk_,_Sj_,_Si_,_Sh_),_Sg_),
                   itrace$2=match$3[2],
                   form$0=match$3[1],
                   _Sl_=0,
                   _Sm_=goal[3],
                   _Sn_=0,
                   _So_=0,
                   _Sp_=
                    [0,
                     [0,
                      [0,
                       [0,[0,_Sd_],0],
                       [0,[0,[0,hid$0],[0,elim_units(form$0),_So_]],_Sn_]],
                      _Sm_],
                     _Sl_],
                   itrace$0=itrace$2,
                   subgoal$0=_Sp_;
                  switch$1 = 2}}
            var switch$2=0;
            switch(switch$1)
             {case 0:break;
              case 1:
               var
                _R3_=[0,[0,h,subh],[0,c,subc]],
                _R4_=[0,[0,empty$8,sh],[0,empty$8,sc]],
                _R5_=0,
                _R6_=0,
                match$1=backward(_R6_,_R5_,_R4_,_R3_),
                itrace=match$1[2],
                form=match$1[1],
                _R7_=0,
                subgoal=[0,[0,[0,[0,[0,hid],0],0],elim_units(form)],_R7_],
                itrace$0=itrace,
                subgoal$0=subgoal;
               switch$2 = 1;
               break;
              default:switch$2 = 1}
            if(switch$2)
             {var
               itrace$1=rev(itrace$0),
               _R8_=caml_call1(print_itrace,itrace$1),
               _R9_=caml_call1(sprintf(_uA_),_R8_);
              js_log(_R9_);
              var
               _R__=[0,TLink,itrace$1],
               pr=caml_call2(sprogress(proof,_uB_,g_id),_R__,subgoal$0),
               _R$_=opened(pr);
              return fold
                      (function(_Sq_,_Sr_)
                        {return uncurry(close_with_unit,_Sq_,_Sr_)},
                       pr,
                       _R$_)}}
          throw TacticNotApplicable},
       remove_nothing=
        function(param)
         {var param$0=param;
          for(;;)
           {if(param$0)
             {var l=param$0[2],a=param$0[1];
              if(typeof a === "number")
               {if(481346541 === a){var param$0=l;continue}}
              else
               if(737457313 === a[1])
                {var
                  match=a[2],
                  a$0=match[2],
                  a$1=match[1],
                  _RQ_=[0,a$1,[0,a$0,0]],
                  match$0=remove_nothing(_RQ_);
                 if(match$0)
                  {var _RR_=match$0[2],_RS_=match$0[1];
                   if(_RR_)
                    {if(_RR_[2])throw [0,Assert_failure,_uC_];
                     var a$2=_RR_[1];
                     return [0,[0,737457313,[0,_RS_,a$2]],remove_nothing(l)]}
                   return [0,_RS_,remove_nothing(l)]}
                 var param$0=l;
                 continue}
              return [0,a,remove_nothing(l)]}
            return 0}},
       t_subs=
        function(t)
         {function aux(sub,param)
           {if(typeof param !== "number")
             {var _RC_=param[1],switch$0=0;
              if(69 === _RC_)
               {var _RD_=param[2];
                if(0 !== _RD_[0]){var es=_RD_[2];switch$0 = 1}}
              else
               if(70 === _RC_)
                {var _RG_=param[2];
                 if(typeof _RG_ !== "number")
                  switch(_RG_[0])
                   {case 0:var es=_RG_[2];switch$0 = 1;break;
                    case 1:
                     var
                      fs=_RG_[2],
                      _RH_=
                       function(i,f)
                        {var _RO_=[0,i,0],sub$0=append(sub,_RO_),_RP_=[0,70,f];
                         return [0,sub$0,aux(sub$0,_RP_)]},
                      _RI_=function(_RN_){return mapi(_RH_,_RN_)};
                     return flatten$0(_RI_(fs));
                    default:
                     var f=_RG_[4],sub$0=append(sub,_uD_),_RJ_=[0,70,f];
                     return [0,sub$0,aux(sub$0,_RJ_)]}}
              if(switch$0)
               {var
                 _RE_=
                  function(i,e)
                   {var _RL_=[0,i,0],sub$0=append(sub,_RL_),_RM_=[0,69,e];
                    return [0,sub$0,aux(sub$0,_RM_)]},
                 _RF_=function(_RK_){return mapi(_RE_,_RK_)};
                return flatten$0(_RF_(es))}}
            return 0}
          var _RB_=0;
          return [0,0,aux(_RB_,t)]},
       hlpred_of_lpred=
        function(p,pr,param)
         {var _Rz_=param[1];
          if(_Rz_ && ! _Rz_[2])
           {var _RA_=param[2];
            if(_RA_ && ! _RA_[2])
             {var dst=_RA_[1],src=_Rz_[1];return caml_call2(p,pr,[0,src,dst])}}
          return 0},
       mult=
        function(p1,p2,pr,lnk)
         {var
           _Ru_=caml_call2(p2,pr,lnk),
           _Rv_=caml_call2(p1,pr,lnk),
           _Rw_=cartesian_product(_Rv_,_Ru_);
          function _Rx_(param)
           {var a2=param[2],a1=param[1];return [0,737457313,[0,a1,a2]]}
          return function(_Ry_){return map$4(_Rx_,_Ry_)}(_Rw_)},
       _uE_=function(param,_Rt_){return _uF_},
       hlpred_mult=function(_Rs_){return fold(mult,_uE_,_Rs_)},
       hlpred_add=
        function(ps,pr,lnk)
         {function _Rr_(p){return caml_call2(p,pr,lnk)}
          return flatten$0(map$4(_Rr_,ps))},
       hlpred_if_empty=
        function(p1,p2,pr,lnk)
         {var actions=caml_call2(p1,pr,lnk);
          return is_empty$2(actions)?caml_call2(p2,pr,lnk):actions},
       search_linkactions=
        function(fixed_srcs,fixed_dsts,hlp,proof,param)
         {var dst=param[2],src=param[1];
          function subpath(p,sub)
           {var _Rp_=p[3],_Rq_=append(_Rp_,sub);return [0,p[1],p[2],_Rq_]}
          function query_actions(lnk)
           {var actions=caml_call2(hlp,proof,lnk);
            return actions?[0,[0,lnk,actions],0]:0}
          if(fixed_srcs)
           {var _Rf_=fixed_srcs[1];
            if(fixed_dsts)
             {var dsts=fixed_dsts[1];return query_actions([0,_Rf_,dsts])}
            var
             match=of_ipath(proof,dst)[3],
             t_dst=match[2],
             _Rg_=
              function(sub_dst)
               {var _Ro_=0;
                return query_actions([0,_Rf_,[0,subpath(dst,sub_dst),_Ro_]])};
            return bind(t_subs(t_dst),_Rg_)}
          if(fixed_dsts)
           {var
             dsts$0=fixed_dsts[1],
             match$0=of_ipath(proof,src)[3],
             t_src=match$0[2],
             _Rh_=
              function(sub_src)
               {var _Rn_=0;
                return query_actions([0,[0,subpath(src,sub_src),_Rn_],dsts$0])};
            return bind(t_subs(t_src),_Rh_)}
          var
           match$1=of_ipath(proof,src)[3],
           t_src$0=match$1[2],
           match$2=of_ipath(proof,dst)[3],
           t_dst$0=match$2[2];
          function _Ri_(sub_src)
           {function _Rj_(sub_dst)
             {var _Rk_=0,_Rl_=[0,subpath(dst,sub_dst),_Rk_],_Rm_=0;
              return query_actions([0,[0,subpath(src,sub_src),_Rm_],_Rl_])}
            return bind(t_subs(t_dst$0),_Rj_)}
          return bind(t_subs(t_src$0),_Ri_)},
       include$2=_m$_([0,compare$0,hash,equal$2]),
       V=include$2[1],
       is_directed=include$2[3],
       iter_vertex=include$2[18],
       fold_vertex=include$2[19],
       iter_succ=include$2[25],
       fold_succ=include$2[27],
       empty$13=include$2[33],
       add_edge=include$2[36],
       subst=
        function(deps,s)
         {return fold
                  (function(deps,param)
                    {var tag=param[2],x=param[1];
                     if(tag)var e=tag[1],fvs=e_vars(e);else var fvs=0;
                     try
                      {var
                        _Rc_=
                         function(y,deps)
                          {return fold
                                   (function(deps,param)
                                     {var z=param[1];return caml_call3(add_edge,deps,z,y)},
                                    deps,
                                    fvs)},
                        _Rd_=caml_call4(fold_succ,_Rc_,deps,x,deps);
                       return _Rd_}
                     catch(_Re_)
                      {_Re_ = caml_wrap_exception(_Re_);
                       if(_Re_[1] === Invalid_argument)return deps;
                       throw _Re_}},
                   deps,
                   s)},
       TraverseDeps=
        _mq_
         ([0,
           is_directed,
           [0,V[1],V[2],V[3]],
           iter_vertex,
           fold_vertex,
           iter_succ,
           fold_succ]),
       _uG_=TraverseDeps[12],
       _uH_=function(_Rb_){return 1 - _Rb_},
       acyclic=function(_Ra_){return symbol$3(_uH_,_uG_,_Ra_)},
       Env=[0],
       State$0=State(Env),
       traverse=
        function(param,i)
         {var t=param[2],p=param[1],switch$0=0;
          switch(p)
           {case 0:
             if(typeof t !== "number" && 70 === t[1])
              {var _QG_=t[2],switch$1=0;
               if(typeof _QG_ !== "number" && 2 === _QG_[0])
                if(840561112 <= _QG_[1])
                 {var _QH_=_QG_[4],_QI_=_QG_[2],f=_QH_,x=_QI_;
                  switch$0 = 1;
                  switch$1 = 1}
                else
                 {var _QK_=_QG_[4],_QL_=_QG_[2],f$0=_QK_,x$0=_QL_;
                  switch$0 = 2;
                  switch$1 = 1}}
             break;
            case 1:
             if(typeof t !== "number" && 70 === t[1])
              {var _QN_=t[2],switch$2=0;
               if(typeof _QN_ !== "number" && 2 === _QN_[0])
                if(840561112 <= _QN_[1])
                 {var _QO_=_QN_[4],_QP_=_QN_[2],f$0=_QO_,x$0=_QP_;
                  switch$0 = 2;
                  switch$2 = 1}
                else
                 {var _QQ_=_QN_[4],_QR_=_QN_[2],f=_QQ_,x=_QR_;
                  switch$0 = 1;
                  switch$2 = 1}}
             break
            }
          switch(switch$0)
           {case 0:
             var _QE_=[0,p,t],_QF_=direct_subterm_pol(_QE_,i);
             return caml_call1(State$0[1],_QF_);
            case 1:
             var
              _QJ_=
               function(param)
                {var
                  subst=param[3],
                  rnm=param[2],
                  deps=param[1],
                  _QS_=0,
                  _QT_=0,
                  z=fresh$1(_QT_,_QS_),
                  _QU_=0;
                 function _QV_(acc,param)
                  {var t=param[2],x=param[1];return 0 === t?[0,x,acc]:acc}
                 var exs=fold(_QV_,_QU_,subst);
                 function _QW_(deps,y){return caml_call3(add_edge,deps,y,z)}
                 var deps$0=fold(_QW_,deps,exs),rnm$0=[0,[0,z,x],rnm];
                 function _QX_(param)
                  {var
                    _Q1_=[0,[0,z,0]],
                    _Q2_=[0,x,0],
                    f$0=f_apply1(_Q2_,_Q1_,f);
                   return caml_call1(State$0[1],[0,p,[0,70,f$0]])}
                 var
                  _QY_=[0,deps$0,rnm$0,subst],
                  _QZ_=State$0[8],
                  _Q0_=caml_call1(_QZ_,_QY_);
                 return caml_call2(State$0[3],_Q0_,_QX_)};
             return caml_call2(State$0[3],State$0[7],_QJ_);
            default:
             var
              _QM_=
               function(st)
                {var
                  subst=st[3],
                  rnm=st[2],
                  _Q3_=0,
                  _Q4_=0,
                  z=fresh$1(_Q4_,_Q3_),
                  rnm$0=[0,[0,z,x$0],rnm],
                  _Q5_=0,
                  subst$0=push$6(z,_Q5_,subst);
                 function _Q6_(param)
                  {var
                    _Q__=[0,[0,z,0]],
                    _Q$_=[0,x$0,0],
                    f=f_apply1(_Q$_,_Q__,f$0);
                   return caml_call1(State$0[1],[0,p,[0,70,f]])}
                 var
                  _Q7_=[0,st[1],rnm$0,subst$0],
                  _Q8_=State$0[8],
                  _Q9_=caml_call1(_Q8_,_Q7_);
                 return caml_call2(State$0[3],_Q9_,_Q6_)};
             return caml_call2(State$0[3],State$0[7],_QM_)}},
       _uI_=State$0[5],
       traverse$0=caml_call1(_uI_,traverse),
       arg$1=
        function(opt)
         {if(opt)var sth=opt[1],drewrite=sth;else var drewrite=0;
          function is_eq_operand(proof,p)
           {try
             {var
               _Qx_=p[3],
               _Qy_=p[3],
               _Qz_=length(_Qy_) - 1 | 0,
               eq_sub=remove_at(_Qz_,_Qx_),
               eq_path=[0,p[1],p[2],eq_sub],
               match=of_ipath(proof,eq_path)[3],
               t=match[2],
               switch$0=0;
              if(typeof t !== "number" && 70 === t[1])
               {var _QB_=t[2],switch$1=0;
                if(typeof _QB_ !== "number" && 0 === _QB_[0])
                 if(caml_string_notequal(_QB_[1],_uJ_))
                  switch$1 = 1;
                 else
                  {var _QC_=1,_QA_=_QC_;switch$0 = 1;switch$1 = 1}}
              if(! switch$0)var _QA_=0;
              return _QA_}
            catch(_QD_)
             {_QD_ = caml_wrap_exception(_QD_);
              if(_QD_[1] === Invalid_argument)return 0;
              throw _QD_}}
          return function(proof,param)
           {var
             dst=param[2],
             src=param[1],
             _PM_=of_ipath(proof,src),
             match=_PM_[3],
             t_src=match[2],
             sub_src=match[1],
             item_src=_PM_[2],
             goal=_PM_[1],
             _PN_=of_ipath(proof,dst),
             match$0=_PN_[3],
             t_dst=match$0[2],
             sub_dst=match$0[1],
             item_dst=_PN_[2];
            try
             {var
               _PO_=[0,item_src,item_dst],
               match$1=pair_map(form_of_item,_PO_),
               f2=match$1[2],
               f1=match$1[1],
               p1=pol_of_item(item_src),
               p2=pol_of_item(item_dst),
               _PP_=[0,empty$13,0,empty$10],
               _PQ_=
                function(param)
                 {var sf1=param[2],sp1=param[1];
                  function _Qo_(st1)
                   {function _Qp_(param)
                     {function _Qt_(param)
                       {var sf2=param[2],sp2=param[1];
                        function _Qw_(st2)
                         {return caml_call1
                                  (State$0[1],
                                   [0,st2[1],sp1,sf1,st1[2],st1[3],sp2,sf2,st2[2],st2[3]])}
                        return caml_call2(State$0[3],State$0[7],_Qw_)}
                      var
                       _Qu_=[0,p2,[0,70,f2]],
                       _Qv_=caml_call2(traverse$0,_Qu_,sub_dst);
                      return caml_call2(State$0[3],_Qv_,_Qt_)}
                    var
                     _Qq_=[0,st1[1],0,empty$10],
                     _Qr_=State$0[8],
                     _Qs_=caml_call1(_Qr_,_Qq_);
                    return caml_call2(State$0[3],_Qs_,_Qp_)}
                  return caml_call2(State$0[3],State$0[7],_Qo_)},
               _PR_=[0,p1,[0,70,f1]],
               _PS_=caml_call2(traverse$0,_PR_,sub_src),
               _PT_=State$0[3],
               _PU_=caml_call2(_PT_,_PS_,_PQ_),
               _PV_=State$0[9],
               match$2=caml_call2(_PV_,_PU_,_PP_),
               s2=match$2[9],
               rnm2=match$2[8],
               st2=match$2[7],
               sp2=match$2[6],
               s1=match$2[5],
               rnm1=match$2[4],
               st1=match$2[3],
               sp1=match$2[2],
               deps=match$2[1],
               s1$0=aslist(s1),
               s2$0=aslist(s2),
               _PW_=append(s1$0,s2$0),
               s=oflist(_PW_),
               switch$0=0;
              if(70 <= st1[1])
               {if(typeof st2 !== "number" && 70 === st2[1])
                 {var f2$0=st2[2],f1$0=st1[2];
                  if(! drewrite)
                   {var switch$1=0;
                    switch(sp1)
                     {case 0:if(0 === sp2)switch$1 = 1;break;
                      case 1:if(1 === sp2)switch$1 = 1;break
                      }
                    if(switch$1)
                     var _P8_=0;
                    else
                     var
                      _P__=[0,[0,f1$0,f2$0],0],
                      _P$_=goal[2][1],
                      _P8_=caml_call1(f_unify(_P$_,empty$8,s),_P__);
                    var _P9_=_P8_;
                    switch$0 = 1}}}
              else
               if(typeof st2 !== "number" && 69 === st2[1])
                {var e2=st2[2],e1=st1[2],switch$2=0;
                 if(drewrite)
                  {var
                    env=goal[2][1],
                    _Qa_=expr_of_term(t_src),
                    _Qb_=env_of_ipath(proof,src),
                    ty1=einfer(_Qb_,_Qa_),
                    _Qc_=expr_of_term(t_dst),
                    _Qd_=env_of_ipath(proof,dst),
                    ty2=einfer(_Qd_,_Qc_),
                    _Qe_=0;
                   if(t_equal(_Qe_,env,ty1,ty2))
                    {var
                      _Qf_=[0,src,dst],
                      _Qg_=function(_Qn_){return is_eq_operand(proof,_Qn_)},
                      match$4=pair_map(_Qg_,_Qf_),
                      eq2=match$4[2],
                      eq1=match$4[1],
                      switch$3=0;
                     if(1 === sp1 && eq1)switch$3 = 1;
                     var switch$4=0;
                     if(! switch$3)
                      {var switch$5=0;
                       if(1 === sp2 && eq2)switch$5 = 1;
                       if(! switch$5){var _Qj_=0;switch$4 = 1}}
                     if(! switch$4)
                      var
                       _Qh_=[0,[0,e1,e2],0],
                       _Qi_=goal[2][1],
                       _Qj_=e_unify(_Qi_,empty$8,s,_Qh_);
                     var _P9_=_Qj_;
                     switch$0 = 1;
                     switch$2 = 1}}}
              var s$0=switch$0?_P9_:0,switch$6=0;
              if(s$0)
               {var s$1=s$0[1],_PX_=subst(deps,s$1);
                if(acyclic(_PX_))
                 {var
                   _PY_=aslist(s$1),
                   _PZ_=length(s1$0),
                   match$3=split_nth(_PZ_,_PY_),
                   s2$1=match$3[2],
                   s1$1=match$3[1],
                   rename=
                    function(rnm1,rnm2)
                     {function _Ql_(param)
                       {var tag=param[2],x=param[1];
                        function get_name(x,rnm)
                         {return default$0(x,assoc_opt(x,rnm))}
                        var x$0=get_name(x,rnm1);
                        function rename(param)
                         {if(0 === param[0])
                           {var match=param[1],i=match[2],x=match[1];
                            return [0,[0,get_name(x,rnm2),i]]}
                          var es=param[2],f=param[1];
                          return [1,f,map$4(rename,es)]}
                        if(tag)var e=tag[1],tag$0=[0,rename(e)];else var tag$0=tag;
                        return [0,x$0,tag$0]}
                      return function(_Qm_){return map$4(_Ql_,_Qm_)}},
                   _P0_=rename(rnm1,rnm2),
                   _P1_=caml_call1(_P0_,s1$1),
                   _P2_=rev(_P1_),
                   s1$2=oflist(_P2_),
                   _P3_=rename(rnm2,rnm1),
                   _P4_=caml_call1(_P3_,s2$1),
                   _P5_=rev(_P4_),
                   s2$2=oflist(_P5_),
                   _P6_=[0,[0,-197397852,[0,s1$2,s2$2]],0],
                   _P7_=_P6_;
                  switch$6 = 1}}
              if(! switch$6)var _P7_=0;
              return _P7_}
            catch(_Qk_)
             {_Qk_ = caml_wrap_exception(_Qk_);
              if(_Qk_[1] === Invalid_argument)return 0;
              throw _Qk_}}},
       intuitionistic_link=
        function(proof,param)
         {var dst=param[2],src=param[1];
          function neg_count$0(p)
           {var
             _PK_=of_ipath(proof,p),
             match=_PK_[3],
             sub=match[1],
             it=_PK_[2],
             f=form_of_item(it),
             n=neg_count(f,sub),
             _PL_=it[1];
            if(72 === _PL_)return n + 1 | 0;
            if(86 <= _PL_)throw [0,Invalid_argument,_uK_];
            return n}
          try
           {var m=neg_count$0(src),match=neg_count$0(dst),switch$0=0;
            if(! (0 < m) || ! (0 < match))switch$0 = 1;
            var switch$1=0;
            if(switch$0)
             {var switch$2=0;
              if(0 === m && ! (1 < match))switch$2 = 1;
              if(! switch$2)
               {var switch$3=0;
                if(! (1 < m) && 0 === match)switch$3 = 1;
                if(! switch$3){var _PI_=0;switch$1 = 1}}}
            if(! switch$1)var _PI_=_uL_;
            return _PI_}
          catch(_PJ_)
           {_PJ_ = caml_wrap_exception(_PJ_);
            if(_PJ_[1] !== InvalidSubFormPath && _PJ_[1] !== Invalid_argument)
             throw _PJ_;
            return 0}},
       is_free_expr=
        function(t,sub)
         {var _Py_=[0,empty$8,t];
          function _Pz_(param,i)
           {var t=param[2],lenv=param[1],switch$0=0;
            if(typeof t !== "number" && 70 === t[1])
             {var _PG_=t[2],switch$1=0;
              if(typeof _PG_ !== "number" && 2 === _PG_[0])
               {var x=_PG_[2],_PH_=enter(lenv,x),lenv$0=_PH_;
                switch$0 = 1;
                switch$1 = 1}}
            if(! switch$0)var lenv$0=lenv;
            var t$0=direct_subterm(t,i);
            return [0,lenv$0,t$0]}
          var match=fold(_Pz_,_Py_,sub),subt=match[2],lenv=match[1];
          if(70 <= subt[1])return 0;
          var e=subt[2],_PA_=e_vars(e);
          function _PB_(_PF_){return exists$2(lenv,_PF_)}
          function _PC_(_PE_){return 1 - _PE_}
          return for_all(function(_PD_){return symbol$3(_PC_,_PB_,_PD_)},_PA_)},
       instantiate_link=
        function(proof,param)
         {var dsts=param[2],srcs=param[1];
          function to_form(p_wit,p_form)
           {var
             _Pp_=of_ipath(proof,p_wit),
             _Pq_=_Pp_[3],
             wit=_Pq_[2],
             sub_wit=_Pq_[1],
             item_wit=_Pp_[2],
             match=_Pp_[1],
             goal=match[2],
             _Pr_=p_wit[2][1],
             switch$0=0;
            if(typeof _Pr_ !== "number" && 4298439 === _Pr_[1])
             {var w=_Pr_[2],where=w;switch$0 = 1}
            if(! switch$0)var where=737453762;
            var _Ps_=[0,where],ctxt_wit=term_of_item(_Ps_,item_wit);
            if(is_free_expr(ctxt_wit,sub_wit))
             {var
               pol=pol_of_ipath(proof,p_form),
               f=term_of_ipath(proof,p_form),
               wit$0=expr_of_term(wit),
               _Pt_=goal[1],
               ty_wit=einfer(_Pt_,wit$0),
               switch$1=0;
              switch(pol)
               {case 0:
                 if(typeof f !== "number" && 70 === f[1])
                  {var _Pu_=f[2],switch$2=0;
                   if(typeof _Pu_ !== "number" && 2 === _Pu_[0])
                    if(172470935 === _Pu_[1])
                     {var ty=_Pu_[3];switch$1 = 1;switch$2 = 1}
                    else
                     switch$2 = 1}
                 break;
                case 1:
                 if(typeof f !== "number" && 70 === f[1])
                  {var _Px_=f[2],switch$3=0;
                   if(typeof _Px_ !== "number" && 2 === _Px_[0])
                    if(840561112 === _Px_[1])
                     {var ty=_Px_[3];switch$1 = 1;switch$3 = 1}
                    else
                     switch$3 = 1}
                 break
                }
              if(switch$1)
               {var _Pv_=goal[1],_Pw_=0;
                if(t_equal(_Pw_,_Pv_,ty,ty_wit))
                 return [0,[0,-641049974,[0,wit$0,p_form]],0]}
              return 0}
            return 0}
          if(srcs && ! srcs[2] && dsts && ! dsts[2])
           {var
             dst=dsts[1],
             src=srcs[1],
             _Pl_=[0,src,dst],
             _Pm_=function(_Po_){return term_of_ipath(proof,_Po_)},
             match=pair_map(_Pm_,_Pl_);
            if(70 <= match[1][1])
             {var _Pn_=match[2];
              if(typeof _Pn_ !== "number" && 69 === _Pn_[1])
               return to_form(dst,src);
              return 0}
            return 70 <= match[2][1]?to_form(src,dst):0}
          return 0},
       rewrite_link=
        function(proof,lnk)
         {function rewrite_data(p)
           {if(3607583 === p[2][1])
             {var
               match=of_ipath(proof,p),
               it=match[2],
               _Pb_=p[3],
               match$0=form_of_item(it);
              if(_Pb_)
               {var _Pc_=_Pb_[1],switch$0=0;
                if(0 === _Pc_)
                 {if(! _Pb_[2])
                   {var switch$1=0;
                    if(typeof match$0 !== "number" && 0 === match$0[0])
                     if(caml_string_notequal(match$0[1],_uM_))
                      switch$1 = 1;
                     else
                      {var _Pd_=match$0[2];
                       if(_Pd_)
                        {var _Pe_=_Pd_[2];
                         if(_Pe_ && ! _Pe_[2])
                          {var _Pf_=_Pe_[1],_Pg_=_Pd_[1],res=_Pf_,red=_Pg_;
                           switch$0 = 1;
                           switch$1 = 1}
                         else
                          switch$1 = 1}
                       else
                        switch$1 = 1}}}
                else
                 if(1 === _Pc_ && ! _Pb_[2])
                  {var switch$2=0;
                   if(typeof match$0 !== "number" && 0 === match$0[0])
                    if(caml_string_notequal(match$0[1],_uN_))
                     switch$2 = 1;
                    else
                     {var _Ph_=match$0[2];
                      if(_Ph_)
                       {var _Pi_=_Ph_[2];
                        if(_Pi_ && ! _Pi_[2])
                         {var _Pj_=_Pi_[1],_Pk_=_Ph_[1],res=_Pk_,red=_Pj_;
                          switch$0 = 1;
                          switch$2 = 1}
                        else
                         switch$2 = 1}
                      else
                       switch$2 = 1}}
                if(switch$0)return [0,[0,red,res]]}
              return 0}
            return 0}
          try
           {var
             _OS_=function(_Pa_){return symbol$2(hd,rewrite_data,_Pa_)},
             match=pair_map(_OS_,lnk),
             _OT_=lnk[1],
             switch$0=0;
            if(_OT_ && ! _OT_[2])
             {var _O3_=lnk[2],switch$1=0;
              if(_O3_ && ! _O3_[2])
               {var _O8_=match[1];
                if(_O8_)
                 {if(match[2])
                   {var
                     match$0=_O8_[1],
                     res$0=match$0[2],
                     red$0=match$0[1],
                     dst=_O3_[1],
                     _O9_=[0,[0,71624748,[0,red$0,res$0,[0,dst,0]]],0],
                     _OV_=_O9_;
                    switch$0 = 1;
                    switch$1 = 1}}
                else
                 switch$1 = 1}
              if(! switch$1)
               {var _O4_=match[1];
                if(_O4_)
                 {var
                   _O5_=_O4_[1],
                   _O6_=_O5_[2],
                   _O7_=_O5_[1],
                   res=_O6_,
                   red=_O7_,
                   tgts=_O3_;
                  switch$0 = 2}}}
            var switch$2=0;
            switch(switch$0)
             {case 0:
               var _OU_=lnk[2],switch$3=0;
               if(_OU_ && ! _OU_[2])
                {var _OX_=match[2];
                 if(_OX_)
                  {var
                    _OY_=_OX_[1],
                    _OZ_=_OY_[2],
                    _O0_=_OY_[1],
                    res=_OZ_,
                    red=_O0_,
                    tgts=_OT_;
                   switch$2 = 1;
                   switch$3 = 1}}
               if(! switch$3)var _OV_=0;
               break;
              case 1:break;
              default:switch$2 = 1}
            if(switch$2)
             var
              _O1_=function(p){var _O$_=p[2][1];return caml_equal(_O$_,_uO_)},
              _O2_=exists(_O1_,tgts)?0:[0,[0,71624748,[0,red,res,tgts]],0],
              _OW_=_O2_;
            else
             var _OW_=_OV_;
            return _OW_}
          catch(_O__)
           {_O__ = caml_wrap_exception(_O__);
            if(_O__[1] === Failure)return 0;
            throw _O__}},
       fold_link=
        function(proof,lnk)
         {function fold_data(p)
           {var match=of_ipath(proof,p),it=match[2],_OP_=p[2][1],_OQ_=p[3];
            if(typeof it !== "number" && 86 === it[1])
             {var _OR_=it[2];
              if
               (_OR_[2][2]
                &&
                typeof _OP_
                !==
                "number"
                &&
                4298439
                ===
                _OP_[1]
                &&
                !
                _OQ_)
               {var where=_OP_[2],x=_OR_[1];return [0,[0,x,where]]}}
            return 0}
          try
           {var
             _Ok_=function(_OO_){return symbol$2(hd,fold_data,_OO_)},
             match=pair_map(_Ok_,lnk),
             _Ol_=lnk[1],
             switch$0=0;
            if(_Ol_ && ! _Ol_[2])
             {var _OB_=lnk[2],switch$1=0,_OC_=_Ol_[1];
              if(_OB_ && ! _OB_[2])
               {var _OH_=match[1];
                if(_OH_)
                 {var _OI_=_OH_[1];
                  if(737453762 === _OI_[2])
                   {var _OJ_=match[2];
                    if(_OJ_ && 737453762 === _OJ_[1][2])
                     {var
                       x$0=_OI_[1],
                       dst=_OB_[1],
                       _OK_=[0,[0,781813793,[0,x$0,[0,dst,0]]],0],
                       _On_=_OK_;
                      switch$0 = 1;
                      switch$1 = 1}}}
                else
                 switch$1 = 1}
              if(! switch$1)
               {var _OD_=match[1];
                if(_OD_)
                 {var
                   _OE_=_OD_[1],
                   _OF_=_OE_[2],
                   _OG_=_OE_[1],
                   where=_OF_,
                   x=_OG_,
                   tgts=_OB_,
                   p=_OC_;
                  switch$0 = 2}}}
            var switch$2=0;
            switch(switch$0)
             {case 0:
               var _Om_=lnk[2],switch$3=0;
               if(_Om_ && ! _Om_[2])
                {var _Op_=match[2];
                 if(_Op_)
                  {var
                    _Oq_=_Op_[1],
                    _Or_=_Oq_[2],
                    _Os_=_Oq_[1],
                    _Ot_=_Om_[1],
                    where=_Or_,
                    x=_Os_,
                    tgts=_Ol_,
                    p=_Ot_;
                   switch$2 = 1;
                   switch$3 = 1}}
               if(! switch$3)var _On_=0;
               break;
              case 1:break;
              default:switch$2 = 1}
            if(switch$2)
             {var
               is_head=
                function(p){var _ON_=p[2][1];return caml_equal(_ON_,_uP_)};
              if(803493184 === where)
               var _Ou_=exists(is_head,tgts)?0:[0,[0,371840762,[0,x,tgts]],0];
              else
               {var match$0=find_all$0(is_head,tgts);
                if(match$0)
                 {var _Ov_=match$0[1];
                  if(match$0[2])
                   var _Ow_=0;
                  else
                   var
                    _Oy_=fold_data(_Ov_),
                    _Oz_=0,
                    _OA_=
                     function(param)
                      {var y=param[1],_OM_=0;
                       return [0,
                               [0,371840762,[0,y,[0,p,remove$0(tgts,_Ov_)]]],
                               _OM_]},
                    _Ow_=map_default(_OA_,_Oz_,_Oy_);
                  var _Ox_=_Ow_}
                else
                 var _Ox_=[0,[0,781813793,[0,x,tgts]],0];
                var _Ou_=_Ox_}
              var _Oo_=_Ou_}
            else
             var _Oo_=_On_;
            return _Oo_}
          catch(_OL_)
           {_OL_ = caml_wrap_exception(_OL_);
            if(_OL_[1] === Failure)return 0;
            throw _OL_}},
       lemmas=
        function(selection,proof)
         {var
           _NX_=0,
           _NY_=arg$1(_uQ_),
           _NZ_=
            [0,
             function(_Oi_,_Oj_){return hlpred_of_lpred(_NY_,_Oi_,_Oj_)},
             _NX_],
           _N0_=[0,intuitionistic_link,0],
           _N1_=[0,function(eta){return caml_call1(arg$1(0),eta)},_N0_],
           _N2_=map$4(hlpred_of_lpred,_N1_),
           _N3_=[0,hlpred_mult(_N2_),_NZ_];
          function filter(_Og_,_Oh_){return hlpred_add(_N3_,_Og_,_Oh_)}
          if(selection)
           {var _N4_=selection[1];
            if(_N4_)
             {var
               p=_N4_[1],
               match=goal_of_ipath(proof,p),
               sub=match[2],
               g_id=match[1],
               _N5_=db(proof),
               _N6_=all$1(_N5_),
               _N7_=
                function(param)
                 {var
                   stmt=param[2],
                   _N9_=0,
                   hd=fresh$2(_N9_),
                   _N__=0,
                   _N$_=0,
                   hyp=mk_hyp(_N$_,_N__,stmt),
                   _Oa_=sub[2],
                   g_hyps=add$11(_Oa_,hd,hyp),
                   sub$0=[0,sub[1],g_hyps,sub[3]],
                   _Ob_=[0,TAssume,stmt,g_id],
                   match=hprogress(proof,g_id,_Ob_,sub$0),
                   proof$0=match[2],
                   g_id$0=match[1],
                   _Oc_=toint(g_id$0),
                   _Od_=0,
                   _Oe_=[0,[0,3607583,toint(hd)]],
                   lp=mk_ipath(_Oe_,_Od_,_Oc_);
                  function _Of_(src)
                   {return search_linkactions
                            ([0,[0,src,0]],0,filter,proof$0,[0,dummy_path,lp])}
                  var linkactions=bind(_N4_,_Of_);
                  return 1 - is_empty$2(linkactions)};
              return function(_N8_){return find_all$0(_N7_,_N8_)}(_N6_)}}
          return all$1(db(proof))},
       dnd_actions=
        function(param,proof)
         {var
           selection=param[2],
           dnd=param[1],
           _Nn_=dnd[1],
           goal=goal_of_ipath(proof,_Nn_),
           g_id=goal[1],
           _No_=dnd[1];
          function _Np_(_NW_){return is_sub_path(_No_,_NW_)}
          var srcsel=find_all$0(_Np_,selection);
          function _Nq_(p){return p[2][2] === dnd[1][2][2]?1:0}
          var dstsel=remove_if(_Nq_,selection);
          function hlpred_only_sel(p,pr,lnk)
           {var _NV_=[0,srcsel,dstsel];
            return caml_equal(lnk,_NV_)?caml_call2(p,pr,lnk):0}
          var
           _Nr_=[0,instantiate_link,0],
           _Ns_=
            [0,
             function(_NT_,_NU_){return hlpred_only_sel(fold_link,_NT_,_NU_)},
             _Nr_];
          function _Nt_(_NR_,_NS_)
           {return hlpred_only_sel(rewrite_link,_NR_,_NS_)}
          var _Nu_=arg$1(_uR_);
          function _Nv_(_NP_,_NQ_){return hlpred_of_lpred(_Nu_,_NP_,_NQ_)}
          var
           _Nw_=
            [0,
             function(_NN_,_NO_){return hlpred_if_empty(_Nv_,_Nt_,_NN_,_NO_)},
             _Ns_],
           _Nx_=[0,intuitionistic_link,0],
           _Ny_=[0,function(eta){return caml_call1(arg$1(0),eta)},_Nx_],
           _Nz_=map$4(hlpred_of_lpred,_Ny_),
           _NA_=[0,hlpred_mult(_Nz_),_Nw_];
          function hlp(_NL_,_NM_){return hlpred_add(_NA_,_NL_,_NM_)}
          if(srcsel)
           var
            _NB_=[0,srcsel],
            _NC_=[0,dummy_path,0],
            fixed_srcs=_NB_,
            srcs=_NC_;
          else
           var
            srcs$0=[0,dnd[1],0],
            fixed_srcs$0=0,
            fixed_srcs=fixed_srcs$0,
            srcs=srcs$0;
          if(dstsel)
           var
            _ND_=[0,dstsel],
            _NE_=[0,dummy_path,0],
            fixed_dsts=_ND_,
            dsts=_NE_;
          else
           {var _NF_=dnd[2];
            if(_NF_)
             var dst=_NF_[1],dsts$0=[0,dst,0];
            else
             var
              src=dnd[1],
              _NG_=0,
              _NH_=all_items_ipaths(_NG_,goal),
              dsts$0=remove$0(_NH_,src);
            var fixed_dsts$0=0,fixed_dsts=fixed_dsts$0,dsts=dsts$0}
          return bind
                  (srcs,
                   function(src)
                    {return bind
                             (dsts,
                              function(dst)
                               {var
                                 _NI_=[0,src,dst],
                                 linkactions=
                                  search_linkactions(fixed_srcs,fixed_dsts,hlp,proof,_NI_);
                                return bind
                                        (linkactions,
                                         function(param)
                                          {var
                                            actions=param[2],
                                            lnk=param[1],
                                            dsts=lnk[2],
                                            srcs=lnk[1],
                                            actions$0=remove_nothing(actions);
                                           return bind
                                                   (srcs,
                                                    function(src)
                                                     {return bind
                                                              (dsts,
                                                               function(dst)
                                                                {var
                                                                  _NJ_=[0,g_id,[0,-611444666,[0,lnk,actions$0]]],
                                                                  _NK_=[0,3406170,[0,src,dst]];
                                                                 return return$2([0,_uS_,append(srcs,dsts),_NK_,_NJ_])})})})})})},
       actions=
        function(proof,p)
         {var _MT_=p[1];
          if(3406170 <= _MT_[1])
           {var dnd=_MT_[2];return dnd_actions([0,dnd,p[2]],proof)}
          var
           path=_MT_[2],
           _MU_=of_ipath(proof,path),
           item=_MU_[2],
           match=_MU_[1],
           goal=match[2],
           hd=match[1],
           _MV_=item[1];
          if(72 === _MV_)
           {var
             match$0=item[2],
             rp=match$0[1],
             _MW_=toint(hd),
             _MX_=0,
             _MY_=[0,[0,3607583,toint(rp)]],
             hg=mk_ipath(_MY_,_MX_,_MW_);
            return [0,
                    [0,_uT_,[0,hg,0],[0,-611587032,hg],[0,hd,[0,770574379,rp]]],
                    0]}
          if(86 <= _MV_)
           {var _MZ_=item[2],_M0_=_MZ_[2],_M2_=_MZ_[1],_M1_=_M0_[1];
            if(_M0_[2])
             {var
               _M3_=goal[1],
               _M4_=getid(_M3_,_M2_),
               rp$0=get$3(_M4_),
               _M5_=toint(hd),
               _M6_=0,
               _M7_=[0,[0,_uU_,rp$0]],
               hg_unfold=mk_ipath(_M7_,_M6_,_M5_),
               _M8_=toint(hd),
               _M9_=0,
               _M__=[0,[0,_uV_,rp$0]],
               hg_fold=mk_ipath(_M__,_M9_,_M8_);
              return [0,
                      [0,
                       _uX_,
                       [0,hg_unfold,0],
                       [0,-611587032,hg_unfold],
                       [0,hd,[0,371840762,_M2_]]],
                      [0,
                       [0,
                        _uW_,
                        [0,hg_fold,0],
                        [0,-611587032,hg_fold],
                        [0,hd,[0,781813793,_M2_]]],
                       0]]}
            var _M$_=goal[1],_Na_=0;
            if(t_equal(_Na_,_M$_,_M1_,nat))
             {var
               _Nb_=goal[1],
               _Nc_=getid(_Nb_,_M2_),
               rp$1=get$3(_Nc_),
               _Nd_=toint(hd),
               _Ne_=0,
               _Nf_=[0,[0,_uY_,rp$1]],
               hg$0=mk_ipath(_Nf_,_Ne_,_Nd_),
               _Ng_=0;
              return [0,
                      [0,
                       _uZ_,
                       [0,hg$0,0],
                       [0,-611587032,hg$0],
                       [0,hd,[0,3654847,ofint(rp$1)]]],
                      _Ng_]}
            return 0}
          var _Nh_=[0,proof,hd],iv=ivariants(_Nh_),bv=length(iv) <= 1?1:0;
          return mapi
                  (function(i,x)
                    {var _Ni_=toint(hd);
                     if(bv)
                      var _Nj_=0;
                     else
                      var _Nm_=length(iv),_Nj_=rebuild_pathd(_Nm_,i);
                     var _Nk_=[0,_Nj_],_Nl_=0,hg=mk_ipath(_Nl_,_Nk_,_Ni_);
                     return [0,
                             x,
                             [0,hg,0],
                             [0,-611587032,hg],
                             [0,hd,[0,-783402420,i]]]},
                   iv)},
       apply=
        function(proof,param)
         {var a=param[2],hd=param[1],targ=[0,proof,hd],_MI_=a[1];
          if(371840762 <= _MI_)
           {if(770574379 === _MI_)
             {var
               subhd=a[2],
               goal=byid$1(proof,hd),
               _MJ_=goal[2],
               form=byid$0(_MJ_,subhd)[3],
               _MK_=0,
               _ML_=goal[1],
               _MM_=0,
               clear=caml_call1(f_equal(_MM_,_ML_,form),_MK_);
              return arg$0([0,clear],subhd,targ)}
            if(822537815 <= _MI_)
             {if(857475493 <= _MI_)
               {var
                 match=a[2],
                 s=match[4],
                 p=match[3],
                 dst=match[2],
                 src=match[1];
                return forward([0,src,dst,p,s],targ)}
              var subhd$0=a[2];
              return and_drop(subhd$0,targ)}
            if(781813793 <= _MI_){var x=a[2];return unfold_all(_u0_,x,targ)}
            var x$0=a[2];
            return unfold_all(0,x$0,targ)}
          if(-259955253 <= _MI_)
           {if(3654847 <= _MI_)
             {var subhd$1=a[2];return induction(subhd$1,targ)}
            var
             match$0=a[2],
             fl=match$0[2],
             subhd$2=match$0[1],
             _MN_=function(x){return [0,[0,[0,[0,hd],0],0],x]};
            return or_drop(subhd$2,targ,map$4(_MN_,fl))}
          if(-611444666 <= _MI_)
           {var
             match$1=a[2],
             actions=match$1[2],
             lnk=match$1[1],
             _MO_=lnk[1],
             switch$0=0;
            if(_MO_ && ! _MO_[2])
             {var _MR_=lnk[2];
              if(_MR_ && ! _MR_[2])
               if(actions)
                {var _MS_=actions[1];
                 if
                  (typeof _MS_
                   !==
                   "number"
                   &&
                   -197397852
                   ===
                   _MS_[1]
                   &&
                   !
                   actions[2])
                  {var substs=_MS_[2],dst$0=_MR_[1],src$0=_MO_[1];
                   return dlink([0,src$0,dst$0],substs,targ)}}
               else
                switch$0 = 1}
            if(! switch$0 && actions)
             {var _MP_=actions[1];
              if(typeof _MP_ !== "number")
               {var _MQ_=_MP_[1];
                if(71624749 <= _MQ_)
                 {if(371840762 === _MQ_)
                   {if(! actions[2])
                     {var match$2=_MP_[2],tgts=match$2[2],x$1=match$2[1];
                      return caml_call2(unfold(0,x$1),tgts,targ)}}
                  else
                   if(781813793 === _MQ_ && ! actions[2])
                    {var match$3=_MP_[2],tgts$0=match$3[2],x$2=match$3[1];
                     return caml_call2(unfold(_u2_,x$2),tgts$0,targ)}}
                else
                 if(-641049974 === _MQ_)
                  {if(! actions[2])
                    {var match$4=_MP_[2],tgt=match$4[2],wit=match$4[1];
                     return instantiate(wit,tgt,targ)}}
                 else
                  if(71624748 <= _MQ_ && ! actions[2])
                   {var
                     match$5=_MP_[2],
                     tgts$1=match$5[3],
                     res=match$5[2],
                     red=match$5[1];
                    return caml_call1(rewrite_in(red,res,tgts$1),targ)}}
              if(actions[2])return failwith(_u1_)}
            throw TacticNotApplicable}
          var variant=a[2];
          return intro([0,[0,variant,0]],targ)},
       InvalidASource=[248,_vf_,caml_fresh_oo_id(0)],
       InvalidLemmaDB=[248,_vg_,caml_fresh_oo_id(0)],
       translators=[0,0],
       register=
        function(tx)
         {var _MG_=[0,tx,0],_MH_=translators[1];
          translators[1] = append(_MH_,_MG_);
          return 0},
       translate$0=
        function(e)
         {var Found=[248,_vh_,caml_fresh_oo_id(0)];
          try
           {var
             _MA_=translators[1],
             _MB_=
              function(tx)
               {var _MD_=caml_call1(tx,e);
                function _ME_(msg){throw [0,Found,msg]}
                return function(_MF_){return may(_ME_,_MF_)}(_MD_)};
            iter$0(_MB_,_MA_);
            var _MC_=0;
            return _MC_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            if(exn[1] === Found){var msg=exn[2];return [0,msg]}
            throw exn}},
       as_string=
        function(exn,v)
         {var _Mz_=typeof v,match=caml_string_of_jsstring(_Mz_);
          if(caml_string_notequal(match,_vi_))throw exn;
          return caml_string_of_jsstring(v)},
       _vj_=
        function(exn)
         {if(exn[1] === ParseError)return _vk_;
          if(exn[1] === DuplicatedEntry)
           {var name=exn[3],_Mx_=cat(name,_vl_);return [0,cat(_vm_,_Mx_)]}
          if(exn[1] === LemmaNotFound)
           {var name$0=exn[2],_My_=cat(name$0,_vn_);return [0,cat(_vo_,_My_)]}
          if(exn !== TypingError && exn !== RecheckFailure)
           return exn === TacticNotApplicable?_vq_:0;
          return _vp_};
      register(_vj_);
      var
       symbol$5=
        function(f,x)
         {try
           {var _Mv_=caml_call1(f,x);return _Mv_}
          catch(e)
           {e = caml_wrap_exception(e);
            var
             _Mq_=translate$0(e),
             _Mr_=
              function(param)
               {var _Mw_=to_string$5(e);
                return caml_call1(sprintf$0(_vr_),_Mw_)},
             msg=default_delayed(_Mr_,_Mq_),
             _Ms_=0,
             _Mt_=caml_jsstring_of_string(msg),
             _Mu_=function(t1,t0,param){return new t1(t0)};
            return raise_js_error(_Mu_(error_constr,_Mt_,_Ms_))}},
       of_obj=
        function(obj)
         {function _Mo_(_Mp_){return as_string(InvalidASource,_Mp_)}
          return ipath_of_path(_Mo_(obj))},
       of_array$0=
        function(obj)
         {var _Ml_=caml_js_to_array(obj),_Mm_=to_list(_Ml_);
          return function(_Mn_){return map$4(of_obj,_Mn_)}(_Mm_)},
       of_opt=
        function(obj)
         {var _Mj_=to_option(obj);
          return function(_Mk_){return map$3(of_obj,_Mk_)}(_Mj_)},
       js_proof_engine=function _Mi_(_Mh_){return _Mi_.fun(_Mh_)},
       js_subgoal=function _Mg_(_Me_,_Mf_){return _Mg_.fun(_Me_,_Mf_)},
       js_hyps=function _Md_(_Mb_,_Mc_){return _Md_.fun(_Mb_,_Mc_)},
       js_tvar=function _Ma_(_L__,_L$_){return _Ma_.fun(_L__,_L$_)},
       js_form=function _L9_(_L7_,_L8_){return _L9_.fun(_L7_,_L8_)},
       js_expr=function _L6_(_L5_){return _L6_.fun(_L5_)},
       js_type=function _L4_(_L3_){return _L4_.fun(_L3_)},
       _vs_=[0,0,0,0];
      caml_update_dummy
       (js_proof_engine,
        function(proof)
         {function _JS_
           (self,
            proof,
            handle,
            subgoals,
            closed,
            getmeta,
            setmeta,
            actions,
            pactions,
            apply,
            loaddb,
            getdb)
           {if(! _vs_[1])
             {var
               _LC_=create_table(_u9_),
               _LD_=new_variable(_LC_,_vt_),
               _LE_=get_method_labels(_LC_,_u8_),
               _LF_=_LE_[1],
               _LG_=_LE_[2],
               _LH_=_LE_[3],
               _LI_=_LE_[4],
               _LJ_=_LE_[5],
               _LK_=_LE_[6],
               _LL_=_LE_[7],
               _LM_=_LE_[8],
               _LN_=_LE_[9],
               _LO_=_LE_[10],
               _LP_=_LE_[11],
               _LQ_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[2],env[1])},
               _LR_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[3],env[1])},
               _LS_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[4],env[1])},
               _LT_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[5],env[1])},
               _LU_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[6],env[1])},
               _LV_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[7],env[1])},
               _LW_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[8],env[1])},
               _LX_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[9],env[1])},
               _LY_=
                function(self_1)
                 {var env=self_1[1 + _LD_];return caml_call1(env[10],env[1])},
               _LZ_=function(self_1){var env=self_1[1 + _LD_];return env[11]};
              set_methods
               (_LC_,
                [0,
                 _LH_,
                 function(self_1){var env=self_1[1 + _LD_];return env[12]},
                 _LK_,
                 _LZ_,
                 _LF_,
                 _LY_,
                 _LN_,
                 _LX_,
                 _LL_,
                 _LW_,
                 _LG_,
                 _LV_,
                 _LP_,
                 _LU_,
                 _LI_,
                 _LT_,
                 _LO_,
                 _LS_,
                 _LJ_,
                 _LR_,
                 _LM_,
                 _LQ_]);
              var
               _L0_=
                function(_L1_)
                 {var _L2_=create_object_opt(0,_LC_);
                  _L2_[1 + _LD_] = _L1_;
                  return _L2_};
              init_class(_LC_);
              _vs_[1] = _L0_}
            return caml_call1
                    (_vs_[1],
                     [0,
                      self,
                      getdb,
                      loaddb,
                      apply,
                      pactions,
                      actions,
                      setmeta,
                      getmeta,
                      closed,
                      subgoals,
                      handle,
                      proof])}
          function _JT_(self,selection)
           {var _Ln_=to_option$0(selection);
            function _Lo_(_LB_){return map$3(of_array$0,_LB_)}
            var selection$0=_Lo_(_Ln_);
            function _Lp_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,44),x)}
            function _Lq_(t20,param){return t20.proof}
            var _Lr_=_Lq_(self,_Lp_);
            function _Ls_(_LA_){return lemmas(selection$0,_LA_)}
            var _Lt_=_Ls_(_Lr_);
            function _Lu_(param)
             {var
               form=param[2],
               name=param[1],
               _Lz_=f_tostring(form),
               stmt=caml_jsstring_of_string(_Lz_);
              return [0,name,stmt]}
            function _Lv_(_Ly_){return map$4(_Lu_,_Ly_)}
            var _Lw_=_Lv_(_Lt_),_Lx_=of_list(_Lw_);
            return caml_js_object(_Lx_)}
          function _JU_(self,lemmas)
           {var _Lc_=typeof lemmas,match=caml_string_of_jsstring(_Lc_);
            if(caml_string_notequal(match,_vu_))throw InvalidLemmaDB;
            var
             _Ld_=object_keys(lemmas),
             _Le_=caml_js_to_array(_Ld_),
             _Lf_=to_list(_Le_);
            function _Lg_(name)
             {var
               name$0=as_string(InvalidLemmaDB,name),
               _Lm_=lemmas[name$0],
               stmt=as_string(InvalidLemmaDB,_Lm_);
              return [0,name$0,stmt]}
            function _Lh_(_Ll_){return map$4(_Lg_,_Ll_)}
            var lemmas$0=_Lh_(_Lf_);
            function _Li_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,45),x)}
            function _Lj_(t18,param){return t18.proof}
            var _Lk_=_Lj_(self,_Li_),pr=loaddb(_Lk_,lemmas$0);
            return caml_call1(js_proof_engine,pr)}
          function _JV_(self,action)
           {function _K7_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,46),x)}
            function _K8_(t16,param){return t16.proof}
            var _K9_=[0,_K8_(self,_K7_),action];
            function _K__(_Lb_){return curry(apply,_Lb_)}
            function _K$_(_La_){return symbol$5(_K__,_La_)}
            return caml_call1(js_proof_engine,_K$_(_K9_))}
          function _JW_(self,path)
           {var _K3_=0,ppx_lwt_0=return$0(_K3_);
            function _K4_(param)
             {function _K5_(x)
               {return caml_call1(caml_get_public_method(x,-416414723,47),x)}
              function _K6_(t14,t13,param){return t14.actions(t13)}
              return return$0(_K6_(self,path,_K5_))}
            return backtrace_bind
                    (function(exn)
                      {try
                        {throw exn}
                       catch(exn){exn = caml_wrap_exception(exn);return exn}},
                     ppx_lwt_0,
                     _K4_)}
          function _JX_(self,asource)
           {var _Kk_=typeof asource,match=caml_string_of_jsstring(_Kk_);
            if(caml_string_notequal(match,_vv_))
             {if(caml_string_notequal(match,_vw_))throw InvalidASource;
              var _Kl_=0,_Km_=[0,[0,-611587032,of_obj(asource)],_Kl_]}
            else
             {var
               _KA_=
                function(x)
                 {return caml_call1(caml_get_public_method(x,-955653804,50),x)},
               _KB_=function(t5,param){return t5.kind},
               _KC_=_KB_(asource,_KA_),
               match$0=as_string(InvalidASource,_KC_);
              if(caml_string_notequal(match$0,_vx_))
               if(caml_string_notequal(match$0,_vy_))
                {if(caml_string_notequal(match$0,_vz_))throw InvalidASource;
                 var
                  _KD_=
                   function(x)
                    {return caml_call1(caml_get_public_method(x,842117339,51),x)},
                  _KE_=function(t7,param){return t7.source},
                  _KF_=_KE_(asource,_KD_),
                  source=of_obj(_KF_),
                  _KG_=
                   function(x)
                    {return caml_call1(caml_get_public_method(x,301697678,52),x)},
                  _KH_=function(t8,param){return t8.destination},
                  _KI_=_KH_(asource,_KG_),
                  destination=of_opt(_KI_),
                  _KJ_=[0,[0,3406170,[0,source,destination]],0]}
               else
                var
                 _KK_=
                  function(x)
                   {return caml_call1
                            (caml_get_public_method(x,-900602459,53),x)},
                 _KL_=function(t6,param){return t6.path},
                 _KM_=_KL_(asource,_KK_),
                 path=of_obj(_KM_),
                 _KJ_=[0,[0,-611587032,path],0];
              else
               var
                _KN_=
                 function(x)
                  {return caml_call1
                           (caml_get_public_method(x,-900602459,54),x)},
                _KO_=function(t9,param){return t9.path},
                _KP_=_KO_(asource,_KN_),
                path$0=of_obj(_KP_),
                _KJ_=[0,[0,-611587032,path$0],[0,[0,3406170,[0,path$0,0]],0]];
              var _Km_=_KJ_}
            function _Kn_(x)
             {return caml_call1(caml_get_public_method(x,236648524,48),x)}
            function _Ko_(t10,param){return t10.selection}
            var _Kp_=_Ko_(asource,_Kn_),selection=of_array$0(_Kp_);
            function _Kq_(kind){return [0,kind,selection]}
            var asource$0=map$4(_Kq_,_Km_);
            function _Kr_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,49),x)}
            function _Ks_(t11,param){return t11.proof}
            var _Kt_=_Ks_(self,_Kr_);
            function _Ku_(_K2_){return actions(_Kt_,_K2_)}
            function _Kv_(_K1_){return symbol$5(_Ku_,_K1_)}
            var _Kw_=map$4(_Kv_,asource$0),actions$0=flatten$0(_Kw_);
            function _Kx_(param)
             {var
               a=param[4],
               aui=param[3],
               ps=param[2],
               p=param[1],
               ps$0=map$4(p2p,ps);
              function _KQ_(_K0_){return caml_jsstring_of_string(_K0_)}
              var
               _KR_=map$4(_KQ_,ps$0),
               _KS_=of_list(_KR_),
               ps$1=caml_js_from_array(_KS_);
              if(3406170 <= aui[1])
               var
                match=aui[2],
                dst=match[2],
                src=match[1],
                _KT_=p2p(dst),
                _KU_=caml_jsstring_of_string(_KT_),
                _KV_=p2p(src),
                _KW_=caml_jsstring_of_string(_KV_),
                aui$0={"kind":"dnd","source":_KW_,"destination":_KU_};
              else
               var
                p$0=aui[2],
                _KY_=p2p(p$0),
                _KZ_=caml_jsstring_of_string(_KY_),
                aui$0={"kind":"click","target":_KZ_};
              var _KX_=caml_jsstring_of_string(p);
              return {"description":_KX_,
                      "highlight":ps$1,
                      "ui":aui$0,
                      "action":a}}
            var _Ky_=map$4(_Kx_,actions$0),_Kz_=of_list(_Ky_);
            return caml_js_from_array(_Kz_)}
          function _JY_(self,meta)
           {var _Kh_=to_option(meta);
            function _Ki_(x)
             {return caml_call1(caml_get_public_method(x,939361192,55),x)}
            function _Kj_(t3,param){return t3.handle}
            return set_meta(proof,_Kj_(self,_Ki_),_Kh_)}
          function _JZ_(self)
           {function _Ke_(x)
             {return caml_call1(caml_get_public_method(x,939361192,56),x)}
            function _Kf_(t2,param){return t2.handle}
            var _Kg_=_Kf_(self,_Ke_);
            return option(get_meta(proof,_Kg_))}
          function _J0_(self){var _Kd_=closed(proof);return ! ! _Kd_}
          function _J1_(self)
           {var
             subgoals=opened(proof),
             _Kb_=caml_call1(js_subgoal,self),
             subgoals$0=map$4(_Kb_,subgoals),
             _Kc_=of_list(subgoals$0);
            return caml_js_from_array(_Kc_)}
          var _J2_=0,_J3_=fresh$2(_J2_);
          return function(t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,param)
                   {var
                     _J4_=caml_js_wrap_meth_callback(t32),
                     _J5_=caml_js_wrap_meth_callback(t31),
                     _J6_=caml_js_wrap_meth_callback(t30),
                     _J7_=caml_js_wrap_meth_callback(t29),
                     _J8_=caml_js_wrap_meth_callback(t28),
                     _J9_=caml_js_wrap_meth_callback(t27),
                     _J__=caml_js_wrap_meth_callback(t26),
                     _J$_=caml_js_wrap_meth_callback(t25),
                     _Ka_=caml_js_wrap_meth_callback(t24);
                    return {"proof":t22,
                            "handle":t23,
                            "subgoals":_Ka_,
                            "closed":_J$_,
                            "getmeta":_J__,
                            "setmeta":_J9_,
                            "actions":_J8_,
                            "pactions":_J7_,
                            "apply":_J6_,
                            "loaddb":_J5_,
                            "getdb":_J4_}}
                  (proof,
                   _J3_,
                   _J1_,
                   _J0_,
                   _JZ_,
                   _JY_,
                   _JX_,
                   _JW_,
                   _JV_,
                   _JU_,
                   _JT_,
                   _JS_)});
      var _vA_=[0,0,0,0];
      caml_update_dummy
       (js_subgoal,
        function(parent,handle)
         {function _Ew_
           (self,
            parent,
            handle,
            fvars,
            pvars,
            tvars,
            context,
            conclusion,
            intro,
            elim,
            ivariants,
            cut,
            addlemma,
            addlocal,
            addalias,
            move_hyp,
            generalize,
            getmeta,
            setmeta,
            toascii,
            tostring)
           {if(! _vA_[1])
             {var
               _I$_=create_table(_vd_),
               _Ja_=new_variable(_I$_,_vB_),
               _Jb_=get_method_labels(_I$_,_u5_),
               _Jc_=_Jb_[1],
               _Jd_=_Jb_[2],
               _Je_=_Jb_[3],
               _Jf_=_Jb_[4],
               _Jg_=_Jb_[5],
               _Jh_=_Jb_[6],
               _Ji_=_Jb_[7],
               _Jj_=_Jb_[8],
               _Jk_=_Jb_[9],
               _Jl_=_Jb_[10],
               _Jm_=_Jb_[11],
               _Jn_=_Jb_[12],
               _Jo_=_Jb_[13],
               _Jp_=_Jb_[14],
               _Jq_=_Jb_[15],
               _Jr_=_Jb_[16],
               _Js_=_Jb_[17],
               _Jt_=_Jb_[18],
               _Ju_=_Jb_[19],
               _Jv_=_Jb_[20],
               _Jw_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[2],env[1])},
               _Jx_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[3],env[1])},
               _Jy_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[4],env[1])},
               _Jz_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[5],env[1])},
               _JA_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[6],env[1])},
               _JB_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[7],env[1])},
               _JC_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[8],env[1])},
               _JD_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[9],env[1])},
               _JE_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[10],env[1])},
               _JF_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[11],env[1])},
               _JG_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[12],env[1])},
               _JH_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[13],env[1])},
               _JI_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[14],env[1])},
               _JJ_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[15],env[1])},
               _JK_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[16],env[1])},
               _JL_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[17],env[1])},
               _JM_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[18],env[1])},
               _JN_=
                function(self_2)
                 {var env=self_2[1 + _Ja_];return caml_call1(env[19],env[1])},
               _JO_=function(self_2){var env=self_2[1 + _Ja_];return env[20]};
              set_methods
               (_I$_,
                [0,
                 _Jh_,
                 function(self_2){var env=self_2[1 + _Ja_];return env[21]},
                 _Jl_,
                 _JO_,
                 _Jo_,
                 _JN_,
                 _Jg_,
                 _JM_,
                 _Jc_,
                 _JL_,
                 _Jr_,
                 _JK_,
                 _Js_,
                 _JJ_,
                 _Jk_,
                 _JI_,
                 _Jp_,
                 _JH_,
                 _Jj_,
                 _JG_,
                 _Jq_,
                 _JF_,
                 _Ju_,
                 _JE_,
                 _Jt_,
                 _JD_,
                 _Jv_,
                 _JC_,
                 _Ji_,
                 _JB_,
                 _Jn_,
                 _JA_,
                 _Jm_,
                 _Jz_,
                 _Jf_,
                 _Jy_,
                 _Je_,
                 _Jx_,
                 _Jd_,
                 _Jw_]);
              var
               _JP_=
                function(_JQ_)
                 {var _JR_=create_object_opt(0,_I$_);
                  _JR_[1 + _Ja_] = _JQ_;
                  return _JR_};
              init_class(_I$_);
              _vA_[1] = _JP_}
            return caml_call1
                    (_vA_[1],
                     [0,
                      self,
                      tostring,
                      toascii,
                      setmeta,
                      getmeta,
                      generalize,
                      move_hyp,
                      addalias,
                      addlocal,
                      addlemma,
                      cut,
                      ivariants,
                      elim,
                      intro,
                      conclusion,
                      context,
                      tvars,
                      pvars,
                      fvars,
                      handle,
                      parent])}
          function _Ex_(self)
           {function _IP_(x)
             {return caml_call1(caml_get_public_method(x,427267567,57),x)}
            function _IQ_(t89,param){return t89.context()}
            var
             _IR_=_IQ_(self,_IP_),
             _IS_=caml_js_to_array(_IR_),
             _IT_=to_list(_IS_);
            function _IU_(h)
             {function _I8_(x)
               {return caml_call1(caml_get_public_method(x,64642188,58),x)}
              function _I9_(t90,param){return t90.tostring()}
              var _I__=_I9_(h,_I8_);
              return caml_string_of_jsstring(_I__)}
            function _IV_(_I7_){return map$4(_IU_,_I7_)}
            var hyps=_IV_(_IT_);
            function _IW_(x)
             {return caml_call1(caml_get_public_method(x,-726448417,59),x)}
            function _IX_(t91,param){return t91.conclusion()}
            var _IY_=_IX_(self,_IW_);
            function _IZ_(c)
             {function _I4_(x)
               {return caml_call1(caml_get_public_method(x,64642188,60),x)}
              function _I5_(t92,param){return t92.tostring()}
              var _I6_=_I5_(c,_I4_);
              return caml_string_of_jsstring(_I6_)}
            var concl=_IZ_(_IY_);
            function _I0_(_I3_){return _I3_}
            var
             to_string=to_string$8(_vE_,_vD_,_vC_,_I0_),
             _I1_=caml_call1(to_string,hyps),
             _I2_=caml_call2(sprintf(_vF_),_I1_,concl);
            return caml_jsstring_of_string(_I2_)}
          function _Ey_(self)
           {function _HU_(x)
             {return caml_call1(caml_get_public_method(x,153638674,61),x)}
            function _HV_(t81,param){return t81.fvars()}
            var
             _HW_=_HV_(self,_HU_),
             _HX_=caml_js_to_array(_HW_),
             _HY_=to_list(_HX_);
            function _HZ_(_IO_){return caml_string_of_jsstring(_IO_)}
            function _H0_(_IN_){return map$4(_HZ_,_IN_)}
            var funs=_H0_(_HY_);
            function _H1_(x)
             {return caml_call1(caml_get_public_method(x,-886430692,62),x)}
            function _H2_(t82,param){return t82.pvars()}
            var
             _H3_=_H2_(self,_H1_),
             _H4_=caml_js_to_array(_H3_),
             _H5_=to_list(_H4_);
            function _H6_(_IM_){return caml_string_of_jsstring(_IM_)}
            function _H7_(_IL_){return map$4(_H6_,_IL_)}
            var props=_H7_(_H5_);
            function _H8_(x)
             {return caml_call1(caml_get_public_method(x,415528480,63),x)}
            function _H9_(t83,param){return t83.tvars()}
            var
             _H__=_H9_(self,_H8_),
             _H$_=caml_js_to_array(_H__),
             _Ia_=to_list(_H$_);
            function _Ib_(v)
             {function _II_(x)
               {return caml_call1(caml_get_public_method(x,-544987658,64),x)}
              function _IJ_(t84,param){return t84.toascii()}
              var _IK_=_IJ_(v,_II_);
              return caml_string_of_jsstring(_IK_)}
            function _Ic_(_IH_){return map$4(_Ib_,_IH_)}
            var vars=_Ic_(_Ia_);
            function _Id_(x)
             {return caml_call1(caml_get_public_method(x,427267567,65),x)}
            function _Ie_(t85,param){return t85.context()}
            var
             _If_=_Ie_(self,_Id_),
             _Ig_=caml_js_to_array(_If_),
             _Ih_=to_list(_Ig_);
            function _Ii_(h)
             {function _IE_(x)
               {return caml_call1(caml_get_public_method(x,-544987658,66),x)}
              function _IF_(t86,param){return t86.toascii()}
              var _IG_=_IF_(h,_IE_);
              return caml_string_of_jsstring(_IG_)}
            function _Ij_(_ID_){return map$4(_Ii_,_ID_)}
            var hyps=_Ij_(_Ih_);
            function _Ik_(x)
             {return caml_call1(caml_get_public_method(x,-726448417,67),x)}
            function _Il_(t87,param){return t87.conclusion()}
            var _Im_=_Il_(self,_Ik_);
            function _In_(c)
             {function _IA_(x)
               {return caml_call1(caml_get_public_method(x,-544987658,68),x)}
              function _IB_(t88,param){return t88.toascii()}
              var _IC_=_IB_(c,_IA_);
              return caml_string_of_jsstring(_IC_)}
            var concl=_In_(_Im_);
            function _Io_(_Iz_){return _Iz_}
            var to_string=to_string$8(_vI_,_vH_,_vG_,_Io_);
            function _Ip_(s,l)
             {if(is_empty$1(s))
               return is_empty$2(l)?_vK_:caml_call1(to_string,l);
              if(is_empty$2(l))return s;
              var _Iy_=caml_call1(to_string,l);
              return cat(s,cat(_vL_,_Iy_))}
            function _Iq_(_Iw_,_Ix_){return fold(_Ip_,_Iw_,_Ix_)}
            function comma(_Iv_){return _Iq_(_vJ_,_Iv_)}
            var
             _Ir_=caml_call1(to_string,hyps),
             _Is_=[0,funs,[0,vars,[0,props,0]]],
             _It_=comma(_Is_),
             _Iu_=caml_call3(sprintf(_vM_),_It_,_Ir_,concl);
            return caml_jsstring_of_string(_Iu_)}
          function _Ez_(self,meta)
           {var _HO_=to_option(meta);
            function _HP_(x)
             {return caml_call1(caml_get_public_method(x,939361192,69),x)}
            function _HQ_(t79,param){return t79.handle}
            var _HR_=_HQ_(self,_HP_);
            function _HS_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,70),x)}
            function _HT_(t78,param){return t78.proof}
            return set_meta(_HT_(parent,_HS_),_HR_,_HO_)}
          function _EA_(self)
           {function _HI_(x)
             {return caml_call1(caml_get_public_method(x,939361192,71),x)}
            function _HJ_(t77,param){return t77.handle}
            var _HK_=_HJ_(self,_HI_);
            function _HL_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,72),x)}
            function _HM_(t76,param){return t76.proof}
            var _HN_=_HM_(parent,_HL_);
            return option(get_meta(_HN_,_HK_))}
          function _EB_(self,hid)
           {function doit(param)
             {function _HD_(x)
               {return caml_call1(caml_get_public_method(x,939361192,73),x)}
              function _HE_(t74,param){return t74.handle}
              var _HF_=_HE_(self,_HD_);
              function _HG_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,74),x)}
              function _HH_(t73,param){return t73.proof}
              return generalize(hid,[0,_HH_(parent,_HG_),_HF_])}
            var _HA_=0;
            function _HB_(_HC_){return symbol$5(doit,_HC_)}
            return caml_call1(js_proof_engine,_HB_(_HA_))}
          function _EC_(self,from,before)
           {function doit(param)
             {function _Hu_(x)
               {return caml_call1(caml_get_public_method(x,939361192,75),x)}
              function _Hv_(t70,param){return t70.handle}
              var _Hw_=_Hv_(self,_Hu_);
              function _Hx_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,76),x)}
              function _Hy_(t69,param){return t69.proof}
              var _Hz_=[0,_Hy_(parent,_Hx_),_Hw_];
              return move$0(from,to_option(before),_Hz_)}
            var _Hs_=0;
            return function(_Ht_){return symbol$5(doit,_Ht_)}(_Hs_)}
          function _ED_(self,expr)
           {function doit(param)
             {function _Hc_(x)
               {return caml_call1(caml_get_public_method(x,939361192,77),x)}
              function _Hd_(t65,param){return t65.handle}
              var _He_=_Hd_(self,_Hc_);
              function _Hf_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,78),x)}
              function _Hg_(t64,param){return t64.proof}
              var
               _Hh_=_Hg_(parent,_Hf_),
               goal=byid$1(_Hh_,_He_),
               _Hi_=caml_string_of_jsstring(expr),
               expr$0=trim(_Hi_),
               _Hj_=from_string$1(expr$0),
               match=parse_nexpr(_Hj_),
               expr$1=match[2],
               name=match[1],
               _Hk_=goal[1],
               match$0=echeck(_Hk_,expr$1),
               ty=match$0[2],
               expr$2=match$0[1];
              function _Hl_(x)
               {return caml_call1(caml_get_public_method(x,939361192,79),x)}
              function _Hm_(t67,param){return t67.handle}
              var _Hn_=_Hm_(self,_Hl_);
              function _Ho_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,80),x)}
              function _Hp_(t66,param){return t66.proof}
              var _Hq_=[0,_Hp_(parent,_Ho_),_Hn_],_Hr_=[0,expr$2];
              return add_local([0,unloc(name),ty,_Hr_],_Hq_)}
            var _G$_=0;
            function _Ha_(_Hb_){return symbol$5(doit,_Hb_)}
            return caml_call1(js_proof_engine,_Ha_(_G$_))}
          function _EE_(self,name,expr)
           {function doit(param)
             {function _GV_(x)
               {return caml_call1(caml_get_public_method(x,939361192,81),x)}
              function _GW_(t59,param){return t59.handle}
              var _GX_=_GW_(self,_GV_);
              function _GY_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,82),x)}
              function _GZ_(t58,param){return t58.proof}
              var
               _G0_=_GZ_(parent,_GY_),
               goal=byid$1(_G0_,_GX_),
               _G1_=caml_string_of_jsstring(expr),
               expr$0=trim(_G1_),
               _G2_=from_string$1(expr$0),
               expr$1=parse_expr(_G2_),
               _G3_=goal[1],
               match=echeck(_G3_,expr$1),
               ty=match[2],
               expr$2=match[1];
              function _G4_(x)
               {return caml_call1(caml_get_public_method(x,939361192,83),x)}
              function _G5_(t61,param){return t61.handle}
              var _G6_=_G5_(self,_G4_);
              function _G7_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,84),x)}
              function _G8_(t60,param){return t60.proof}
              var _G9_=[0,_G8_(parent,_G7_),_G6_],_G__=[0,expr$2];
              return add_local([0,caml_string_of_jsstring(name),ty,_G__],_G9_)}
            var _GS_=0;
            function _GT_(_GU_){return symbol$5(doit,_GU_)}
            return caml_call1(js_proof_engine,_GT_(_GS_))}
          function _EF_(self,name)
           {function doit(param)
             {var name$0=caml_string_of_jsstring(name);
              function _GJ_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,85),x)}
              function _GK_(t54,param){return t54.proof}
              var
               _GL_=_GK_(parent,_GJ_),
               _GM_=db(_GL_),
               form=find$5(_GM_,name$0);
              function _GN_(x)
               {return caml_call1(caml_get_public_method(x,939361192,86),x)}
              function _GO_(t56,param){return t56.handle}
              var _GP_=_GO_(self,_GN_);
              function _GQ_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,87),x)}
              function _GR_(t55,param){return t55.proof}
              return assume(form,[0,_GR_(parent,_GQ_),_GP_])}
            var _GG_=0;
            function _GH_(_GI_){return symbol$5(doit,_GI_)}
            return caml_call1(js_proof_engine,_GH_(_GG_))}
          function _EG_(self,form)
           {function doit(param)
             {function _Gs_(x)
               {return caml_call1(caml_get_public_method(x,939361192,88),x)}
              function _Gt_(t50,param){return t50.handle}
              var _Gu_=_Gt_(self,_Gs_);
              function _Gv_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,89),x)}
              function _Gw_(t49,param){return t49.proof}
              var
               _Gx_=_Gw_(parent,_Gv_),
               goal=byid$1(_Gx_,_Gu_),
               _Gy_=caml_string_of_jsstring(form),
               form$0=trim(_Gy_),
               _Gz_=from_string$1(form$0),
               form$1=parse_form(_Gz_),
               _GA_=goal[1],
               form$2=check$1(_GA_,form$1);
              function _GB_(x)
               {return caml_call1(caml_get_public_method(x,939361192,90),x)}
              function _GC_(t52,param){return t52.handle}
              var _GD_=_GC_(self,_GB_);
              function _GE_(x)
               {return caml_call1(caml_get_public_method(x,-930093436,91),x)}
              function _GF_(t51,param){return t51.proof}
              return cut(form$2,[0,_GF_(parent,_GE_),_GD_])}
            var _Gp_=0;
            function _Gq_(_Gr_){return symbol$5(doit,_Gr_)}
            return caml_call1(js_proof_engine,_Gq_(_Gp_))}
          function _EH_(self)
           {function _Gh_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,92),x)}
            function _Gi_(t48,param){return t48.proof}
            var _Gj_=[0,_Gi_(parent,_Gh_),handle];
            function _Gk_(_Go_){return symbol$5(ivariants,_Go_)}
            var aout=_Gk_(_Gj_);
            function _Gl_(_Gn_){return caml_jsstring_of_string(_Gn_)}
            var _Gm_=map$4(_Gl_,aout),aout$0=of_list(_Gm_);
            return caml_js_from_array(aout$0)}
          function _EI_(self,target)
           {function _F__(x)
             {return caml_call1(caml_get_public_method(x,-930093436,93),x)}
            function _F$_(t46,param){return t46.proof}
            var data=[0,target,[0,_F$_(parent,_F__),handle]];
            function _Ga_(eta)
             {var _Gf_=0;return function(_Gg_){return arg$0(_Gf_,eta,_Gg_)}}
            function _Gb_(_Ge_){return curry(_Ga_,_Ge_)}
            function _Gc_(_Gd_){return symbol$5(_Gb_,_Gd_)}
            return caml_call1(js_proof_engine,_Gc_(data))}
          function _EJ_(self,variant)
           {function _F2_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,94),x)}
            function _F3_(t44,param){return t44.proof}
            var _F4_=[0,_F3_(parent,_F2_),handle],_F5_=[0,variant];
            function _F6_(_F9_){return intro(_F5_,_F9_)}
            function _F7_(_F8_){return symbol$5(_F6_,_F8_)}
            return caml_call1(js_proof_engine,_F7_(_F4_))}
          function _EK_(self)
           {function _FS_(x)
             {return caml_call1(caml_get_public_method(x,939361192,95),x)}
            function _FT_(t42,param){return t42.handle}
            var _FU_=_FT_(self,_FS_);
            function _FV_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,96),x)}
            function _FW_(t41,param){return t41.proof}
            var
             _FX_=_FW_(parent,_FV_),
             goal=byid$1(_FX_,_FU_),
             _FY_=goal[3],
             _FZ_=67;
            function _F0_(x)
             {return caml_call1(caml_get_public_method(x,939361192,97),x)}
            function _F1_(t43,param){return t43.handle}
            return caml_call2(js_form,[0,_F1_(self,_F0_),_FZ_],_FY_)}
          function _EL_(self)
           {function _FH_(x)
             {return caml_call1(caml_get_public_method(x,939361192,98),x)}
            function _FI_(t40,param){return t40.handle}
            var _FJ_=_FI_(self,_FH_);
            function _FK_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,99),x)}
            function _FL_(t39,param){return t39.proof}
            var
             _FM_=_FL_(parent,_FK_),
             goal=byid$1(_FM_,_FJ_),
             _FN_=goal[2],
             _FO_=to_list$1(_FN_),
             hyps=rev(_FO_);
            function _FP_(i,x){return caml_call2(js_hyps,self,[0,i,x])}
            var _FQ_=mapi(_FP_,hyps),_FR_=of_list(_FQ_);
            return caml_js_from_array(_FR_)}
          function _EM_(self)
           {function _Fy_(x)
             {return caml_call1(caml_get_public_method(x,939361192,100),x)}
            function _Fz_(t38,param){return t38.handle}
            var _FA_=_Fz_(self,_Fy_);
            function _FB_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,101),x)}
            function _FC_(t37,param){return t37.proof}
            var
             _FD_=_FC_(parent,_FB_),
             goal=byid$1(_FD_,_FA_),
             _FE_=goal[1],
             tvars=to_list$0(_FE_);
            function _FF_(i,param)
             {var b=param[3],x=param[2],id=param[1];
              return caml_call2(js_tvar,self,[0,i,[0,ofint(id),x,b]])}
            var aout=mapi(_FF_,tvars),_FG_=of_list(aout);
            return caml_js_from_array(_FG_)}
          function _EN_(self)
           {function _Fl_(x)
             {return caml_call1(caml_get_public_method(x,939361192,102),x)}
            function _Fm_(t36,param){return t36.handle}
            var _Fn_=_Fm_(self,_Fl_);
            function _Fo_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,103),x)}
            function _Fp_(t35,param){return t35.proof}
            var
             _Fq_=_Fp_(parent,_Fo_),
             goal=byid$1(_Fq_,_Fn_),
             _Fr_=goal[1],
             _Fs_=all(_Fr_),
             _Ft_=bindings(_Fs_),
             pvars=fst(_Ft_);
            function _Fu_(_Fx_){return caml_jsstring_of_string(_Fx_)}
            var _Fv_=map$4(_Fu_,pvars),_Fw_=of_list(_Fv_);
            return caml_js_from_array(_Fw_)}
          function _EO_(self)
           {function _E7_(x)
             {return caml_call1(caml_get_public_method(x,939361192,104),x)}
            function _E8_(t34,param){return t34.handle}
            var _E9_=_E8_(self,_E7_);
            function _E__(x)
             {return caml_call1(caml_get_public_method(x,-930093436,105),x)}
            function _E$_(t33,param){return t33.proof}
            var
             _Fa_=_E$_(parent,_E__),
             goal=byid$1(_Fa_,_E9_),
             _Fb_=goal[1],
             _Fc_=all$0(_Fb_),
             _Fd_=bindings(_Fc_);
            function _Fe_(param)
             {var
               match=param[2],
               res=match[2],
               ar=match[1],
               f=param[1],
               ar$0=caml_call1(to_string$8(_vP_,_vO_,_vN_,t_tostring),ar),
               res$0=t_tostring(res);
              return caml_call3(sprintf(_vQ_),f,ar$0,res$0)}
            function _Ff_(_Fk_){return map$4(_Fe_,_Fk_)}
            var fvars=_Ff_(_Fd_);
            function _Fg_(_Fj_){return caml_jsstring_of_string(_Fj_)}
            var _Fh_=map$4(_Fg_,fvars),_Fi_=of_list(_Fh_);
            return caml_js_from_array(_Fi_)}
          return function
                   (t93,
                    t94,
                    t95,
                    t96,
                    t97,
                    t98,
                    t99,
                    t100,
                    t101,
                    t102,
                    t103,
                    t104,
                    t105,
                    t106,
                    t107,
                    t108,
                    t109,
                    t110,
                    t111,
                    t112,
                    param)
                   {var
                     _EP_=caml_js_wrap_meth_callback(t112),
                     _EQ_=caml_js_wrap_meth_callback(t111),
                     _ER_=caml_js_wrap_meth_callback(t110),
                     _ES_=caml_js_wrap_meth_callback(t109),
                     _ET_=caml_js_wrap_meth_callback(t108),
                     _EU_=caml_js_wrap_meth_callback(t107),
                     _EV_=caml_js_wrap_meth_callback(t106),
                     _EW_=caml_js_wrap_meth_callback(t105),
                     _EX_=caml_js_wrap_meth_callback(t104),
                     _EY_=caml_js_wrap_meth_callback(t103),
                     _EZ_=caml_js_wrap_meth_callback(t102),
                     _E0_=caml_js_wrap_meth_callback(t101),
                     _E1_=caml_js_wrap_meth_callback(t100),
                     _E2_=caml_js_wrap_meth_callback(t99),
                     _E3_=caml_js_wrap_meth_callback(t98),
                     _E4_=caml_js_wrap_meth_callback(t97),
                     _E5_=caml_js_wrap_meth_callback(t96),
                     _E6_=caml_js_wrap_meth_callback(t95);
                    return {"parent":t93,
                            "handle":t94,
                            "fvars":_E6_,
                            "pvars":_E5_,
                            "tvars":_E4_,
                            "context":_E3_,
                            "conclusion":_E2_,
                            "intro":_E1_,
                            "elim":_E0_,
                            "ivariants":_EZ_,
                            "cut":_EY_,
                            "addlemma":_EX_,
                            "addlocal":_EW_,
                            "addalias":_EV_,
                            "move":_EU_,
                            "generalize":_ET_,
                            "getmeta":_ES_,
                            "setmeta":_ER_,
                            "toascii":_EQ_,
                            "tostring":_EP_}}
                  (parent,
                   handle,
                   _EO_,
                   _EN_,
                   _EM_,
                   _EL_,
                   _EK_,
                   _EJ_,
                   _EI_,
                   _EH_,
                   _EG_,
                   _EF_,
                   _EE_,
                   _ED_,
                   _EC_,
                   _EB_,
                   _EA_,
                   _Ez_,
                   _Ey_,
                   _Ex_,
                   _Ew_)});
      var _vR_=[0,0,0,0];
      caml_update_dummy
       (js_hyps,
        function(parent,param)
         {var match=param[2],hyp=match[2],handle=match[1],i=param[1];
          function _C7_
           (self,
            parent,
            handle,
            phandle,
            position,
            fresh,
            form,
            proof,
            html,
            mathml,
            tostring,
            toascii,
            getmeta,
            setmeta)
           {if(! _vR_[1])
             {var
               _D3_=create_table(shared$1),
               _D4_=new_variable(_D3_,_vS_),
               _D5_=get_method_labels(_D3_,_u$_),
               _D6_=_D5_[1],
               _D7_=_D5_[2],
               _D8_=_D5_[3],
               _D9_=_D5_[4],
               _D__=_D5_[5],
               _D$_=_D5_[6],
               _Ea_=_D5_[7],
               _Eb_=_D5_[8],
               _Ec_=_D5_[9],
               _Ed_=_D5_[10],
               _Ee_=_D5_[11],
               _Ef_=_D5_[12],
               _Eg_=_D5_[13],
               _Eh_=
                function(self_3)
                 {var env=self_3[1 + _D4_];return caml_call1(env[2],env[1])},
               _Ei_=
                function(self_3)
                 {var env=self_3[1 + _D4_];return caml_call1(env[3],env[1])},
               _Ej_=
                function(self_3)
                 {var env=self_3[1 + _D4_];return caml_call1(env[4],env[1])},
               _Ek_=
                function(self_3)
                 {var env=self_3[1 + _D4_];return caml_call1(env[5],env[1])},
               _El_=
                function(self_3)
                 {var env=self_3[1 + _D4_];return caml_call1(env[6],env[1])},
               _Em_=
                function(self_3)
                 {var env=self_3[1 + _D4_];return caml_call1(env[7],env[1])},
               _En_=function(self_3){var env=self_3[1 + _D4_];return env[8]},
               _Eo_=function(self_3){var env=self_3[1 + _D4_];return env[9]},
               _Ep_=function(self_3){var env=self_3[1 + _D4_];return env[10]},
               _Eq_=function(self_3){var env=self_3[1 + _D4_];return env[11]},
               _Er_=function(self_3){var env=self_3[1 + _D4_];return env[12]},
               _Es_=function(self_3){var env=self_3[1 + _D4_];return env[13]};
              set_methods
               (_D3_,
                [0,
                 _Ea_,
                 function(self_3){var env=self_3[1 + _D4_];return env[14]},
                 _Ed_,
                 _Es_,
                 _D$_,
                 _Er_,
                 _D__,
                 _Eq_,
                 _Ef_,
                 _Ep_,
                 _Eg_,
                 _Eo_,
                 _D9_,
                 _En_,
                 _Ec_,
                 _Em_,
                 _Eb_,
                 _El_,
                 _D6_,
                 _Ek_,
                 _D7_,
                 _Ej_,
                 _Ee_,
                 _Ei_,
                 _D8_,
                 _Eh_]);
              var
               _Et_=
                function(_Eu_)
                 {var _Ev_=create_object_opt(0,_D3_);
                  _Ev_[1 + _D4_] = _Eu_;
                  return _Ev_};
              init_class(_D3_);
              _vR_[1] = _Et_}
            return caml_call1
                    (_vR_[1],
                     [0,
                      self,
                      setmeta,
                      getmeta,
                      toascii,
                      tostring,
                      mathml,
                      html,
                      proof,
                      form,
                      fresh,
                      position,
                      phandle,
                      handle,
                      parent])}
          function _C8_(self,meta)
           {var _DU_=to_option(meta);
            function _DV_(x)
             {return caml_call1(caml_get_public_method(x,939361192,106),x)}
            function _DW_(t128,param){return t128.handle}
            var _DX_=_DW_(self,_DV_);
            function _DY_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,107),x)}
            function _DZ_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,108),x)}
            function _D0_(t126,param){return t126.proof}
            var _D1_=_D0_(self,_DZ_);
            function _D2_(t127,param){return t127.proof}
            return set_meta(_D2_(_D1_,_DY_),_DX_,_DU_)}
          function _C9_(self)
           {function _DL_(x)
             {return caml_call1(caml_get_public_method(x,939361192,109),x)}
            function _DM_(t125,param){return t125.handle}
            var _DN_=_DM_(self,_DL_);
            function _DO_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,110),x)}
            function _DP_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,111),x)}
            function _DQ_(t123,param){return t123.proof}
            var _DR_=_DQ_(self,_DP_);
            function _DS_(t124,param){return t124.proof}
            var _DT_=_DS_(_DR_,_DO_);
            return option(get_meta(_DT_,_DN_))}
          function _C__(self)
           {function _DH_(x)
             {return caml_call1(caml_get_public_method(x,-544987658,112),x)}
            function _DI_(x)
             {return caml_call1(caml_get_public_method(x,-1010802364,113),x)}
            function _DJ_(t121,param){return t121.form}
            var _DK_=_DJ_(self,_DI_);
            return function(t122,param){return t122.toascii()}(_DK_,_DH_)}
          function _C$_(self)
           {function _DD_(x)
             {return caml_call1(caml_get_public_method(x,64642188,114),x)}
            function _DE_(x)
             {return caml_call1(caml_get_public_method(x,-1010802364,115),x)}
            function _DF_(t119,param){return t119.form}
            var _DG_=_DF_(self,_DE_);
            return function(t120,param){return t120.tostring()}(_DG_,_DD_)}
          function _Da_(self)
           {function _Dz_(x)
             {return caml_call1(caml_get_public_method(x,1002480423,116),x)}
            function _DA_(x)
             {return caml_call1(caml_get_public_method(x,-1010802364,117),x)}
            function _DB_(t117,param){return t117.form}
            var _DC_=_DB_(self,_DA_);
            return function(t118,param){return t118.mathml()}(_DC_,_Dz_)}
          function _Db_(self)
           {function _Dv_(x)
             {return caml_call1(caml_get_public_method(x,-988375701,118),x)}
            function _Dw_(x)
             {return caml_call1(caml_get_public_method(x,-1010802364,119),x)}
            function _Dx_(t115,param){return t115.form}
            var _Dy_=_Dx_(self,_Dw_);
            return function(t116,param){return t116.html()}(_Dy_,_Dv_)}
          function _Dc_(x)
           {return caml_call1(caml_get_public_method(x,-310508246,120),x)}
          function _Dd_(t114,param){return t114.parent}
          var _De_=_Dd_(parent,_Dc_),_Df_=hyp[3],_Dg_=[0,72,handle];
          function _Dh_(x)
           {return caml_call1(caml_get_public_method(x,939361192,121),x)}
          function _Di_(t113,param){return t113.handle}
          var
           _Dj_=[0,_Di_(parent,_Dh_),_Dg_],
           _Dk_=caml_call2(js_form,_Dj_,_Df_),
           _Dl_=hyp[2] <= 1?1:0,
           _Dm_=! ! _Dl_,
           _Dn_=hyp[1],
           _Do_=option(_Dn_);
          return function
                   (t130,
                    t131,
                    t132,
                    t133,
                    t134,
                    t135,
                    t136,
                    t137,
                    t138,
                    t139,
                    t140,
                    t141,
                    t142,
                    param)
                   {var
                     _Dp_=caml_js_wrap_meth_callback(t142),
                     _Dq_=caml_js_wrap_meth_callback(t141),
                     _Dr_=caml_js_wrap_meth_callback(t140),
                     _Ds_=caml_js_wrap_meth_callback(t139),
                     _Dt_=caml_js_wrap_meth_callback(t138),
                     _Du_=caml_js_wrap_meth_callback(t137);
                    return {"parent":t130,
                            "handle":t131,
                            "phandle":t132,
                            "position":t133,
                            "fresh":t134,
                            "form":t135,
                            "proof":t136,
                            "html":_Du_,
                            "mathml":_Dt_,
                            "tostring":_Ds_,
                            "toascii":_Dr_,
                            "getmeta":_Dq_,
                            "setmeta":_Dp_}}
                  (parent,
                   handle,
                   _Do_,
                   i,
                   _Dm_,
                   _Dk_,
                   _De_,
                   _Db_,
                   _Da_,
                   _C$_,
                   _C__,
                   _C9_,
                   _C8_,
                   _C7_)});
      var _vT_=[0,0,0,0];
      caml_update_dummy
       (js_tvar,
        function(parent,param)
         {var
           _zU_=param[2],
           match=_zU_[3],
           b=match[2],
           ty=match[1],
           x=_zU_[2],
           handle=_zU_[1],
           i=param[1];
          function _zV_
           (self,
            parent,
            handle,
            position,
            name,
            type,
            body,
            proof,
            prefix,
            idhead,
            idbody,
            html,
            mathml,
            tostring,
            toascii,
            getmeta,
            setmeta)
           {if(! _vT_[1])
             {var
               _Cw_=create_table(_va_),
               _Cx_=new_variable(_Cw_,_vU_),
               _Cy_=get_method_labels(_Cw_,_u3_),
               _Cz_=_Cy_[1],
               _CA_=_Cy_[2],
               _CB_=_Cy_[3],
               _CC_=_Cy_[4],
               _CD_=_Cy_[5],
               _CE_=_Cy_[6],
               _CF_=_Cy_[7],
               _CG_=_Cy_[8],
               _CH_=_Cy_[9],
               _CI_=_Cy_[10],
               _CJ_=_Cy_[11],
               _CK_=_Cy_[12],
               _CL_=_Cy_[13],
               _CM_=_Cy_[14],
               _CN_=_Cy_[15],
               _CO_=_Cy_[16],
               _CP_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[2],env[1])},
               _CQ_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[3],env[1])},
               _CR_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[4],env[1])},
               _CS_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[5],env[1])},
               _CT_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[6],env[1])},
               _CU_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[7],env[1])},
               _CV_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[8],env[1])},
               _CW_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[9],env[1])},
               _CX_=
                function(self_4)
                 {var env=self_4[1 + _Cx_];return caml_call1(env[10],env[1])},
               _CY_=function(self_4){var env=self_4[1 + _Cx_];return env[11]},
               _CZ_=function(self_4){var env=self_4[1 + _Cx_];return env[12]},
               _C0_=function(self_4){var env=self_4[1 + _Cx_];return env[13]},
               _C1_=function(self_4){var env=self_4[1 + _Cx_];return env[14]},
               _C2_=function(self_4){var env=self_4[1 + _Cx_];return env[15]},
               _C3_=function(self_4){var env=self_4[1 + _Cx_];return env[16]};
              set_methods
               (_Cw_,
                [0,
                 _CG_,
                 function(self_4){var env=self_4[1 + _Cx_];return env[17]},
                 _CM_,
                 _C3_,
                 _CF_,
                 _C2_,
                 _CH_,
                 _C1_,
                 _Cz_,
                 _C0_,
                 _CO_,
                 _CZ_,
                 _CD_,
                 _CY_,
                 _CE_,
                 _CX_,
                 _CJ_,
                 _CW_,
                 _CK_,
                 _CV_,
                 _CL_,
                 _CU_,
                 _CI_,
                 _CT_,
                 _CA_,
                 _CS_,
                 _CB_,
                 _CR_,
                 _CN_,
                 _CQ_,
                 _CC_,
                 _CP_]);
              var
               _C4_=
                function(_C5_)
                 {var _C6_=create_object_opt(0,_Cw_);
                  _C6_[1 + _Cx_] = _C5_;
                  return _C6_};
              init_class(_Cw_);
              _vT_[1] = _C4_}
            return caml_call1
                    (_vT_[1],
                     [0,
                      self,
                      setmeta,
                      getmeta,
                      toascii,
                      tostring,
                      mathml,
                      html,
                      idbody,
                      idhead,
                      prefix,
                      proof,
                      body,
                      type,
                      name,
                      position,
                      handle,
                      parent])}
          function _zW_(self,meta)
           {var _Cn_=to_option(meta);
            function _Co_(x)
             {return caml_call1(caml_get_public_method(x,939361192,122),x)}
            function _Cp_(t161,param){return t161.handle}
            var _Cq_=_Cp_(self,_Co_);
            function _Cr_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,123),x)}
            function _Cs_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,124),x)}
            function _Ct_(t159,param){return t159.proof}
            var _Cu_=_Ct_(self,_Cs_);
            function _Cv_(t160,param){return t160.proof}
            return set_meta(_Cv_(_Cu_,_Cr_),_Cq_,_Cn_)}
          function _zX_(self)
           {function _Ce_(x)
             {return caml_call1(caml_get_public_method(x,939361192,125),x)}
            function _Cf_(t158,param){return t158.handle}
            var _Cg_=_Cf_(self,_Ce_);
            function _Ch_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,126),x)}
            function _Ci_(x)
             {return caml_call1(caml_get_public_method(x,-930093436,127),x)}
            function _Cj_(t156,param){return t156.proof}
            var _Ck_=_Cj_(self,_Ci_);
            function _Cl_(t157,param){return t157.proof}
            var _Cm_=_Cl_(_Ck_,_Ch_);
            return option(get_meta(_Cm_,_Cg_))}
          function _zY_(self)
           {if(b)
             {var
               b$0=b[1],
               _B8_=e_toascii(b$0),
               _B9_=[0,x],
               _B__=e_tostring(_B9_),
               _B$_=caml_call2(sprintf$0(_vV_),_B__,_B8_);
              return caml_jsstring_of_string(_B$_)}
            var
             _Ca_=t_toascii(ty),
             _Cb_=[0,x],
             _Cc_=e_tostring(_Cb_),
             _Cd_=caml_call2(sprintf$0(_vW_),_Cc_,_Ca_);
            return caml_jsstring_of_string(_Cd_)}
          function _zZ_(self)
           {if(b)
             {var
               b$0=b[1],
               _BZ_=e_tostring(b$0),
               _B0_=t_tostring(ty),
               _B1_=[0,x],
               _B2_=e_tostring(_B1_),
               _B3_=caml_call3(sprintf$0(_vX_),_B2_,_B0_,_BZ_);
              return caml_jsstring_of_string(_B3_)}
            var
             _B4_=t_tostring(ty),
             _B5_=[0,x],
             _B6_=e_tostring(_B5_),
             _B7_=caml_call2(sprintf$0(_vY_),_B6_,_B4_);
            return caml_jsstring_of_string(_B7_)}
          function _z0_(self)
           {var _Bp_=0;
            if(b)
             var
              b$0=b[1],
              _Bq_=0,
              _Br_=
               function(x)
                {return caml_call1(caml_get_public_method(x,-794402819,128),x)},
              _Bs_=function(t155,param){return t155.idbody()},
              _Bt_=[0,[0,_Bs_(self,_Br_)]],
              _Bu_=[0,e_tomathml(_Bt_,b$0),_Bq_],
              _Bv_=0,
              _Bw_=[0,mo(_vZ_),_Bv_],
              _Bx_=append(_Bw_,_Bu_);
            else
             var _Bx_=0;
            var
             _By_=0,
             _Bz_=0,
             _BA_=[0,t_tomathml(ty),_Bz_],
             _BB_=0,
             _BC_=[0,mo(_v0_),_BB_],
             _BD_=append(_BC_,_BA_),
             _BE_=0,
             _BF_=[0,x],
             _BG_=e_tostring(_BF_),
             _BH_=of_latin1(_BG_),
             _BI_=[0,mi(_BH_),_BE_],
             _BJ_=append(_BI_,_BD_),
             _BK_=0;
            function _BL_(x)
             {return caml_call1(caml_get_public_method(x,-728363397,129),x)}
            function _BM_(t154,param){return t154.idhead()}
            var
             _BN_=_BM_(self,_BL_),
             _BO_=[0,[0,string_attrib(_v1_,_BN_),_BK_]],
             _BP_=[0,caml_call1(row(_BO_),_BJ_),_By_],
             _BQ_=append(_BP_,_Bx_),
             _BR_=0,
             _BS_=[0,caml_call1(row(_BR_),_BQ_),_Bp_],
             _BT_=0,
             dt=caml_call1(math(_BT_),_BS_),
             _BU_=0,
             _BV_=0,
             _BW_=0,
             _BX_=caml_call3(pp$1,_BW_,_BV_,_BU_),
             _BY_=caml_call2(asprintf(_v2_),_BX_,dt);
            return caml_jsstring_of_string(_BY_)}
          function _z1_(self)
           {var _AC_=0;
            if(b)
             var
              b$0=b[1],
              _AD_=0,
              _AE_=
               function(x)
                {return caml_call1(caml_get_public_method(x,-794402819,130),x)},
              _AF_=function(t153,param){return t153.idbody()},
              _AG_=[0,[0,_AF_(self,_AE_)]],
              _AH_=[0,e_tohtml(_AG_,b$0),_AD_],
              _AI_=0,
              _AJ_=0,
              _AK_=[0,pcdata(_v3_),_AJ_],
              _AL_=0,
              _AM_=[0,caml_call1(span(_AL_),_AK_),_AI_],
              _AN_=0,
              _AO_=0,
              _AP_=spaced$0(_AO_,_AN_,_AM_),
              _AQ_=append(_AP_,_AH_);
            else
             var _AQ_=0;
            var
             _AR_=0,
             _AS_=0,
             _AT_=[0,t_tohtml(ty),_AS_],
             _AU_=0,
             _AV_=0,
             _AW_=[0,pcdata(_v4_),_AV_],
             _AX_=0,
             _AY_=[0,caml_call1(span(_AX_),_AW_),_AU_],
             _AZ_=0,
             _A0_=0,
             _A1_=spaced$0(_A0_,_AZ_,_AY_),
             _A2_=append(_A1_,_AT_),
             _A3_=0,
             _A4_=0,
             _A5_=[0,x],
             _A6_=e_tostring(_A5_),
             _A7_=of_latin1(_A6_),
             _A8_=[0,pcdata(_A7_),_A4_],
             _A9_=0,
             _A__=[0,caml_call1(span(_A9_),_A8_),_A3_],
             _A$_=append(_A__,_A2_),
             _Ba_=0;
            function _Bb_(x)
             {return caml_call1(caml_get_public_method(x,-728363397,131),x)}
            function _Bc_(t152,param){return t152.idhead()}
            var
             _Bd_=_Bc_(self,_Bb_),
             _Be_=[0,[0,string_attrib(_v5_,_Bd_),_Ba_]],
             _Bf_=[0,caml_call1(span(_Be_),_A$_),_AR_],
             _Bg_=append(_Bf_,_AQ_),
             _Bh_=0,
             _Bi_=[0,caml_call1(span(_Bh_),_Bg_),_AC_],
             _Bj_=0,
             dt=caml_call1(span(_Bj_),_Bi_),
             _Bk_=0,
             _Bl_=0,
             _Bm_=0,
             _Bn_=caml_call3(pp$1,_Bm_,_Bl_,_Bk_),
             _Bo_=caml_call2(asprintf(_v6_),_Bn_,dt);
            return caml_jsstring_of_string(_Bo_)}
          function _z2_(self)
           {function _AA_(x)
             {return caml_call1(caml_get_public_method(x,783735186,132),x)}
            var _AB_=1;
            return function(t151,t150,param){return t151.prefix(t150)}
                    (self,_AB_,_AA_)}
          function _z3_(self)
           {function _Ay_(x)
             {return caml_call1(caml_get_public_method(x,783735186,133),x)}
            var _Az_=0;
            return function(t149,t148,param){return t149.prefix(t148)}
                    (self,_Az_,_Ay_)}
          function _z4_(self,b)
           {var _Al_=b?_v7_:_v$_;
            function _Am_(x)
             {return caml_call1(caml_get_public_method(x,939361192,134),x)}
            function _An_(t146,param){return t146.handle}
            var _Ao_=_An_(self,_Am_),_Ap_=toint(_Ao_),_Aq_=b?_v8_:_v__;
            function _Ar_(x)
             {return caml_call1(caml_get_public_method(x,939361192,135),x)}
            function _As_(x)
             {return caml_call1(caml_get_public_method(x,-310508246,136),x)}
            function _At_(t144,param){return t144.parent}
            var _Au_=_At_(self,_As_);
            function _Av_(t145,param){return t145.handle}
            var _Aw_=_Av_(_Au_,_Ar_),_Ax_=toint(_Aw_);
            return caml_call4(sprintf$0(_v9_),_Ax_,_Aq_,_Ap_,_Al_)}
          function _z5_(x)
           {return caml_call1(caml_get_public_method(x,-310508246,137),x)}
          function _z6_(t143,param){return t143.parent}
          var
           _z7_=_z6_(parent,_z5_),
           _z8_=map$3(js_expr,b),
           _z9_=option(_z8_),
           _z__=caml_call1(js_type,ty),
           _z$_=[0,x],
           _Aa_=e_tostring(_z$_),
           _Ab_=caml_jsstring_of_string(_Aa_);
          return function
                   (t163,
                    t164,
                    t165,
                    t166,
                    t167,
                    t168,
                    t169,
                    t170,
                    t171,
                    t172,
                    t173,
                    t174,
                    t175,
                    t176,
                    t177,
                    t178,
                    param)
                   {var
                     _Ac_=caml_js_wrap_meth_callback(t178),
                     _Ad_=caml_js_wrap_meth_callback(t177),
                     _Ae_=caml_js_wrap_meth_callback(t176),
                     _Af_=caml_js_wrap_meth_callback(t175),
                     _Ag_=caml_js_wrap_meth_callback(t174),
                     _Ah_=caml_js_wrap_meth_callback(t173),
                     _Ai_=caml_js_wrap_meth_callback(t172),
                     _Aj_=caml_js_wrap_meth_callback(t171),
                     _Ak_=caml_js_wrap_meth_callback(t170);
                    return {"parent":t163,
                            "handle":t164,
                            "position":t165,
                            "name":t166,
                            "type":t167,
                            "body":t168,
                            "proof":t169,
                            "prefix":_Ak_,
                            "idhead":_Aj_,
                            "idbody":_Ai_,
                            "html":_Ah_,
                            "mathml":_Ag_,
                            "tostring":_Af_,
                            "toascii":_Ae_,
                            "getmeta":_Ad_,
                            "setmeta":_Ac_}}
                  (parent,
                   handle,
                   i,
                   _Ab_,
                   _z__,
                   _z9_,
                   _z7_,
                   _z4_,
                   _z3_,
                   _z2_,
                   _z1_,
                   _z0_,
                   _zZ_,
                   _zY_,
                   _zX_,
                   _zW_,
                   _zV_)});
      var _wa_=[0,0,0,0];
      caml_update_dummy
       (js_form,
        function(source,form)
         {function _yT_
           (self,prefix,mathml,html,mathmltag,htmltag,tostring,toascii)
           {if(! _wa_[1])
             {var
               _zB_=create_table(_u__),
               _zC_=new_variable(_zB_,_wb_),
               _zD_=get_method_labels(_zB_,_u4_),
               _zE_=_zD_[1],
               _zF_=_zD_[2],
               _zG_=_zD_[3],
               _zH_=_zD_[4],
               _zI_=_zD_[5],
               _zJ_=_zD_[6],
               _zK_=_zD_[7],
               _zL_=
                function(self_5)
                 {var env=self_5[1 + _zC_];return caml_call1(env[2],env[1])},
               _zM_=
                function(self_5)
                 {var env=self_5[1 + _zC_];return caml_call1(env[3],env[1])},
               _zN_=
                function(self_5)
                 {var env=self_5[1 + _zC_];return caml_call1(env[4],env[1])},
               _zO_=
                function(self_5)
                 {var env=self_5[1 + _zC_];return caml_call1(env[5],env[1])},
               _zP_=
                function(self_5)
                 {var env=self_5[1 + _zC_];return caml_call1(env[6],env[1])},
               _zQ_=
                function(self_5)
                 {var env=self_5[1 + _zC_];return caml_call1(env[7],env[1])};
              set_methods
               (_zB_,
                [0,
                 _zG_,
                 function(self_5){var env=self_5[1 + _zC_];return env[8]},
                 _zI_,
                 _zQ_,
                 _zK_,
                 _zP_,
                 _zH_,
                 _zO_,
                 _zJ_,
                 _zN_,
                 _zE_,
                 _zM_,
                 _zF_,
                 _zL_]);
              var
               _zR_=
                function(_zS_)
                 {var _zT_=create_object_opt(0,_zB_);
                  _zT_[1 + _zC_] = _zS_;
                  return _zT_};
              init_class(_zB_);
              _wa_[1] = _zR_}
            return caml_call1
                    (_wa_[1],
                     [0,
                      self,
                      toascii,
                      tostring,
                      htmltag,
                      mathmltag,
                      html,
                      mathml,
                      prefix])}
          function _yU_(self)
           {var _zA_=f_toascii(form);return caml_jsstring_of_string(_zA_)}
          function _yV_(self)
           {var _zz_=f_tostring(form);return caml_jsstring_of_string(_zz_)}
          function _yW_(self,id)
           {if(id)
             var
              _zq_=
               function(x)
                {return caml_call1(caml_get_public_method(x,783735186,138),x)},
              _zr_=function(t185,param){return t185.prefix},
              prefix=[0,_zr_(self,_zq_)];
            else
             var prefix=0;
            var
             _zs_=[0,prefix],
             _zt_=f_tohtml(_zs_,form),
             _zu_=0,
             _zv_=0,
             _zw_=0,
             _zx_=caml_call3(pp$1,_zw_,_zv_,_zu_),
             _zy_=caml_call2(asprintf(_wc_),_zx_,_zt_);
            return caml_jsstring_of_string(_zy_)}
          function _yX_(self,id)
           {if(id)
             var
              _ze_=
               function(x)
                {return caml_call1(caml_get_public_method(x,783735186,139),x)},
              _zf_=function(t183,param){return t183.prefix},
              prefix=[0,_zf_(self,_ze_)];
            else
             var prefix=0;
            var
             _zg_=0,
             _zh_=[0,prefix],
             _zi_=[0,f_tomathml(_zh_,form),_zg_],
             _zj_=0,
             _zk_=caml_call1(math(_zj_),_zi_),
             _zl_=0,
             _zm_=0,
             _zn_=0,
             _zo_=caml_call3(pp$1,_zn_,_zm_,_zl_),
             _zp_=caml_call2(asprintf(_wd_),_zo_,_zk_);
            return caml_jsstring_of_string(_zp_)}
          function _yY_(self)
           {function _zc_(x)
             {return caml_call1(caml_get_public_method(x,-796476977,140),x)}
            var _zd_=1;
            return function(t182,t181,param){return t182.htmltag(t181)}
                    (self,_zd_,_zc_)}
          function _yZ_(self)
           {function _za_(x)
             {return caml_call1(caml_get_public_method(x,-198776429,141),x)}
            var _zb_=1;
            return function(t180,t179,param){return t180.mathmltag(t179)}
                    (self,_zb_,_za_)}
          var _y0_=source[2],_y1_=source[1];
          if(typeof _y0_ === "number")
           var _y2_=toint(_y1_),_y3_=caml_call1(sprintf$0(_we_),_y2_);
          else
           var
            i=_y0_[2],
            _y4_=toint(i),
            _y5_=toint(_y1_),
            _y3_=caml_call2(sprintf$0(_wf_),_y5_,_y4_);
          return function(t187,t188,t189,t190,t191,t192,t193,param)
                   {var
                     _y6_=caml_js_wrap_meth_callback(t193),
                     _y7_=caml_js_wrap_meth_callback(t192),
                     _y8_=caml_js_wrap_meth_callback(t191),
                     _y9_=caml_js_wrap_meth_callback(t190),
                     _y__=caml_js_wrap_meth_callback(t189),
                     _y$_=caml_js_wrap_meth_callback(t188);
                    return {"prefix":t187,
                            "mathml":_y$_,
                            "html":_y__,
                            "mathmltag":_y9_,
                            "htmltag":_y8_,
                            "tostring":_y7_,
                            "toascii":_y6_}}
                  (_y3_,_yZ_,_yY_,_yX_,_yW_,_yV_,_yU_,_yT_)});
      var _wg_=[0,0,0,0];
      caml_update_dummy
       (js_expr,
        function(expr)
         {function _x$_(self,mathml,html,mathmltag,htmltag,tostring)
           {if(! _wg_[1])
             {var
               _yE_=create_table(_vc_),
               _yF_=new_variable(_yE_,_wh_),
               _yG_=get_method_labels(_yE_,_vb_),
               _yH_=_yG_[1],
               _yI_=_yG_[2],
               _yJ_=_yG_[3],
               _yK_=_yG_[4],
               _yL_=_yG_[5],
               _yM_=
                function(self_6)
                 {var env=self_6[1 + _yF_];return caml_call1(env[2],env[1])},
               _yN_=
                function(self_6)
                 {var env=self_6[1 + _yF_];return caml_call1(env[3],env[1])},
               _yO_=
                function(self_6)
                 {var env=self_6[1 + _yF_];return caml_call1(env[4],env[1])},
               _yP_=
                function(self_6)
                 {var env=self_6[1 + _yF_];return caml_call1(env[5],env[1])};
              set_methods
               (_yE_,
                [0,
                 _yJ_,
                 function(self_6)
                  {var env=self_6[1 + _yF_];return caml_call1(env[6],env[1])},
                 _yL_,
                 _yP_,
                 _yI_,
                 _yO_,
                 _yK_,
                 _yN_,
                 _yH_,
                 _yM_]);
              var
               _yQ_=
                function(_yR_)
                 {var _yS_=create_object_opt(0,_yE_);
                  _yS_[1 + _yF_] = _yR_;
                  return _yS_};
              init_class(_yE_);
              _wg_[1] = _yQ_}
            return caml_call1
                    (_wg_[1],[0,self,tostring,htmltag,mathmltag,html,mathml])}
          function _ya_(self)
           {var _yD_=e_tostring(expr);return caml_jsstring_of_string(_yD_)}
          function _yb_(self)
           {var
             _yw_=0,
             _yx_=e_tohtml(_yw_,expr),
             _yy_=0,
             _yz_=0,
             _yA_=0,
             _yB_=caml_call3(pp$1,_yA_,_yz_,_yy_),
             _yC_=caml_call2(asprintf(_wi_),_yB_,_yx_);
            return caml_jsstring_of_string(_yC_)}
          function _yc_(self)
           {var
             _ym_=0,
             _yn_=0,
             _yo_=[0,e_tomathml(_yn_,expr),_ym_],
             _yp_=0,
             _yq_=caml_call1(math(_yp_),_yo_),
             _yr_=0,
             _ys_=0,
             _yt_=0,
             _yu_=caml_call3(pp$1,_yt_,_ys_,_yr_),
             _yv_=caml_call2(asprintf(_wj_),_yu_,_yq_);
            return caml_jsstring_of_string(_yv_)}
          function _yd_(self)
           {function _yl_(x)
             {return caml_call1(caml_get_public_method(x,-796476977,142),x)}
            return function(t195,param){return t195.htmltag()}(self,_yl_)}
          function _ye_(self)
           {function _yk_(x)
             {return caml_call1(caml_get_public_method(x,-198776429,143),x)}
            return function(t194,param){return t194.mathmltag()}(self,_yk_)}
          return function(t196,t197,t198,t199,t200,param)
                   {var
                     _yf_=caml_js_wrap_meth_callback(t200),
                     _yg_=caml_js_wrap_meth_callback(t199),
                     _yh_=caml_js_wrap_meth_callback(t198),
                     _yi_=caml_js_wrap_meth_callback(t197),
                     _yj_=caml_js_wrap_meth_callback(t196);
                    return {"mathml":_yj_,
                            "html":_yi_,
                            "mathmltag":_yh_,
                            "htmltag":_yg_,
                            "tostring":_yf_}}
                  (_ye_,_yd_,_yc_,_yb_,_ya_,_x$_)});
      var _wk_=[0,0,0,0];
      caml_update_dummy
       (js_type,
        function(ty)
         {function _xm_(self,rawmathml,rawhtml,rawstring,mathml,html,tostring)
           {if(! _wk_[1])
             {var
               _xU_=create_table(_ve_),
               _xV_=new_variable(_xU_,_wl_),
               _xW_=get_method_labels(_xU_,_u6_),
               _xX_=_xW_[1],
               _xY_=_xW_[2],
               _xZ_=_xW_[3],
               _x0_=_xW_[4],
               _x1_=_xW_[5],
               _x2_=_xW_[6],
               _x3_=
                function(self_7)
                 {var env=self_7[1 + _xV_];return caml_call1(env[2],env[1])},
               _x4_=
                function(self_7)
                 {var env=self_7[1 + _xV_];return caml_call1(env[3],env[1])},
               _x5_=
                function(self_7)
                 {var env=self_7[1 + _xV_];return caml_call1(env[4],env[1])},
               _x6_=
                function(self_7)
                 {var env=self_7[1 + _xV_];return caml_call1(env[5],env[1])},
               _x7_=
                function(self_7)
                 {var env=self_7[1 + _xV_];return caml_call1(env[6],env[1])};
              set_methods
               (_xU_,
                [0,
                 _xZ_,
                 function(self_7)
                  {var env=self_7[1 + _xV_];return caml_call1(env[7],env[1])},
                 _x0_,
                 _x7_,
                 _xY_,
                 _x6_,
                 _x1_,
                 _x5_,
                 _x2_,
                 _x4_,
                 _xX_,
                 _x3_]);
              var
               _x8_=
                function(_x9_)
                 {var _x__=create_object_opt(0,_xU_);
                  _x__[1 + _xV_] = _x9_;
                  return _x__};
              init_class(_xU_);
              _wk_[1] = _x8_}
            return caml_call1
                    (_wk_[1],
                     [0,self,tostring,html,mathml,rawstring,rawhtml,rawmathml])}
          function _xn_(self)
           {function _xR_(x)
             {return caml_call1(caml_get_public_method(x,21519545,144),x)}
            function _xS_(t203,param){return t203.rawstring()}
            var _xT_=_xS_(self,_xR_);
            return caml_jsstring_of_string(_xT_)}
          function _xo_(self)
           {function _xJ_(x)
             {return caml_call1(caml_get_public_method(x,384991059,145),x)}
            function _xK_(t202,param){return t202.rawhtml()}
            var
             _xL_=_xK_(self,_xJ_),
             _xM_=0,
             _xN_=0,
             _xO_=0,
             _xP_=caml_call3(pp$1,_xO_,_xN_,_xM_),
             _xQ_=caml_call2(asprintf(_wm_),_xP_,_xL_);
            return caml_jsstring_of_string(_xQ_)}
          function _xp_(self)
           {function _xB_(x)
             {return caml_call1(caml_get_public_method(x,735631119,146),x)}
            function _xC_(t201,param){return t201.rawmathml()}
            var
             _xD_=_xC_(self,_xB_),
             _xE_=0,
             _xF_=0,
             _xG_=0,
             _xH_=caml_call3(pp$1,_xG_,_xF_,_xE_),
             _xI_=caml_call2(asprintf(_wn_),_xH_,_xD_);
            return caml_jsstring_of_string(_xI_)}
          function _xq_(self){return t_tostring(ty)}
          function _xr_(self){return t_tohtml(ty)}
          function _xs_(self)
           {var _xz_=0,_xA_=[0,t_tomathml(ty),_xz_];
            return caml_call1(math(0),_xA_)}
          return function(t204,t205,t206,t207,t208,t209,param)
                   {var
                     _xt_=caml_js_wrap_meth_callback(t209),
                     _xu_=caml_js_wrap_meth_callback(t208),
                     _xv_=caml_js_wrap_meth_callback(t207),
                     _xw_=caml_js_wrap_meth_callback(t206),
                     _xx_=caml_js_wrap_meth_callback(t205),
                     _xy_=caml_js_wrap_meth_callback(t204);
                    return {"rawmathml":_xy_,
                            "rawhtml":_xx_,
                            "rawstring":_xw_,
                            "mathml":_xv_,
                            "html":_xu_,
                            "tostring":_xt_}}
                  (_xs_,_xr_,_xq_,_xp_,_xo_,_xn_,_xm_)});
      var
       _wo_=[0,0,0,0],
       export$1=
        function(name)
         {function _wM_(self,parse,parseToUnicode)
           {if(! _wo_[1])
             {var
               _xd_=create_table(_u7_),
               _xe_=new_variable(_xd_,_wp_),
               _xf_=get_method_labels(_xd_,_u7_),
               _xg_=_xf_[1],
               _xh_=_xf_[2],
               _xi_=
                function(self_8)
                 {var env=self_8[1 + _xe_];return caml_call1(env[2],env[1])};
              set_methods
               (_xd_,
                [0,
                 _xh_,
                 function(self_8)
                  {var env=self_8[1 + _xe_];return caml_call1(env[3],env[1])},
                 _xg_,
                 _xi_]);
              var
               _xj_=
                function(_xk_)
                 {var _xl_=create_object_opt(0,_xd_);
                  _xl_[1 + _xe_] = _xk_;
                  return _xl_};
              init_class(_xd_);
              _wo_[1] = _xj_}
            return caml_call1(_wo_[1],[0,self,parseToUnicode,parse])}
          function _wN_(param,x)
           {var _wY_=0;
            function _wZ_(param)
             {function _w__(x)
               {return caml_call1(caml_get_public_method(x,1042138122,147),x)}
              function _w$_(t211,param){return t211.input}
              var
               _xa_=_w$_(x,_w__),
               _xb_=caml_string_of_jsstring(_xa_),
               goal=trim(_xb_),
               _xc_=from_string$1(goal),
               goal$0=parse_goal(_xc_);
              return check$2(goal$0)}
            function _w0_(_w9_){return symbol$5(_wZ_,_w9_)}
            var
             match=_w0_(_wY_),
             goal=match[3],
             hyps=match[2],
             _w1_=f_tostring(goal);
            function _w2_(b)
             {return b | 0
                      ?caml_call1(to_string$8(_ws_,_wr_,_wq_,f_tostring),hyps)
                      :_wt_}
            function _w3_(param){return _wu_}
            function _w4_(x)
             {return caml_call1(caml_get_public_method(x,-971832799,148),x)}
            function _w5_(t212,param){return t212.printHyps}
            var
             _w6_=_w5_(x,_w4_),
             _w7_=case$1(_w6_,_w3_,_w2_),
             _w8_=caml_call2(sprintf(_wv_),_w7_,_w1_);
            return caml_jsstring_of_string(_w8_)}
          function _wO_(param,x)
           {var _wS_=0;
            function _wT_(param)
             {var
               _wW_=caml_string_of_jsstring(x),
               goal=trim(_wW_),
               _wX_=from_string$1(goal),
               goal$0=parse_goal(_wX_);
              return check$2(goal$0)}
            function _wU_(_wV_){return symbol$5(_wT_,_wV_)}
            var match=_wU_(_wS_),goal=match[3],hyps=match[2],env=match[1];
            return caml_call1(js_proof_engine,init$2(env,hyps,goal))}
          function _wP_(t214,t215,param)
           {var
             _wQ_=caml_js_wrap_meth_callback(t215),
             _wR_=caml_js_wrap_meth_callback(t214);
            return {"parse":_wR_,"parseToUnicode":_wQ_}}
          return export$0(name,_wP_(_wO_,_wN_,_wM_))};
      export$1(_ww_);
      var _wx_=0;
      do_at_exit(_wx_);
      return}}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
