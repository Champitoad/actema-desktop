(* -------------------------------------------------------------------- *)
(** Identifiers *)

type name <ocaml from="Fo"> = abstract
type vname <ocaml from="Fo"> = abstract
type uid <ocaml from="Fo"> = abstract

(* -------------------------------------------------------------------- *)
(** Types *)

type type_ <ocaml from="Fo"> = abstract
type arity <ocaml from="Fo"> = abstract
type sig_  <ocaml from="Fo"> = abstract

(* -------------------------------------------------------------------- *)
(** Expressions *)

type expr <ocaml from="Fo"> = abstract

(* -------------------------------------------------------------------- *)
(** Formulas *)

type logcon <ocaml from="Fo"> = abstract
type bkind  <ocaml from="Fo"> = abstract
type form <ocaml from="Fo"> = abstract

(* -------------------------------------------------------------------- *)
(** Terms = Formulas + Expressions *)

type term <ocaml from="Fo"> = abstract

(* -------------------------------------------------------------------- *)
(** Environments *)

type bvar <ocaml from="Fo"> = abstract
type env <ocaml from="Fo"> = abstract

(* -------------------------------------------------------------------- *)
(** Goals *)

type hyp = {
  h_id : uid;
  h_form : form;
}

type goal = {
  g_env : env;
  g_hyps : hyp list;
  g_concl : form;
}

type lgoal = (hyp list * form)

(* -------------------------------------------------------------------- *)
(** Actions *)

type pkind = [Hyp | Concl | Var of [Head | Body]]
type ctxt = { kind : pkind; handle : uid }
type ipath = { root : uid; ctxt : ctxt; sub : int list }

type choice = (int * expr option)
type itrace = choice list

type action = [
  | AId
  | ADef of ((type_ * expr option) * uid)
  | AIntro of (int * (expr * type_) option)
  | AElim of uid
  | AExact of uid
  | ACut of (form * uid)
  | AAssume of (form * uid)
  | AGeneralize of uid
  | AMove of (uid * uid option)
  | ADuplicate of uid
  | ALink of (ipath * ipath * itrace)
]

type aident = (string * lgoal)

(** Proofs *)

type intro_pat = uid list list

type proof = [
  | PNode of (action * goal * intro_pat * proof list)
]